/* automatically generated by rust-bindgen */

#![allow(clippy::all)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct preview_register_t {
        #[cfg(unix)]
        pub mutex: libc::pthread_mutex_t,
        #[cfg(windows)]
        pub cs: winapi::um::minwinbase::CRITICAL_SECTION,
        pub src: *mut root::PCM_source,
        pub m_out_chan: ::std::os::raw::c_int,
        pub curpos: f64,
        pub loop_: bool,
        pub volume: f64,
        pub peakvol: [f64; 2usize],
        pub preview_track: *mut ::std::os::raw::c_void,
    }
    impl Default for preview_register_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub const DLL_PROCESS_DETACH: u32 = 0;
    pub const DLL_PROCESS_ATTACH: u32 = 1;
    pub const MB_OK: u32 = 0;
    pub const MB_OKCANCEL: u32 = 1;
    pub const MB_ABORTRETRYIGNORE: u32 = 2;
    pub const MB_YESNOCANCEL: u32 = 3;
    pub const MB_YESNO: u32 = 4;
    pub const MB_RETRYCANCEL: u32 = 5;
    pub const MB_DEFBUTTON1: u32 = 0;
    pub const MB_DEFBUTTON2: u32 = 256;
    pub const MB_DEFBUTTON3: u32 = 512;
    pub const MB_ICONERROR: u32 = 0;
    pub const MB_ICONSTOP: u32 = 0;
    pub const MB_ICONINFORMATION: u32 = 0;
    pub const MB_ICONWARNING: u32 = 0;
    pub const MB_ICONQUESTION: u32 = 0;
    pub const MB_TOPMOST: u32 = 0;
    pub const MB_ICONEXCLAMATION: u32 = 0;
    pub const IDOK: u32 = 1;
    pub const IDCANCEL: u32 = 2;
    pub const IDABORT: u32 = 3;
    pub const IDRETRY: u32 = 4;
    pub const IDIGNORE: u32 = 5;
    pub const IDYES: u32 = 6;
    pub const IDNO: u32 = 7;
    pub const GW_HWNDFIRST: u32 = 0;
    pub const GW_HWNDLAST: u32 = 1;
    pub const GW_HWNDNEXT: u32 = 2;
    pub const GW_HWNDPREV: u32 = 3;
    pub const GW_OWNER: u32 = 4;
    pub const GW_CHILD: u32 = 5;
    pub const GWL_HWNDPARENT: i32 = -25;
    pub const GWL_USERDATA: i32 = -21;
    pub const GWL_ID: i32 = -12;
    pub const GWL_STYLE: i32 = -16;
    pub const GWL_EXSTYLE: i32 = -20;
    pub const GWL_WNDPROC: i32 = -4;
    pub const WS_CHILD: u32 = 1073741824;
    pub const WS_DISABLED: u32 = 134217728;
    pub const WS_CLIPSIBLINGS: u32 = 67108864;
    pub const WS_VISIBLE: u32 = 33554432;
    pub const WS_CAPTION: u32 = 12582912;
    pub const WS_VSCROLL: u32 = 2097152;
    pub const WS_HSCROLL: u32 = 1048576;
    pub const WS_SYSMENU: u32 = 524288;
    pub const WS_THICKFRAME: u32 = 262144;
    pub const WS_GROUP: u32 = 131072;
    pub const WS_TABSTOP: u32 = 65536;
    pub const WS_BORDER: u32 = 0;
    pub const WM_CTLCOLORMSGBOX: u32 = 306;
    pub const WM_CTLCOLOREDIT: u32 = 307;
    pub const WM_CTLCOLORLISTBOX: u32 = 308;
    pub const WM_CTLCOLORBTN: u32 = 309;
    pub const WM_CTLCOLORDLG: u32 = 310;
    pub const WM_CTLCOLORSCROLLBAR: u32 = 311;
    pub const WM_CTLCOLORSTATIC: u32 = 312;
    pub const CB_ADDSTRING: u32 = 323;
    pub const CB_DELETESTRING: u32 = 324;
    pub const CB_GETCOUNT: u32 = 326;
    pub const CB_GETCURSEL: u32 = 327;
    pub const CB_GETLBTEXT: u32 = 328;
    pub const CB_GETLBTEXTLEN: u32 = 329;
    pub const CB_INSERTSTRING: u32 = 330;
    pub const CB_RESETCONTENT: u32 = 331;
    pub const CB_FINDSTRING: u32 = 332;
    pub const CB_SETCURSEL: u32 = 334;
    pub const CB_GETITEMDATA: u32 = 336;
    pub const CB_SETITEMDATA: u32 = 337;
    pub const CB_FINDSTRINGEXACT: u32 = 344;
    pub const CB_INITSTORAGE: u32 = 353;
    pub const BM_GETCHECK: u32 = 240;
    pub const BM_SETCHECK: u32 = 241;
    pub const BM_GETIMAGE: u32 = 246;
    pub const BM_SETIMAGE: u32 = 247;
    pub const BST_CHECKED: u32 = 1;
    pub const BST_UNCHECKED: u32 = 0;
    pub const BST_INDETERMINATE: u32 = 2;
    pub const SW_HIDE: i32 = 0;
    pub const SW_SHOWNA: i32 = 1;
    pub const SW_SHOW: i32 = 2;
    pub const SW_SHOWMINIMIZED: i32 = 3;
    pub const SW_SHOWNOACTIVATE: i32 = 1;
    pub const SW_NORMAL: i32 = 2;
    pub const SW_SHOWNORMAL: i32 = 2;
    pub const SW_SHOWMAXIMIZED: i32 = 2;
    pub const SW_SHOWDEFAULT: i32 = 2;
    pub const SW_RESTORE: i32 = 1;
    pub const SWP_NOMOVE: u32 = 1;
    pub const SWP_NOSIZE: u32 = 2;
    pub const SWP_NOZORDER: u32 = 4;
    pub const SWP_NOACTIVATE: u32 = 8;
    pub const SWP_SHOWWINDOW: u32 = 16;
    pub const SWP_FRAMECHANGED: u32 = 32;
    pub const SWP_NOCOPYBITS: u32 = 0;
    pub const TPM_LEFTBUTTON: u32 = 0;
    pub const TPM_RIGHTBUTTON: u32 = 2;
    pub const TPM_LEFTALIGN: u32 = 0;
    pub const TPM_CENTERALIGN: u32 = 4;
    pub const TPM_RIGHTALIGN: u32 = 8;
    pub const TPM_TOPALIGN: u32 = 0;
    pub const TPM_VCENTERALIGN: u32 = 16;
    pub const TPM_BOTTOMALIGN: u32 = 32;
    pub const TPM_HORIZONTAL: u32 = 0;
    pub const TPM_VERTICAL: u32 = 64;
    pub const TPM_NONOTIFY: u32 = 128;
    pub const TPM_RETURNCMD: u32 = 256;
    pub const MIIM_ID: u32 = 1;
    pub const MIIM_STATE: u32 = 2;
    pub const MIIM_TYPE: u32 = 4;
    pub const MIIM_SUBMENU: u32 = 8;
    pub const MIIM_DATA: u32 = 16;
    pub const MIIM_BITMAP: u32 = 128;
    pub const MF_ENABLED: u32 = 0;
    pub const MF_GRAYED: u32 = 1;
    pub const MF_DISABLED: u32 = 2;
    pub const MF_STRING: u32 = 0;
    pub const MF_BITMAP: u32 = 4;
    pub const MF_UNCHECKED: u32 = 0;
    pub const MF_CHECKED: u32 = 8;
    pub const MF_POPUP: u32 = 16;
    pub const MF_BYCOMMAND: u32 = 0;
    pub const MF_BYPOSITION: u32 = 1024;
    pub const MF_SEPARATOR: u32 = 2048;
    pub const EN_SETFOCUS: u32 = 256;
    pub const EN_KILLFOCUS: u32 = 512;
    pub const EN_CHANGE: u32 = 768;
    pub const WM_CREATE: u32 = 1;
    pub const WM_DESTROY: u32 = 2;
    pub const WM_MOVE: u32 = 3;
    pub const WM_SIZE: u32 = 5;
    pub const WM_ACTIVATE: u32 = 6;
    pub const WM_SETFOCUS: u32 = 7;
    pub const WM_KILLFOCUS: u32 = 8;
    pub const WM_SETREDRAW: u32 = 11;
    pub const WM_SETTEXT: u32 = 12;
    pub const WM_PAINT: u32 = 15;
    pub const WM_CLOSE: u32 = 16;
    pub const WM_ERASEBKGND: u32 = 20;
    pub const WM_SHOWWINDOW: u32 = 24;
    pub const WM_ACTIVATEAPP: u32 = 28;
    pub const WM_SETCURSOR: u32 = 32;
    pub const WM_MOUSEACTIVATE: u32 = 33;
    pub const WM_GETMINMAXINFO: u32 = 36;
    pub const WM_DRAWITEM: u32 = 43;
    pub const WM_SETFONT: u32 = 48;
    pub const WM_GETFONT: u32 = 49;
    pub const WM_GETOBJECT: u32 = 61;
    pub const WM_COPYDATA: u32 = 74;
    pub const WM_NOTIFY: u32 = 78;
    pub const WM_CONTEXTMENU: u32 = 123;
    pub const WM_STYLECHANGED: u32 = 125;
    pub const WM_DISPLAYCHANGE: u32 = 126;
    pub const WM_NCDESTROY: u32 = 130;
    pub const WM_NCCALCSIZE: u32 = 131;
    pub const WM_NCHITTEST: u32 = 132;
    pub const WM_NCPAINT: u32 = 133;
    pub const WM_NCMOUSEMOVE: u32 = 160;
    pub const WM_NCLBUTTONDOWN: u32 = 161;
    pub const WM_NCLBUTTONUP: u32 = 162;
    pub const WM_NCLBUTTONDBLCLK: u32 = 163;
    pub const WM_NCRBUTTONDOWN: u32 = 164;
    pub const WM_NCRBUTTONUP: u32 = 165;
    pub const WM_NCRBUTTONDBLCLK: u32 = 166;
    pub const WM_NCMBUTTONDOWN: u32 = 167;
    pub const WM_NCMBUTTONUP: u32 = 168;
    pub const WM_NCMBUTTONDBLCLK: u32 = 169;
    pub const WM_KEYFIRST: u32 = 256;
    pub const WM_KEYDOWN: u32 = 256;
    pub const WM_KEYUP: u32 = 257;
    pub const WM_CHAR: u32 = 258;
    pub const WM_DEADCHAR: u32 = 259;
    pub const WM_SYSKEYDOWN: u32 = 260;
    pub const WM_SYSKEYUP: u32 = 261;
    pub const WM_SYSCHAR: u32 = 262;
    pub const WM_SYSDEADCHAR: u32 = 263;
    pub const WM_KEYLAST: u32 = 264;
    pub const WM_INITDIALOG: u32 = 272;
    pub const WM_COMMAND: u32 = 273;
    pub const WM_SYSCOMMAND: u32 = 274;
    pub const WM_TIMER: u32 = 275;
    pub const WM_HSCROLL: u32 = 276;
    pub const WM_VSCROLL: u32 = 277;
    pub const WM_INITMENUPOPUP: u32 = 279;
    pub const WM_GESTURE: u32 = 281;
    pub const WM_MOUSEFIRST: u32 = 512;
    pub const WM_MOUSEMOVE: u32 = 512;
    pub const WM_LBUTTONDOWN: u32 = 513;
    pub const WM_LBUTTONUP: u32 = 514;
    pub const WM_LBUTTONDBLCLK: u32 = 515;
    pub const WM_RBUTTONDOWN: u32 = 516;
    pub const WM_RBUTTONUP: u32 = 517;
    pub const WM_RBUTTONDBLCLK: u32 = 518;
    pub const WM_MBUTTONDOWN: u32 = 519;
    pub const WM_MBUTTONUP: u32 = 520;
    pub const WM_MBUTTONDBLCLK: u32 = 521;
    pub const WM_MOUSEWHEEL: u32 = 522;
    pub const WM_MOUSEHWHEEL: u32 = 526;
    pub const WM_MOUSELAST: u32 = 522;
    pub const WM_CAPTURECHANGED: u32 = 533;
    pub const WM_DROPFILES: u32 = 563;
    pub const WM_SWELL_EXTENDED: u32 = 921;
    pub const WM_USER: u32 = 1024;
    pub const CBN_SELCHANGE: u32 = 1;
    pub const CBN_EDITCHANGE: u32 = 5;
    pub const CBN_DROPDOWN: u32 = 7;
    pub const CBN_CLOSEUP: u32 = 8;
    pub const CB_ERR: i32 = -1;
    pub const SB_HORZ: u32 = 0;
    pub const SB_VERT: u32 = 1;
    pub const SB_CTL: u32 = 2;
    pub const SB_BOTH: u32 = 3;
    pub const SB_LINEUP: u32 = 0;
    pub const SB_LINELEFT: u32 = 0;
    pub const SB_LINEDOWN: u32 = 1;
    pub const SB_LINERIGHT: u32 = 1;
    pub const SB_PAGEUP: u32 = 2;
    pub const SB_PAGELEFT: u32 = 2;
    pub const SB_PAGEDOWN: u32 = 3;
    pub const SB_PAGERIGHT: u32 = 3;
    pub const SB_THUMBPOSITION: u32 = 4;
    pub const SB_THUMBTRACK: u32 = 5;
    pub const SB_TOP: u32 = 6;
    pub const SB_LEFT: u32 = 6;
    pub const SB_BOTTOM: u32 = 7;
    pub const SB_RIGHT: u32 = 7;
    pub const SB_ENDSCROLL: u32 = 8;
    pub const WS_EX_LEFTSCROLLBAR: u32 = 16384;
    pub const WS_EX_ACCEPTFILES: u32 = 16;
    pub const SIF_RANGE: u32 = 1;
    pub const SIF_PAGE: u32 = 2;
    pub const SIF_POS: u32 = 4;
    pub const SIF_DISABLENOSCROLL: u32 = 8;
    pub const SIF_TRACKPOS: u32 = 16;
    pub const SIF_ALL: u32 = 23;
    pub const VK_LBUTTON: u32 = 1;
    pub const VK_RBUTTON: u32 = 2;
    pub const VK_MBUTTON: u32 = 4;
    pub const VK_BACK: u32 = 8;
    pub const VK_TAB: u32 = 9;
    pub const VK_CLEAR: u32 = 12;
    pub const VK_RETURN: u32 = 13;
    pub const VK_SHIFT: u32 = 16;
    pub const VK_CONTROL: u32 = 17;
    pub const VK_MENU: u32 = 18;
    pub const VK_PAUSE: u32 = 19;
    pub const VK_CAPITAL: u32 = 20;
    pub const VK_ESCAPE: u32 = 27;
    pub const VK_SPACE: u32 = 32;
    pub const VK_PRIOR: u32 = 33;
    pub const VK_NEXT: u32 = 34;
    pub const VK_END: u32 = 35;
    pub const VK_HOME: u32 = 36;
    pub const VK_LEFT: u32 = 37;
    pub const VK_UP: u32 = 38;
    pub const VK_RIGHT: u32 = 39;
    pub const VK_DOWN: u32 = 40;
    pub const VK_SELECT: u32 = 41;
    pub const VK_PRINT: u32 = 42;
    pub const VK_SNAPSHOT: u32 = 44;
    pub const VK_INSERT: u32 = 45;
    pub const VK_DELETE: u32 = 46;
    pub const VK_HELP: u32 = 47;
    pub const VK_LWIN: u32 = 91;
    pub const VK_NUMPAD0: u32 = 96;
    pub const VK_NUMPAD1: u32 = 97;
    pub const VK_NUMPAD2: u32 = 98;
    pub const VK_NUMPAD3: u32 = 99;
    pub const VK_NUMPAD4: u32 = 100;
    pub const VK_NUMPAD5: u32 = 101;
    pub const VK_NUMPAD6: u32 = 102;
    pub const VK_NUMPAD7: u32 = 103;
    pub const VK_NUMPAD8: u32 = 104;
    pub const VK_NUMPAD9: u32 = 105;
    pub const VK_MULTIPLY: u32 = 106;
    pub const VK_ADD: u32 = 107;
    pub const VK_SEPARATOR: u32 = 108;
    pub const VK_SUBTRACT: u32 = 109;
    pub const VK_DECIMAL: u32 = 110;
    pub const VK_DIVIDE: u32 = 111;
    pub const VK_F1: u32 = 112;
    pub const VK_F2: u32 = 113;
    pub const VK_F3: u32 = 114;
    pub const VK_F4: u32 = 115;
    pub const VK_F5: u32 = 116;
    pub const VK_F6: u32 = 117;
    pub const VK_F7: u32 = 118;
    pub const VK_F8: u32 = 119;
    pub const VK_F9: u32 = 120;
    pub const VK_F10: u32 = 121;
    pub const VK_F11: u32 = 122;
    pub const VK_F12: u32 = 123;
    pub const VK_F13: u32 = 124;
    pub const VK_F14: u32 = 125;
    pub const VK_F15: u32 = 126;
    pub const VK_F16: u32 = 127;
    pub const VK_F17: u32 = 128;
    pub const VK_F18: u32 = 129;
    pub const VK_F19: u32 = 130;
    pub const VK_F20: u32 = 131;
    pub const VK_F21: u32 = 132;
    pub const VK_F22: u32 = 133;
    pub const VK_F23: u32 = 134;
    pub const VK_F24: u32 = 135;
    pub const VK_NUMLOCK: u32 = 144;
    pub const VK_SCROLL: u32 = 145;
    pub const COLOR_3DSHADOW: u32 = 0;
    pub const COLOR_3DHILIGHT: u32 = 1;
    pub const COLOR_3DFACE: u32 = 2;
    pub const COLOR_BTNTEXT: u32 = 3;
    pub const COLOR_WINDOW: u32 = 4;
    pub const COLOR_SCROLLBAR: u32 = 5;
    pub const COLOR_3DDKSHADOW: u32 = 6;
    pub const COLOR_BTNFACE: u32 = 7;
    pub const COLOR_INFOBK: u32 = 8;
    pub const COLOR_INFOTEXT: u32 = 9;
    pub const SRCCOPY: u32 = 0;
    pub const SRCCOPY_USEALPHACHAN: u32 = 3735928559;
    pub const DT_TOP: u32 = 0;
    pub const DT_LEFT: u32 = 0;
    pub const DT_CENTER: u32 = 1;
    pub const DT_RIGHT: u32 = 2;
    pub const DT_VCENTER: u32 = 4;
    pub const DT_BOTTOM: u32 = 8;
    pub const DT_WORDBREAK: u32 = 16;
    pub const DT_SINGLELINE: u32 = 32;
    pub const DT_NOCLIP: u32 = 256;
    pub const DT_CALCRECT: u32 = 1024;
    pub const DT_NOPREFIX: u32 = 2048;
    pub const DT_END_ELLIPSIS: u32 = 32768;
    pub const TRANSPARENT: u32 = 0;
    pub const OPAQUE: u32 = 1;
    pub const NULL_PEN: u32 = 1;
    pub const NULL_BRUSH: u32 = 2;
    pub const GMEM_ZEROINIT: u32 = 1;
    pub const GMEM_FIXED: u32 = 0;
    pub const GMEM_MOVEABLE: u32 = 0;
    pub const GMEM_DDESHARE: u32 = 0;
    pub const GMEM_DISCARDABLE: u32 = 0;
    pub const GMEM_SHARE: u32 = 0;
    pub const GMEM_LOWER: u32 = 0;
    pub const CF_TEXT: u32 = 1;
    pub const CF_HDROP: u32 = 2;
    pub const SM_CXSCREEN: i32 = 0;
    pub const SM_CYSCREEN: i32 = 1;
    pub const SM_CXVSCROLL: i32 = 2;
    pub const SM_CYHSCROLL: i32 = 3;
    pub const SM_CYMENU: i32 = 15;
    pub const SM_CYVSCROLL: i32 = 20;
    pub const SM_CXHSCROLL: i32 = 21;
    pub const THREAD_BASE_PRIORITY_LOWRT: u32 = 15;
    pub const THREAD_BASE_PRIORITY_MAX: u32 = 2;
    pub const THREAD_BASE_PRIORITY_MIN: i32 = -2;
    pub const THREAD_BASE_PRIORITY_IDLE: i32 = -15;
    pub const THREAD_PRIORITY_LOWEST: i32 = -2;
    pub const THREAD_PRIORITY_BELOW_NORMAL: i32 = -1;
    pub const THREAD_PRIORITY_NORMAL: u32 = 0;
    pub const THREAD_PRIORITY_HIGHEST: u32 = 2;
    pub const THREAD_PRIORITY_ABOVE_NORMAL: u32 = 1;
    pub const THREAD_PRIORITY_TIME_CRITICAL: u32 = 15;
    pub const THREAD_PRIORITY_IDLE: i32 = -15;
    pub const REAPER_PLUGIN_VERSION: i32 = 526;
    pub const PCM_SOURCE_EXT_INLINEEDITOR: i32 = 256;
    pub const PCM_SOURCE_EXT_PROJCHANGENOTIFY: i32 = 8192;
    pub const PCM_SOURCE_EXT_OPENEDITOR: i32 = 65537;
    pub const PCM_SOURCE_EXT_GETEDITORSTRING: i32 = 65538;
    pub const PCM_SOURCE_EXT_DEPRECATED_1: i32 = 65539;
    pub const PCM_SOURCE_EXT_SETITEMCONTEXT: i32 = 65540;
    pub const PCM_SOURCE_EXT_ADDMIDIEVENTS: i32 = 65541;
    pub const PCM_SOURCE_EXT_GETASSOCIATED_RPP: i32 = 65542;
    pub const PCM_SOURCE_EXT_GETMETADATA: i32 = 65543;
    pub const PCM_SOURCE_EXT_SETASSECONDARYSOURCE: i32 = 65544;
    pub const PCM_SOURCE_EXT_SHOWMIDIPREVIEW: i32 = 65545;
    pub const PCM_SOURCE_EXT_SEND_EDITOR_MSG: i32 = 65546;
    pub const PCM_SOURCE_EXT_SETSECONDARYSOURCELIST: i32 = 65547;
    pub const PCM_SOURCE_EXT_ISOPENEDITOR: i32 = 65548;
    pub const PCM_SOURCE_EXT_SETEDITORGRID: i32 = 65549;
    pub const PCM_SOURCE_EXT_GETITEMCONTEXT: i32 = 65552;
    pub const PCM_SOURCE_EXT_GETALLMETADATA_DEPRECATED: i32 = 65553;
    pub const PCM_SOURCE_EXT_GETBITRATE: i32 = 65554;
    pub const PCM_SOURCE_EXT_ENUMMETADATA: i32 = 65555;
    pub const PCM_SOURCE_EXT_GETINFOSTRING: i32 = 65556;
    pub const PCM_SOURCE_EXT_CONFIGISFILENAME: i32 = 131072;
    pub const PCM_SOURCE_EXT_WRITEMETADATA_DEPRECATED: i32 = 131079;
    pub const PCM_SOURCE_EXT_WRITE_METADATA: i32 = 131080;
    pub const PCM_SOURCE_EXT_GETBPMANDINFO: i32 = 262144;
    pub const PCM_SOURCE_EXT_GETNTRACKS: i32 = 524288;
    pub const PCM_SOURCE_EXT_GETTITLE: i32 = 524289;
    pub const PCM_SOURCE_EXT_ENUMTEMPOMAP: i32 = 524290;
    pub const PCM_SOURCE_EXT_WANTOLDBEATSTYLE: i32 = 524291;
    pub const PCM_SOURCE_EXT_GETNOTATIONSETTINGS: i32 = 524292;
    pub const PCM_SOURCE_EXT_RELOADTRACKDATA: i32 = 524293;
    pub const PCM_SOURCE_EXT_WANT_TRIM: i32 = 589825;
    pub const PCM_SOURCE_EXT_WANTTRIM_DEPRECATED: i32 = 589826;
    pub const PCM_SOURCE_EXT_TRIMITEM: i32 = 589827;
    pub const PCM_SOURCE_EXT_EXPORTTOFILE: i32 = 589828;
    pub const PCM_SOURCE_EXT_ENUMCUES: i32 = 589829;
    pub const PCM_SOURCE_EXT_ENUMCUES_EX: i32 = 589846;
    pub const PCM_SOURCE_EXT_ENUMSLICES: i32 = 589830;
    pub const PCM_SOURCE_EXT_ENDPLAYNOTIFY: i32 = 589831;
    pub const PCM_SOURCE_EXT_SETPREVIEWTEMPO: i32 = 589832;
    pub const PCM_SOURCE_EXT_GETRAWMIDIEVENTS: i32 = 589833;
    pub const PCM_SOURCE_EXT_SETRESAMPLEMODE: i32 = 589834;
    pub const PCM_SOURCE_EXT_NOTIFYPREVIEWPLAYPOS: i32 = 589835;
    pub const PCM_SOURCE_EXT_SETSIZE: i32 = 589836;
    pub const PCM_SOURCE_EXT_GETSOURCETEMPO: i32 = 589837;
    pub const PCM_SOURCE_EXT_ISABNORMALAUDIO: i32 = 589838;
    pub const PCM_SOURCE_EXT_GETPOOLEDMIDIID: i32 = 589839;
    pub const PCM_SOURCE_EXT_REMOVEFROMMIDIPOOL: i32 = 589840;
    pub const PCM_SOURCE_EXT_GETHASH: i32 = 589841;
    pub const PCM_SOURCE_EXT_GETIMAGE: i32 = 589842;
    pub const PCM_SOURCE_EXT_NOAUDIO: i32 = 589843;
    pub const PCM_SOURCE_EXT_HASMIDI: i32 = 589844;
    pub const PCM_SOURCE_EXT_DELETEMIDINOTES: i32 = 589845;
    pub const PCM_SOURCE_EXT_GETGUID: i32 = 589847;
    pub const PCM_SOURCE_EXT_DOPASTEINITEM: i32 = 590080;
    pub const PCM_SOURCE_EXT_GETNOTERANGE: i32 = 589848;
    pub const PCM_SOURCE_EXT_PPQCONVERT: i32 = 589856;
    pub const PCM_SOURCE_EXT_COUNTMIDIEVTS: i32 = 589857;
    pub const PCM_SOURCE_EXT_GETSETMIDIEVT: i32 = 589858;
    pub const PCM_SOURCE_EXT_GETSUGGESTEDTEXT: i32 = 589859;
    pub const PCM_SOURCE_EXT_GETSCALE: i32 = 589860;
    pub const PCM_SOURCE_EXT_SELECTCONTENT: i32 = 589861;
    pub const PCM_SOURCE_EXT_GETGRIDINFO: i32 = 589862;
    pub const PCM_SOURCE_EXT_SORTMIDIEVTS: i32 = 36903;
    pub const PCM_SOURCE_EXT_MIDI_COMPACTPHRASES: i32 = 589864;
    pub const PCM_SOURCE_EXT_GETSETALLMIDI: i32 = 589865;
    pub const PCM_SOURCE_EXT_DISABLESORTMIDIEVTS: i32 = 589872;
    pub const PCM_SOURCE_EXT_GETPOOLEDMIDIID2: i32 = 589873;
    pub const PCM_SOURCE_EXT_GETSETMIDICHANFILTER: i32 = 589874;
    pub const PCM_SOURCE_EXT_REFRESH_EDITORS: i32 = 589875;
    pub const PCM_SOURCE_EXT_GETLAPPING: i32 = 786688;
    pub const PCM_SOURCE_EXT_SET_PREVIEW_POS_OVERRIDE: i32 = 786689;
    pub const PCM_SINK_EXT_CREATESOURCE: i32 = 524288;
    pub const PCM_SINK_EXT_DONE: i32 = 524289;
    pub const PCM_SINK_EXT_VERIFYFMT: i32 = 524290;
    pub const PCM_SINK_EXT_SETQUANT: i32 = 524291;
    pub const PCM_SINK_EXT_SETRATE: i32 = 524292;
    pub const PCM_SINK_EXT_GETBITDEPTH: i32 = 524293;
    pub const PCM_SINK_EXT_ADDCUE: i32 = 524294;
    pub const PCM_SINK_EXT_SETCURBLOCKTIME: i32 = 524295;
    pub const PCM_SINK_EXT_IS_VIDEO: i32 = 524296;
    pub const RESAMPLE_EXT_SETRSMODE: i32 = 4096;
    pub const RESAMPLE_EXT_SETFEEDMODE: i32 = 4097;
    pub const RESAMPLE_EXT_RESETWITHFRACPOS: i32 = 24576;
    pub const REAPER_PITCHSHIFT_API_VER: i32 = 20;
    pub const CSURF_EXT_RESET: i32 = 131071;
    pub const CSURF_EXT_SETINPUTMONITOR: i32 = 65537;
    pub const CSURF_EXT_SETMETRONOME: i32 = 65538;
    pub const CSURF_EXT_SETAUTORECARM: i32 = 65539;
    pub const CSURF_EXT_SETRECMODE: i32 = 65540;
    pub const CSURF_EXT_SETSENDVOLUME: i32 = 65541;
    pub const CSURF_EXT_SETSENDPAN: i32 = 65542;
    pub const CSURF_EXT_SETFXENABLED: i32 = 65543;
    pub const CSURF_EXT_SETFXPARAM: i32 = 65544;
    pub const CSURF_EXT_SETFXPARAM_RECFX: i32 = 65560;
    pub const CSURF_EXT_SETBPMANDPLAYRATE: i32 = 65545;
    pub const CSURF_EXT_SETLASTTOUCHEDFX: i32 = 65546;
    pub const CSURF_EXT_SETFOCUSEDFX: i32 = 65547;
    pub const CSURF_EXT_SETLASTTOUCHEDTRACK: i32 = 65548;
    pub const CSURF_EXT_SETMIXERSCROLL: i32 = 65549;
    pub const CSURF_EXT_SETPAN_EX: i32 = 65550;
    pub const CSURF_EXT_SETRECVVOLUME: i32 = 65552;
    pub const CSURF_EXT_SETRECVPAN: i32 = 65553;
    pub const CSURF_EXT_SETFXOPEN: i32 = 65554;
    pub const CSURF_EXT_SETFXCHANGE: i32 = 65555;
    pub const CSURF_EXT_SETPROJECTMARKERCHANGE: i32 = 65556;
    pub const CSURF_EXT_TRACKFX_PRESET_CHANGED: i32 = 65557;
    pub const CSURF_EXT_SUPPORTS_EXTENDED_TOUCH: i32 = 524289;
    pub const CSURF_EXT_MIDI_DEVICE_REMAP: i32 = 65689;
    pub const UNDO_STATE_ALL: u32 = 4294967295;
    pub const UNDO_STATE_TRACKCFG: u32 = 1;
    pub const UNDO_STATE_FX: u32 = 2;
    pub const UNDO_STATE_ITEMS: u32 = 4;
    pub const UNDO_STATE_MISCCFG: u32 = 8;
    pub const UNDO_STATE_FREEZE: u32 = 16;
    pub const UNDO_STATE_TRACKENV: u32 = 32;
    pub const UNDO_STATE_FXENV: u32 = 64;
    pub const UNDO_STATE_POOLEDENVS: u32 = 128;
    pub const TWENTY_OVER_LN10: f64 = 8.685889638065037;
    pub const LN10_OVER_TWENTY: f64 = 0.11512925464970228;
    pub type ReaSample = f64;
    pub type __intptr_t = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    impl Default for __pthread_internal_list {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct __pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_int,
        pub __list: root::__pthread_list_t,
    }
    impl Default for __pthread_mutex_s {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::std::os::raw::c_char; 48usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 6usize],
    }
    impl Default for pthread_mutex_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub type INT_PTR = isize;
    pub type LONG_PTR = isize;
    pub type UINT_PTR = usize;
    pub type ULONG_PTR = usize;
    pub type DWORD_PTR = usize;
    pub type BOOL = ::std::os::raw::c_schar;
    pub type WORD = ::std::os::raw::c_ushort;
    pub type DWORD = ::std::os::raw::c_uint;
    pub type COLORREF = root::DWORD;
    pub type UINT = ::std::os::raw::c_uint;
    pub type WPARAM = root::ULONG_PTR;
    pub type LPARAM = root::LONG_PTR;
    pub type LRESULT = root::LONG_PTR;
    pub type LPVOID = *mut ::std::os::raw::c_void;
    pub type HRESULT = ::std::os::raw::c_int;
    pub type LONG = ::std::os::raw::c_int;
    pub type SHORT = ::std::os::raw::c_short;
    pub type LPSTR = *mut ::std::os::raw::c_char;
    pub type LPTSTR = *mut ::std::os::raw::c_char;
    pub type LPCTSTR = *const ::std::os::raw::c_char;
    pub type ULONGLONG = ::std::os::raw::c_ulonglong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWND__ {
        _unused: [u8; 0],
    }
    pub type HWND = *mut root::HWND__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMENU__ {
        _unused: [u8; 0],
    }
    pub type HMENU = *mut root::HMENU__;
    pub type HANDLE = *mut ::std::os::raw::c_void;
    pub type HINSTANCE = *mut ::std::os::raw::c_void;
    pub type HDROP = *mut ::std::os::raw::c_void;
    pub type TIMERPROC = ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: root::HWND,
            uMsg: root::UINT,
            idEvent: root::UINT_PTR,
            dwTime: root::DWORD,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct POINT {
        pub x: root::LONG,
        pub y: root::LONG,
    }
    pub type LPPOINT = *mut root::POINT;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct POINTS {
        pub x: root::SHORT,
        pub y: root::SHORT,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct RECT {
        pub left: root::LONG,
        pub top: root::LONG,
        pub right: root::LONG,
        pub bottom: root::LONG,
    }
    pub type LPRECT = *mut root::RECT;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct ACCEL {
        pub fVirt: ::std::os::raw::c_uchar,
        pub key: ::std::os::raw::c_ushort,
        pub cmd: ::std::os::raw::c_ushort,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct FILETIME {
        pub dwLowDateTime: root::DWORD,
        pub dwHighDateTime: root::DWORD,
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct _GUID {
        pub Data1: ::std::os::raw::c_uint,
        pub Data2: ::std::os::raw::c_ushort,
        pub Data3: ::std::os::raw::c_ushort,
        pub Data4: [::std::os::raw::c_uchar; 8usize],
    }
    pub type GUID = root::_GUID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct MSG {
        pub hwnd: root::HWND,
        pub message: root::UINT,
        pub wParam: root::WPARAM,
        pub lParam: root::LPARAM,
        pub time: root::DWORD,
        pub pt: root::POINT,
    }
    impl Default for MSG {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDC__ {
        _unused: [u8; 0],
    }
    pub type HDC = *mut root::HDC__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HCURSOR__ {
        _unused: [u8; 0],
    }
    pub type HCURSOR = *mut root::HCURSOR__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HGDIOBJ__ {
        _unused: [u8; 0],
    }
    pub type HBITMAP = *mut root::HGDIOBJ__;
    pub type HICON = *mut root::HGDIOBJ__;
    pub type HGDIOBJ = *mut root::HGDIOBJ__;
    pub type HBRUSH = *mut root::HGDIOBJ__;
    pub type HPEN = *mut root::HGDIOBJ__;
    pub type HFONT = *mut root::HGDIOBJ__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct LVCOLUMN {
        pub mask: ::std::os::raw::c_int,
        pub fmt: ::std::os::raw::c_int,
        pub cx: ::std::os::raw::c_int,
        pub pszText: *mut ::std::os::raw::c_char,
        pub cchTextMax: ::std::os::raw::c_int,
        pub iSubItem: ::std::os::raw::c_int,
    }
    impl Default for LVCOLUMN {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct LVITEM {
        pub mask: ::std::os::raw::c_int,
        pub iItem: ::std::os::raw::c_int,
        pub iSubItem: ::std::os::raw::c_int,
        pub state: ::std::os::raw::c_int,
        pub stateMask: ::std::os::raw::c_int,
        pub pszText: *mut ::std::os::raw::c_char,
        pub cchTextMax: ::std::os::raw::c_int,
        pub iImage: ::std::os::raw::c_int,
        pub lParam: root::LPARAM,
    }
    impl Default for LVITEM {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type PFNLVCOMPARE = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LPARAM,
            arg2: root::LPARAM,
            arg3: root::LPARAM,
        ) -> ::std::os::raw::c_int,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HIMAGELIST__ {
        _unused: [u8; 0],
    }
    pub type HIMAGELIST = *mut root::HIMAGELIST__;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct LVHITTESTINFO {
        pub pt: root::POINT,
        pub flags: root::UINT,
        pub iItem: ::std::os::raw::c_int,
        pub iSubItem: ::std::os::raw::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct HDITEM {
        pub mask: root::UINT,
        pub cxy: ::std::os::raw::c_int,
        pub pszText: *mut ::std::os::raw::c_char,
        pub hbm: root::HBITMAP,
        pub cchTextMax: ::std::os::raw::c_int,
        pub fmt: ::std::os::raw::c_int,
        pub lParam: root::LPARAM,
        pub iImage: ::std::os::raw::c_int,
        pub iOrder: ::std::os::raw::c_int,
        pub type_: root::UINT,
        pub pvFilter: *mut ::std::os::raw::c_void,
        pub state: root::UINT,
    }
    impl Default for HDITEM {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct TCITEM {
        pub mask: root::UINT,
        pub dwState: root::DWORD,
        pub dwStateMask: root::DWORD,
        pub pszText: *mut ::std::os::raw::c_char,
        pub cchTextMax: ::std::os::raw::c_int,
        pub iImage: ::std::os::raw::c_int,
        pub lParam: root::LPARAM,
    }
    impl Default for TCITEM {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HTREEITEM__ {
        _unused: [u8; 0],
    }
    pub type HTREEITEM = *mut root::HTREEITEM__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct TVITEM {
        pub mask: root::UINT,
        pub hItem: root::HTREEITEM,
        pub state: root::UINT,
        pub stateMask: root::UINT,
        pub pszText: *mut ::std::os::raw::c_char,
        pub cchTextMax: ::std::os::raw::c_int,
        pub iImage: ::std::os::raw::c_int,
        pub iSelectedImage: ::std::os::raw::c_int,
        pub cChildren: ::std::os::raw::c_int,
        pub lParam: root::LPARAM,
    }
    impl Default for TVITEM {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type LPTVITEM = *mut root::TVITEM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct TVINSERTSTRUCT {
        pub hParent: root::HTREEITEM,
        pub hInsertAfter: root::HTREEITEM,
        pub item: root::TVITEM,
    }
    impl Default for TVINSERTSTRUCT {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type TV_INSERTSTRUCT = root::TVINSERTSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct TVHITTESTINFO {
        pub pt: root::POINT,
        pub flags: root::UINT,
        pub hItem: root::HTREEITEM,
    }
    impl Default for TVHITTESTINFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct MENUITEMINFO {
        pub cbSize: ::std::os::raw::c_uint,
        pub fMask: ::std::os::raw::c_uint,
        pub fType: ::std::os::raw::c_uint,
        pub fState: ::std::os::raw::c_uint,
        pub wID: ::std::os::raw::c_uint,
        pub hSubMenu: root::HMENU,
        pub hbmpChecked: root::HICON,
        pub hbmpUnchecked: root::HICON,
        pub dwItemData: root::DWORD_PTR,
        pub dwTypeData: *mut ::std::os::raw::c_char,
        pub cch: ::std::os::raw::c_int,
        pub hbmpItem: root::HBITMAP,
    }
    impl Default for MENUITEMINFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct LOGFONT {
        pub lfHeight: ::std::os::raw::c_int,
        pub lfWidth: ::std::os::raw::c_int,
        pub lfEscapement: ::std::os::raw::c_int,
        pub lfOrientation: ::std::os::raw::c_int,
        pub lfWeight: ::std::os::raw::c_int,
        pub lfItalic: ::std::os::raw::c_char,
        pub lfUnderline: ::std::os::raw::c_char,
        pub lfStrikeOut: ::std::os::raw::c_char,
        pub lfCharSet: ::std::os::raw::c_char,
        pub lfOutPrecision: ::std::os::raw::c_char,
        pub lfClipPrecision: ::std::os::raw::c_char,
        pub lfQuality: ::std::os::raw::c_char,
        pub lfPitchAndFamily: ::std::os::raw::c_char,
        pub lfFaceName: [::std::os::raw::c_char; 32usize],
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct TEXTMETRIC {
        pub tmHeight: root::LONG,
        pub tmAscent: root::LONG,
        pub tmDescent: root::LONG,
        pub tmInternalLeading: root::LONG,
        pub tmAveCharWidth: root::LONG,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct PAINTSTRUCT {
        pub hdc: root::HDC,
        pub fErase: root::BOOL,
        pub rcPaint: root::RECT,
    }
    impl Default for PAINTSTRUCT {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct SCROLLINFO {
        pub cbSize: root::UINT,
        pub fMask: root::UINT,
        pub nMin: ::std::os::raw::c_int,
        pub nMax: ::std::os::raw::c_int,
        pub nPage: root::UINT,
        pub nPos: ::std::os::raw::c_int,
        pub nTrackPos: ::std::os::raw::c_int,
    }
    pub type LPSCROLLINFO = *mut root::SCROLLINFO;
    pub type DLGPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::INT_PTR,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct tagGESTUREINFO {
        pub cbSize: root::UINT,
        pub dwFlags: root::DWORD,
        pub dwID: root::DWORD,
        pub hwndTarget: root::HWND,
        pub ptsLocation: root::POINTS,
        pub dwInstanceID: root::DWORD,
        pub dwSequenceID: root::DWORD,
        pub ullArguments: root::ULONGLONG,
        pub cbExtraArgs: root::UINT,
    }
    impl Default for tagGESTUREINFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type GESTUREINFO = root::tagGESTUREINFO;
    pub type PROPENUMPROCEX = ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: root::HWND,
            lpszString: *const ::std::os::raw::c_char,
            hData: root::HANDLE,
            lParam: root::LPARAM,
        ) -> root::BOOL,
    >;
    pub type SWELL_ControlCreatorProc = ::std::option::Option<
        unsafe extern "C" fn(
            parent: root::HWND,
            cname: *const ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
            classname: *const ::std::os::raw::c_char,
            style: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ) -> root::HWND,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SWELL_DialogResourceIndex {
        _unused: [u8; 0],
    }
    extern "C" {
        pub static mut SWELL_curmodule_dialogresource_head: *mut root::SWELL_DialogResourceIndex;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SWELL_MenuResourceIndex {
        _unused: [u8; 0],
    }
    extern "C" {
        pub static mut SWELL_curmodule_menuresource_head: *mut root::SWELL_MenuResourceIndex;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct _ICONINFO {
        pub fIcon: root::BOOL,
        pub xHotspot: root::DWORD,
        pub yHotspot: root::DWORD,
        pub hbmMask: root::HBITMAP,
        pub hbmColor: root::HBITMAP,
    }
    impl Default for _ICONINFO {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type ICONINFO = root::_ICONINFO;
    pub type HMONITOR = *mut ::std::os::raw::c_void;
    pub type MONITORENUMPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HMONITOR,
            arg2: root::HDC,
            arg3: root::LPRECT,
            arg4: root::LPARAM,
        ) -> root::BOOL,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct reaper_plugin_info_t {
        pub caller_version: ::std::os::raw::c_int,
        pub hwnd_main: root::HWND,
        pub Register: ::std::option::Option<
            unsafe extern "C" fn(
                name: *const ::std::os::raw::c_char,
                infostruct: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        pub GetFunc: ::std::option::Option<
            unsafe extern "C" fn(
                name: *const ::std::os::raw::c_char,
            ) -> *mut ::std::os::raw::c_void,
        >,
    }
    impl Default for reaper_plugin_info_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct ProjectStateContext__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct ProjectStateContext {
        pub vtable_: *const ProjectStateContext__bindgen_vtable,
    }
    impl Default for ProjectStateContext {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[doc = " MIDI event definition and abstract list"]
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct MIDI_event_t {
        pub frame_offset: ::std::os::raw::c_int,
        pub size: ::std::os::raw::c_int,
        pub midi_message: [::std::os::raw::c_uchar; 4usize],
    }
    pub const MIDI_event_t_CC_ALL_SOUND_OFF: root::MIDI_event_t__bindgen_ty_1 = 120;
    pub const MIDI_event_t_CC_ALL_NOTES_OFF: root::MIDI_event_t__bindgen_ty_1 = 123;
    pub const MIDI_event_t_CC_EOF_INDICATOR: root::MIDI_event_t__bindgen_ty_1 = 123;
    pub type MIDI_event_t__bindgen_ty_1 = u32;
    #[repr(C)]
    pub struct MIDI_eventlist__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct MIDI_eventlist {
        pub vtable_: *const MIDI_eventlist__bindgen_vtable,
    }
    impl Default for MIDI_eventlist {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[doc = " PCM source API"]
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq)]
    pub struct _PCM_source_transfer_t {
        pub time_s: f64,
        pub samplerate: f64,
        pub nch: ::std::os::raw::c_int,
        pub length: ::std::os::raw::c_int,
        pub samples: *mut root::ReaSample,
        pub samples_out: ::std::os::raw::c_int,
        pub midi_events: *mut root::MIDI_eventlist,
        pub approximate_playback_latency: f64,
        pub absolute_time_s: f64,
        pub force_bpm: f64,
    }
    impl Default for _PCM_source_transfer_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[doc = " PCM source API"]
    pub type PCM_source_transfer_t = root::_PCM_source_transfer_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq)]
    pub struct _PCM_source_peaktransfer_t {
        pub start_time: f64,
        pub peakrate: f64,
        pub numpeak_points: ::std::os::raw::c_int,
        pub nchpeaks: ::std::os::raw::c_int,
        pub peaks: *mut root::ReaSample,
        pub peaks_out: ::std::os::raw::c_int,
        pub output_mode: ::std::os::raw::c_int,
        pub absolute_time_s: f64,
        pub peaks_minvals: *mut root::ReaSample,
        pub peaks_minvals_used: ::std::os::raw::c_int,
        pub samplerate: f64,
        pub extra_requested_data_type: ::std::os::raw::c_int,
        pub extra_requested_data_out: ::std::os::raw::c_int,
        pub extra_requested_data: *mut ::std::os::raw::c_void,
        pub __peakgetter: *mut root::REAPER_PeakGet_Interface,
        pub exp: [*mut ::std::os::raw::c_int; 27usize],
    }
    pub const _PCM_source_peaktransfer_t_PEAKTRANSFER_PEAKS_MODE:
        root::_PCM_source_peaktransfer_t__bindgen_ty_1 = 0;
    pub const _PCM_source_peaktransfer_t_PEAKTRANSFER_WAVEFORM_MODE:
        root::_PCM_source_peaktransfer_t__bindgen_ty_1 = 1;
    pub const _PCM_source_peaktransfer_t_PEAKTRANSFER_MIDI_NOTE_MODE:
        root::_PCM_source_peaktransfer_t__bindgen_ty_1 = 2;
    pub const _PCM_source_peaktransfer_t_PEAKTRANSFER_MIDI_DRUM_MODE:
        root::_PCM_source_peaktransfer_t__bindgen_ty_1 = 3;
    pub const _PCM_source_peaktransfer_t_PEAKTRANSFER_MIDI_DRUM_TRIANGLE_MODE:
        root::_PCM_source_peaktransfer_t__bindgen_ty_1 = 4;
    pub type _PCM_source_peaktransfer_t__bindgen_ty_1 = u32;
    pub const _PCM_source_peaktransfer_t_SPECTROGRAM1_BLOCKSIZE_BYTES:
        root::_PCM_source_peaktransfer_t__bindgen_ty_2 = 192;
    pub const _PCM_source_peaktransfer_t_SPECTRAL1_BYTES:
        root::_PCM_source_peaktransfer_t__bindgen_ty_2 = 4;
    pub const _PCM_source_peaktransfer_t_MIDITEXT_BYTES:
        root::_PCM_source_peaktransfer_t__bindgen_ty_2 = 1;
    pub const _PCM_source_peaktransfer_t_LOUDNESS_DEPRECATED_BYTES:
        root::_PCM_source_peaktransfer_t__bindgen_ty_2 = 4;
    pub const _PCM_source_peaktransfer_t_LOUDNESS_RAW_BYTES:
        root::_PCM_source_peaktransfer_t__bindgen_ty_2 = 8;
    pub type _PCM_source_peaktransfer_t__bindgen_ty_2 = u32;
    impl Default for _PCM_source_peaktransfer_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type PCM_source_peaktransfer_t = root::_PCM_source_peaktransfer_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq)]
    pub struct _REAPER_midi_realtime_write_struct_t {
        pub global_time: f64,
        pub global_item_time: f64,
        pub srate: f64,
        pub length: ::std::os::raw::c_int,
        pub overwritemode: ::std::os::raw::c_int,
        pub events: *mut root::MIDI_eventlist,
        pub item_playrate: f64,
        pub latency: f64,
        pub overwrite_actives: *mut ::std::os::raw::c_uint,
        pub do_not_quantize_past_sec: f64,
    }
    impl Default for _REAPER_midi_realtime_write_struct_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type midi_realtime_write_struct_t = root::_REAPER_midi_realtime_write_struct_t;
    #[repr(C)]
    pub struct PCM_source__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct PCM_source {
        pub vtable_: *const PCM_source__bindgen_vtable,
    }
    impl Default for PCM_source {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct ISimpleMediaDecoder__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct ISimpleMediaDecoder {
        pub vtable_: *const ISimpleMediaDecoder__bindgen_vtable,
    }
    impl Default for ISimpleMediaDecoder {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[doc = " PCM sink API"]
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, PartialEq)]
    pub struct _REAPER_midi_quantize_mode_t {
        pub doquant: bool,
        pub movemode: ::std::os::raw::c_char,
        pub sizemode: ::std::os::raw::c_char,
        pub quantstrength: ::std::os::raw::c_char,
        pub quantamt: f64,
        pub swingamt: ::std::os::raw::c_char,
        pub range_min: ::std::os::raw::c_char,
        pub range_max: ::std::os::raw::c_char,
    }
    #[doc = " PCM sink API"]
    pub type midi_quantize_mode_t = root::_REAPER_midi_quantize_mode_t;
    #[repr(C)]
    pub struct PCM_sink__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, PartialEq)]
    pub struct PCM_sink {
        pub vtable_: *const PCM_sink__bindgen_vtable,
        pub m_st: f64,
    }
    impl Default for PCM_sink {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct REAPER_Resample_Interface__bindgen_vtable(::std::os::raw::c_void);
    #[doc = " Resampler API (plug-ins can use this for SRC)"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " See API functions Resampler_Create() and Resample_EnumModes()"]
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct REAPER_Resample_Interface {
        pub vtable_: *const REAPER_Resample_Interface__bindgen_vtable,
    }
    impl Default for REAPER_Resample_Interface {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct IReaperPitchShift__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct IReaperPitchShift {
        pub vtable_: *const IReaperPitchShift__bindgen_vtable,
    }
    impl Default for IReaperPitchShift {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct REAPER_PeakGet_Interface__bindgen_vtable(::std::os::raw::c_void);
    #[doc = " Peak getting/building API"]
    #[doc = ""]
    #[doc = " These are really only needed if you implement a PCM_source or PCM_sink."]
    #[doc = ""]
    #[doc = " See functions PeakGet_Create(), PeakBuild_Create(), GetPeakFileName(), ClearPeakCache()"]
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct REAPER_PeakGet_Interface {
        pub vtable_: *const REAPER_PeakGet_Interface__bindgen_vtable,
    }
    impl Default for REAPER_PeakGet_Interface {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct REAPER_PeakBuild_Interface__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct REAPER_PeakBuild_Interface {
        pub vtable_: *const REAPER_PeakBuild_Interface__bindgen_vtable,
    }
    impl Default for REAPER_PeakBuild_Interface {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct accelerator_register_t {
        pub translateAccel: ::std::option::Option<
            unsafe extern "C" fn(
                msg: *mut root::MSG,
                ctx: *mut root::accelerator_register_t,
            ) -> ::std::os::raw::c_int,
        >,
        pub isLocal: bool,
        pub user: *mut ::std::os::raw::c_void,
    }
    impl Default for accelerator_register_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct _REAPER_custom_action_register_t {
        pub uniqueSectionId: ::std::os::raw::c_int,
        pub idStr: *const ::std::os::raw::c_char,
        pub name: *const ::std::os::raw::c_char,
        pub extra: *mut ::std::os::raw::c_void,
    }
    impl Default for _REAPER_custom_action_register_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type custom_action_register_t = root::_REAPER_custom_action_register_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct _REAPER_gaccel_register_t {
        pub accel: root::ACCEL,
        pub desc: *const ::std::os::raw::c_char,
    }
    impl Default for _REAPER_gaccel_register_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type gaccel_register_t = root::_REAPER_gaccel_register_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct audio_hook_register_t {
        pub OnAudioBuffer: ::std::option::Option<
            unsafe extern "C" fn(
                isPost: bool,
                len: ::std::os::raw::c_int,
                srate: f64,
                reg: *mut root::audio_hook_register_t,
            ),
        >,
        pub userdata1: *mut ::std::os::raw::c_void,
        pub userdata2: *mut ::std::os::raw::c_void,
        pub input_nch: ::std::os::raw::c_int,
        pub output_nch: ::std::os::raw::c_int,
        pub GetBuffer: ::std::option::Option<
            unsafe extern "C" fn(
                isOutput: bool,
                idx: ::std::os::raw::c_int,
            ) -> *mut root::ReaSample,
        >,
    }
    impl Default for audio_hook_register_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct _REAPER_KbdCmd {
        pub cmd: root::DWORD,
        pub text: *const ::std::os::raw::c_char,
    }
    impl Default for _REAPER_KbdCmd {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type KbdCmd = root::_REAPER_KbdCmd;
    #[repr(C)]
    #[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct _REAPER_KbdKeyBindingInfo {
        pub key: ::std::os::raw::c_int,
        pub cmd: ::std::os::raw::c_int,
        pub flags: ::std::os::raw::c_int,
    }
    pub type KbdKeyBindingInfo = root::_REAPER_KbdKeyBindingInfo;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct _REAPER_KbdSectionInfo {
        pub uniqueID: ::std::os::raw::c_int,
        pub name: *const ::std::os::raw::c_char,
        pub action_list: *mut root::KbdCmd,
        pub action_list_cnt: ::std::os::raw::c_int,
        pub def_keys: *const root::KbdKeyBindingInfo,
        pub def_keys_cnt: ::std::os::raw::c_int,
        pub onAction: ::std::option::Option<
            unsafe extern "C" fn(
                cmd: ::std::os::raw::c_int,
                val: ::std::os::raw::c_int,
                valhw: ::std::os::raw::c_int,
                relmode: ::std::os::raw::c_int,
                hwnd: root::HWND,
            ) -> bool,
        >,
        pub accels: *mut ::std::os::raw::c_void,
        pub recent_cmds: *mut ::std::os::raw::c_void,
        pub extended_data: [*mut ::std::os::raw::c_void; 32usize],
    }
    impl Default for _REAPER_KbdSectionInfo {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type KbdSectionInfo = root::_REAPER_KbdSectionInfo;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _REAPER_preview_register_t {
        pub mutex: root::pthread_mutex_t,
        pub src: *mut root::PCM_source,
        pub m_out_chan: ::std::os::raw::c_int,
        pub curpos: f64,
        pub loop_: bool,
        pub volume: f64,
        pub peakvol: [f64; 2usize],
        pub preview_track: *mut ::std::os::raw::c_void,
    }
    impl Default for _REAPER_preview_register_t {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub type screensetNewCallbackFunc = ::std::option::Option<
        unsafe extern "C" fn(
            action: ::std::os::raw::c_int,
            id: *const ::std::os::raw::c_char,
            param: *mut ::std::os::raw::c_void,
            actionParm: *mut ::std::os::raw::c_void,
            actionParmSize: ::std::os::raw::c_int,
        ) -> root::LRESULT,
    >;
    #[repr(C)]
    pub struct midi_Output__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct midi_Output {
        pub vtable_: *const midi_Output__bindgen_vtable,
    }
    impl Default for midi_Output {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    pub struct midi_Input__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct midi_Input {
        pub vtable_: *const midi_Input__bindgen_vtable,
    }
    impl Default for midi_Input {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ReaProject {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MediaTrack {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MediaItem {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MediaItem_Take {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TrackEnvelope {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct IReaperControlSurface__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct IReaperControlSurface {
        pub vtable_: *const IReaperControlSurface__bindgen_vtable,
    }
    impl Default for IReaperControlSurface {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub mod reaper_functions {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type LICE_pixel = ::std::os::raw::c_uint;
        pub type LICE_pixel_chan = ::std::os::raw::c_uchar;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LICE_IBitmap {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LICE_IFont {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WDL_VirtualWnd_BGCfg {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AudioAccessor {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct joystick_device {
            _unused: [u8; 0],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11__mergesortE"]
            pub static mut __mergesort: ::std::option::Option<
                unsafe extern "C" fn(
                    base: *mut ::std::os::raw::c_void,
                    nmemb: usize,
                    size: usize,
                    cmpfunc: ::std::option::Option<
                        unsafe extern "C" fn(
                            arg1: *const ::std::os::raw::c_void,
                            arg2: *const ::std::os::raw::c_void,
                        ) -> ::std::os::raw::c_int,
                    >,
                    tmpspace: *mut ::std::os::raw::c_void,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19AddCustomizableMenuE"]
            pub static mut AddCustomizableMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    menuidstr: *const ::std::os::raw::c_char,
                    menuname: *const ::std::os::raw::c_char,
                    kbdsecname: *const ::std::os::raw::c_char,
                    addtomainmenu: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21AddExtensionsMainMenuE"]
            pub static mut AddExtensionsMainMenu:
                ::std::option::Option<unsafe extern "C" fn() -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19AddMediaItemToTrackE"]
            pub static mut AddMediaItemToTrack: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16AddProjectMarkerE"]
            pub static mut AddProjectMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                    wantidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17AddProjectMarker2E"]
            pub static mut AddProjectMarker2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                    wantidx: ::std::os::raw::c_int,
                    color: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18AddRemoveReaScriptE"]
            pub static mut AddRemoveReaScript: ::std::option::Option<
                unsafe extern "C" fn(
                    add: bool,
                    sectionID: ::std::os::raw::c_int,
                    scriptfn: *const ::std::os::raw::c_char,
                    commit: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18AddTakeToMediaItemE"]
            pub static mut AddTakeToMediaItem: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21AddTempoTimeSigMarkerE"]
            pub static mut AddTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    timepos: f64,
                    bpm: f64,
                    timesig_num: ::std::os::raw::c_int,
                    timesig_denom: ::std::os::raw::c_int,
                    lineartempochange: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10adjustZoomE"]
            pub static mut adjustZoom: ::std::option::Option<
                unsafe extern "C" fn(
                    amt: f64,
                    forceset: ::std::os::raw::c_int,
                    doupd: bool,
                    centermode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12AnyTrackSoloE"]
            pub static mut AnyTrackSolo:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9APIExistsE"]
            pub static mut APIExists: ::std::option::Option<
                unsafe extern "C" fn(function_name: *const ::std::os::raw::c_char) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions7APITestE"]
            pub static mut APITest: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10ApplyNudgeE"]
            pub static mut ApplyNudge: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    nudgeflag: ::std::os::raw::c_int,
                    nudgewhat: ::std::os::raw::c_int,
                    nudgeunits: ::std::os::raw::c_int,
                    value: f64,
                    reverse: bool,
                    copies: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10ArmCommandE"]
            pub static mut ArmCommand: ::std::option::Option<
                unsafe extern "C" fn(
                    cmd: ::std::os::raw::c_int,
                    sectionname: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10Audio_InitE"]
            pub static mut Audio_Init: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17Audio_IsPreBufferE"]
            pub static mut Audio_IsPreBuffer:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15Audio_IsRunningE"]
            pub static mut Audio_IsRunning:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10Audio_QuitE"]
            pub static mut Audio_Quit: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21Audio_RegHardwareHookE"]
            pub static mut Audio_RegHardwareHook: ::std::option::Option<
                unsafe extern "C" fn(
                    isAdd: bool,
                    reg: *mut root::audio_hook_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25AudioAccessorStateChangedE"]
            pub static mut AudioAccessorStateChanged: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19AudioAccessorUpdateE"]
            pub static mut AudioAccessorUpdate: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26AudioAccessorValidateStateE"]
            pub static mut AudioAccessorValidateState: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17BypassFxAllTracksE"]
            pub static mut BypassFxAllTracks:
                ::std::option::Option<unsafe extern "C" fn(bypass: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CalcMediaSrcLoudnessE"]
            pub static mut CalcMediaSrcLoudness: ::std::option::Option<
                unsafe extern "C" fn(mediasource: *mut root::PCM_source) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CalculateNormalizationE"]
            pub static mut CalculateNormalization: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    normalizeTo: ::std::os::raw::c_int,
                    normalizeTarget: f64,
                    normalizeStart: f64,
                    normalizeEnd: f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CalculatePeaksE"]
            pub static mut CalculatePeaks: ::std::option::Option<
                unsafe extern "C" fn(
                    srcBlock: *mut root::PCM_source_transfer_t,
                    pksBlock: *mut root::PCM_source_peaktransfer_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25CalculatePeaksFloatSrcPtrE"]
            pub static mut CalculatePeaksFloatSrcPtr: ::std::option::Option<
                unsafe extern "C" fn(
                    srcBlock: *mut root::PCM_source_transfer_t,
                    pksBlock: *mut root::PCM_source_peaktransfer_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16ClearAllRecArmedE"]
            pub static mut ClearAllRecArmed: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12ClearConsoleE"]
            pub static mut ClearConsole: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ClearPeakCacheE"]
            pub static mut ClearPeakCache: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15ColorFromNativeE"]
            pub static mut ColorFromNative: ::std::option::Option<
                unsafe extern "C" fn(
                    col: ::std::os::raw::c_int,
                    rOut: *mut ::std::os::raw::c_int,
                    gOut: *mut ::std::os::raw::c_int,
                    bOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13ColorToNativeE"]
            pub static mut ColorToNative: ::std::option::Option<
                unsafe extern "C" fn(
                    r: ::std::os::raw::c_int,
                    g: ::std::os::raw::c_int,
                    b: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CountActionShortcutsE"]
            pub static mut CountActionShortcuts: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    cmdID: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CountAutomationItemsE"]
            pub static mut CountAutomationItems: ::std::option::Option<
                unsafe extern "C" fn(env: *mut root::TrackEnvelope) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CountEnvelopePointsE"]
            pub static mut CountEnvelopePoints: ::std::option::Option<
                unsafe extern "C" fn(envelope: *mut root::TrackEnvelope) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CountEnvelopePointsExE"]
            pub static mut CountEnvelopePointsEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CountMediaItemsE"]
            pub static mut CountMediaItems: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CountProjectMarkersE"]
            pub static mut CountProjectMarkers: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    num_markersOut: *mut ::std::os::raw::c_int,
                    num_regionsOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23CountSelectedMediaItemsE"]
            pub static mut CountSelectedMediaItems: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CountSelectedTracksE"]
            pub static mut CountSelectedTracks: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CountSelectedTracks2E"]
            pub static mut CountSelectedTracks2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    wantmaster: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18CountTakeEnvelopesE"]
            pub static mut CountTakeEnvelopes: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10CountTakesE"]
            pub static mut CountTakes: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CountTCPFXParmsE"]
            pub static mut CountTCPFXParms: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CountTempoTimeSigMarkersE"]
            pub static mut CountTempoTimeSigMarkers: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CountTrackEnvelopesE"]
            pub static mut CountTrackEnvelopes: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CountTrackMediaItemsE"]
            pub static mut CountTrackMediaItems: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11CountTracksE"]
            pub static mut CountTracks: ::std::option::Option<
                unsafe extern "C" fn(projOptional: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CreateLocalOscHandlerE"]
            pub static mut CreateLocalOscHandler: ::std::option::Option<
                unsafe extern "C" fn(
                    obj: *mut ::std::os::raw::c_void,
                    callback: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CreateMIDIInputE"]
            pub static mut CreateMIDIInput: ::std::option::Option<
                unsafe extern "C" fn(dev: ::std::os::raw::c_int) -> *mut root::midi_Input,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16CreateMIDIOutputE"]
            pub static mut CreateMIDIOutput: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: ::std::os::raw::c_int,
                    streamMode: bool,
                    msoffset100: *mut ::std::os::raw::c_int,
                ) -> *mut root::midi_Output,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23CreateNewMIDIItemInProjE"]
            pub static mut CreateNewMIDIItemInProj: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    starttime: f64,
                    endtime: f64,
                    qnInOptional: *const bool,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23CreateTakeAudioAccessorE"]
            pub static mut CreateTakeAudioAccessor: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                ) -> *mut root::reaper_functions::AudioAccessor,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CreateTrackAudioAccessorE"]
            pub static mut CreateTrackAudioAccessor: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                ) -> *mut root::reaper_functions::AudioAccessor,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CreateTrackSendE"]
            pub static mut CreateTrackSend: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    desttrInOptional: *mut root::MediaTrack,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CSurf_FlushUndoE"]
            pub static mut CSurf_FlushUndo:
                ::std::option::Option<unsafe extern "C" fn(force: bool)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_GetTouchStateE"]
            pub static mut CSurf_GetTouchState: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    isPan: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11CSurf_GoEndE"]
            pub static mut CSurf_GoEnd: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13CSurf_GoStartE"]
            pub static mut CSurf_GoStart: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CSurf_NumTracksE"]
            pub static mut CSurf_NumTracks:
                ::std::option::Option<unsafe extern "C" fn(mcpView: bool) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13CSurf_OnArrowE"]
            pub static mut CSurf_OnArrow: ::std::option::Option<
                unsafe extern "C" fn(whichdir: ::std::os::raw::c_int, wantzoom: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11CSurf_OnFwdE"]
            pub static mut CSurf_OnFwd:
                ::std::option::Option<unsafe extern "C" fn(seekplay: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16CSurf_OnFXChangeE"]
            pub static mut CSurf_OnFXChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    en: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26CSurf_OnInputMonitorChangeE"]
            pub static mut CSurf_OnInputMonitorChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    monitor: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28CSurf_OnInputMonitorChangeExE"]
            pub static mut CSurf_OnInputMonitorChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    monitor: ::std::os::raw::c_int,
                    allowgang: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18CSurf_OnMuteChangeE"]
            pub static mut CSurf_OnMuteChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    mute: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_OnMuteChangeExE"]
            pub static mut CSurf_OnMuteChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    mute: ::std::os::raw::c_int,
                    allowgang: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25CSurf_OnOscControlMessageE"]
            pub static mut CSurf_OnOscControlMessage: ::std::option::Option<
                unsafe extern "C" fn(msg: *const ::std::os::raw::c_char, arg: *const f32),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26CSurf_OnOscControlMessage2E"]
            pub static mut CSurf_OnOscControlMessage2: ::std::option::Option<
                unsafe extern "C" fn(
                    msg: *const ::std::os::raw::c_char,
                    arg: *const f32,
                    argstr: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17CSurf_OnPanChangeE"]
            pub static mut CSurf_OnPanChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    pan: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_OnPanChangeExE"]
            pub static mut CSurf_OnPanChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    pan: f64,
                    relative: bool,
                    allowGang: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13CSurf_OnPauseE"]
            pub static mut CSurf_OnPause: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12CSurf_OnPlayE"]
            pub static mut CSurf_OnPlay: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnPlayRateChangeE"]
            pub static mut CSurf_OnPlayRateChange:
                ::std::option::Option<unsafe extern "C" fn(playrate: f64)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_OnRecArmChangeE"]
            pub static mut CSurf_OnRecArmChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recarm: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnRecArmChangeExE"]
            pub static mut CSurf_OnRecArmChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recarm: ::std::os::raw::c_int,
                    allowgang: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CSurf_OnRecordE"]
            pub static mut CSurf_OnRecord: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CSurf_OnRecvPanChangeE"]
            pub static mut CSurf_OnRecvPanChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    pan: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CSurf_OnRecvVolumeChangeE"]
            pub static mut CSurf_OnRecvVolumeChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    volume: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11CSurf_OnRewE"]
            pub static mut CSurf_OnRew:
                ::std::option::Option<unsafe extern "C" fn(seekplay: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CSurf_OnRewFwdE"]
            pub static mut CSurf_OnRewFwd: ::std::option::Option<
                unsafe extern "C" fn(seekplay: ::std::os::raw::c_int, dir: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CSurf_OnScrollE"]
            pub static mut CSurf_OnScroll: ::std::option::Option<
                unsafe extern "C" fn(xdir: ::std::os::raw::c_int, ydir: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnSelectedChangeE"]
            pub static mut CSurf_OnSelectedChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    selected: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CSurf_OnSendPanChangeE"]
            pub static mut CSurf_OnSendPanChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    pan: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CSurf_OnSendVolumeChangeE"]
            pub static mut CSurf_OnSendVolumeChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    volume: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18CSurf_OnSoloChangeE"]
            pub static mut CSurf_OnSoloChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    solo: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_OnSoloChangeExE"]
            pub static mut CSurf_OnSoloChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    solo: ::std::os::raw::c_int,
                    allowgang: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12CSurf_OnStopE"]
            pub static mut CSurf_OnStop: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_OnTempoChangeE"]
            pub static mut CSurf_OnTempoChange:
                ::std::option::Option<unsafe extern "C" fn(bpm: f64)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnTrackSelectionE"]
            pub static mut CSurf_OnTrackSelection:
                ::std::option::Option<unsafe extern "C" fn(trackid: *mut root::MediaTrack)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_OnVolumeChangeE"]
            pub static mut CSurf_OnVolumeChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    volume: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnVolumeChangeExE"]
            pub static mut CSurf_OnVolumeChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    volume: f64,
                    relative: bool,
                    allowGang: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_OnWidthChangeE"]
            pub static mut CSurf_OnWidthChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    width: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CSurf_OnWidthChangeExE"]
            pub static mut CSurf_OnWidthChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    width: f64,
                    relative: bool,
                    allowGang: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12CSurf_OnZoomE"]
            pub static mut CSurf_OnZoom: ::std::option::Option<
                unsafe extern "C" fn(xdir: ::std::os::raw::c_int, ydir: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions32CSurf_ResetAllCachedVolPanStatesE"]
            pub static mut CSurf_ResetAllCachedVolPanStates:
                ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CSurf_ScrubAmtE"]
            pub static mut CSurf_ScrubAmt: ::std::option::Option<unsafe extern "C" fn(amt: f64)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17CSurf_SetAutoModeE"]
            pub static mut CSurf_SetAutoMode: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18CSurf_SetPlayStateE"]
            pub static mut CSurf_SetPlayState: ::std::option::Option<
                unsafe extern "C" fn(
                    play: bool,
                    pause: bool,
                    rec: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_SetRepeatStateE"]
            pub static mut CSurf_SetRepeatState: ::std::option::Option<
                unsafe extern "C" fn(rep: bool, ignoresurf: *mut root::IReaperControlSurface),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_SetSurfaceMuteE"]
            pub static mut CSurf_SetSurfaceMute: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    mute: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_SetSurfacePanE"]
            pub static mut CSurf_SetSurfacePan: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    pan: f64,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_SetSurfaceRecArmE"]
            pub static mut CSurf_SetSurfaceRecArm: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recarm: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CSurf_SetSurfaceSelectedE"]
            pub static mut CSurf_SetSurfaceSelected: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    selected: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_SetSurfaceSoloE"]
            pub static mut CSurf_SetSurfaceSolo: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    solo: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_SetSurfaceVolumeE"]
            pub static mut CSurf_SetSurfaceVolume: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    volume: f64,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CSurf_SetTrackListChangeE"]
            pub static mut CSurf_SetTrackListChange: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17CSurf_TrackFromIDE"]
            pub static mut CSurf_TrackFromID: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    mcpView: bool,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CSurf_TrackToIDE"]
            pub static mut CSurf_TrackToID: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    mcpView: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9DB2SLIDERE"]
            pub static mut DB2SLIDER: ::std::option::Option<unsafe extern "C" fn(x: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20DeleteActionShortcutE"]
            pub static mut DeleteActionShortcut: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    cmdID: ::std::os::raw::c_int,
                    shortcutidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21DeleteEnvelopePointExE"]
            pub static mut DeleteEnvelopePointEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    ptidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24DeleteEnvelopePointRangeE"]
            pub static mut DeleteEnvelopePointRange: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    time_start: f64,
                    time_end: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26DeleteEnvelopePointRangeExE"]
            pub static mut DeleteEnvelopePointRangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    time_start: f64,
                    time_end: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14DeleteExtStateE"]
            pub static mut DeleteExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                    persist: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19DeleteProjectMarkerE"]
            pub static mut DeleteProjectMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26DeleteProjectMarkerByIndexE"]
            pub static mut DeleteProjectMarkerByIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16DeleteTakeMarkerE"]
            pub static mut DeleteTakeMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24DeleteTakeStretchMarkersE"]
            pub static mut DeleteTakeStretchMarkers: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    countInOptional: *const ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24DeleteTempoTimeSigMarkerE"]
            pub static mut DeleteTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    markerindex: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11DeleteTrackE"]
            pub static mut DeleteTrack:
                ::std::option::Option<unsafe extern "C" fn(tr: *mut root::MediaTrack)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20DeleteTrackMediaItemE"]
            pub static mut DeleteTrackMediaItem: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack, it: *mut root::MediaItem) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20DestroyAudioAccessorE"]
            pub static mut DestroyAudioAccessor: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22DestroyLocalOscHandlerE"]
            pub static mut DestroyLocalOscHandler: ::std::option::Option<
                unsafe extern "C" fn(local_osc_handler: *mut ::std::os::raw::c_void),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22DoActionShortcutDialogE"]
            pub static mut DoActionShortcutDialog: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    section: *mut root::KbdSectionInfo,
                    cmdID: ::std::os::raw::c_int,
                    shortcutidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17Dock_UpdateDockIDE"]
            pub static mut Dock_UpdateDockID: ::std::option::Option<
                unsafe extern "C" fn(
                    ident_str: *const ::std::os::raw::c_char,
                    whichDock: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15DockGetPositionE"]
            pub static mut DockGetPosition: ::std::option::Option<
                unsafe extern "C" fn(whichDock: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17DockIsChildOfDockE"]
            pub static mut DockIsChildOfDock: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    isFloatingDockerOut: *mut bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18DockWindowActivateE"]
            pub static mut DockWindowActivate:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13DockWindowAddE"]
            pub static mut DockWindowAdd: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    name: *const ::std::os::raw::c_char,
                    pos: ::std::os::raw::c_int,
                    allowShow: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15DockWindowAddExE"]
            pub static mut DockWindowAddEx: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    name: *const ::std::os::raw::c_char,
                    identstr: *const ::std::os::raw::c_char,
                    allowShow: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17DockWindowRefreshE"]
            pub static mut DockWindowRefresh: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24DockWindowRefreshForHWNDE"]
            pub static mut DockWindowRefreshForHWND:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16DockWindowRemoveE"]
            pub static mut DockWindowRemove:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25DuplicateCustomizableMenuE"]
            pub static mut DuplicateCustomizableMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    srcmenu: *mut ::std::os::raw::c_void,
                    destmenu: *mut ::std::os::raw::c_void,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22EditTempoTimeSigMarkerE"]
            pub static mut EditTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    markerindex: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28EnsureNotCompletelyOffscreenE"]
            pub static mut EnsureNotCompletelyOffscreen:
                ::std::option::Option<unsafe extern "C" fn(rInOut: *mut root::RECT)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14EnumerateFilesE"]
            pub static mut EnumerateFiles: ::std::option::Option<
                unsafe extern "C" fn(
                    path: *const ::std::os::raw::c_char,
                    fileindex: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23EnumerateSubdirectoriesE"]
            pub static mut EnumerateSubdirectories: ::std::option::Option<
                unsafe extern "C" fn(
                    path: *const ::std::os::raw::c_char,
                    subdirindex: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15EnumInstalledFXE"]
            pub static mut EnumInstalledFX: ::std::option::Option<
                unsafe extern "C" fn(
                    index: ::std::os::raw::c_int,
                    nameOut: *mut *const ::std::os::raw::c_char,
                    identOut: *mut *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19EnumPitchShiftModesE"]
            pub static mut EnumPitchShiftModes: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    strOut: *mut *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22EnumPitchShiftSubModesE"]
            pub static mut EnumPitchShiftSubModes: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    submode: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18EnumProjectMarkersE"]
            pub static mut EnumProjectMarkers: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    isrgnOut: *mut bool,
                    posOut: *mut f64,
                    rgnendOut: *mut f64,
                    nameOut: *mut *const ::std::os::raw::c_char,
                    markrgnindexnumberOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19EnumProjectMarkers2E"]
            pub static mut EnumProjectMarkers2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    idx: ::std::os::raw::c_int,
                    isrgnOut: *mut bool,
                    posOut: *mut f64,
                    rgnendOut: *mut f64,
                    nameOut: *mut *const ::std::os::raw::c_char,
                    markrgnindexnumberOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19EnumProjectMarkers3E"]
            pub static mut EnumProjectMarkers3: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    idx: ::std::os::raw::c_int,
                    isrgnOut: *mut bool,
                    posOut: *mut f64,
                    rgnendOut: *mut f64,
                    nameOut: *mut *const ::std::os::raw::c_char,
                    markrgnindexnumberOut: *mut ::std::os::raw::c_int,
                    colorOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12EnumProjectsE"]
            pub static mut EnumProjects: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    projfnOutOptional: *mut ::std::os::raw::c_char,
                    projfnOutOptional_sz: ::std::os::raw::c_int,
                ) -> *mut root::ReaProject,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16EnumProjExtStateE"]
            pub static mut EnumProjExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    extname: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    keyOutOptional: *mut ::std::os::raw::c_char,
                    keyOutOptional_sz: ::std::os::raw::c_int,
                    valOutOptional: *mut ::std::os::raw::c_char,
                    valOutOptional_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22EnumRegionRenderMatrixE"]
            pub static mut EnumRegionRenderMatrix: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    regionindex: ::std::os::raw::c_int,
                    rendertrack: ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25EnumTrackMIDIProgramNamesE"]
            pub static mut EnumTrackMIDIProgramNames: ::std::option::Option<
                unsafe extern "C" fn(
                    track: ::std::os::raw::c_int,
                    programNumber: ::std::os::raw::c_int,
                    programName: *mut ::std::os::raw::c_char,
                    programName_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27EnumTrackMIDIProgramNamesExE"]
            pub static mut EnumTrackMIDIProgramNamesEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    programNumber: ::std::os::raw::c_int,
                    programName: *mut ::std::os::raw::c_char,
                    programName_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17Envelope_EvaluateE"]
            pub static mut Envelope_Evaluate: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    time: f64,
                    samplerate: f64,
                    samplesRequested: ::std::os::raw::c_int,
                    valueOut: *mut f64,
                    dVdSOut: *mut f64,
                    ddVdSOut: *mut f64,
                    dddVdSOut: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20Envelope_FormatValueE"]
            pub static mut Envelope_FormatValue: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    value: f64,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22Envelope_GetParentTakeE"]
            pub static mut Envelope_GetParentTake: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    indexOut: *mut ::std::os::raw::c_int,
                    index2Out: *mut ::std::os::raw::c_int,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23Envelope_GetParentTrackE"]
            pub static mut Envelope_GetParentTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    indexOut: *mut ::std::os::raw::c_int,
                    index2Out: *mut ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19Envelope_SortPointsE"]
            pub static mut Envelope_SortPoints: ::std::option::Option<
                unsafe extern "C" fn(envelope: *mut root::TrackEnvelope) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21Envelope_SortPointsExE"]
            pub static mut Envelope_SortPointsEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11ExecProcessE"]
            pub static mut ExecProcess: ::std::option::Option<
                unsafe extern "C" fn(
                    cmdline: *const ::std::os::raw::c_char,
                    timeoutmsec: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11file_existsE"]
            pub static mut file_exists: ::std::option::Option<
                unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22FindTempoTimeSigMarkerE"]
            pub static mut FindTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    time: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14format_timestrE"]
            pub static mut format_timestr: ::std::option::Option<
                unsafe extern "C" fn(
                    tpos: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18format_timestr_lenE"]
            pub static mut format_timestr_len: ::std::option::Option<
                unsafe extern "C" fn(
                    tpos: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                    offset: f64,
                    modeoverride: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18format_timestr_posE"]
            pub static mut format_timestr_pos: ::std::option::Option<
                unsafe extern "C" fn(
                    tpos: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                    modeoverride: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11FreeHeapPtrE"]
            pub static mut FreeHeapPtr:
                ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions7genGuidE"]
            pub static mut genGuid: ::std::option::Option<unsafe extern "C" fn(g: *mut root::GUID)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14get_config_varE"]
            pub static mut get_config_var: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    szOut: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21get_config_var_stringE"]
            pub static mut get_config_var_string: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12get_ini_fileE"]
            pub static mut get_ini_file:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19get_midi_config_varE"]
            pub static mut get_midi_config_var: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    szOut: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetActionShortcutDescE"]
            pub static mut GetActionShortcutDesc: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    cmdID: ::std::os::raw::c_int,
                    shortcutidx: ::std::os::raw::c_int,
                    descOut: *mut ::std::os::raw::c_char,
                    descOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetActiveTakeE"]
            pub static mut GetActiveTake: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetAllProjectPlayStatesE"]
            pub static mut GetAllProjectPlayStates: ::std::option::Option<
                unsafe extern "C" fn(ignoreProject: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetAppVersionE"]
            pub static mut GetAppVersion:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetArmedCommandE"]
            pub static mut GetArmedCommand: ::std::option::Option<
                unsafe extern "C" fn(
                    secOut: *mut ::std::os::raw::c_char,
                    secOut_sz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetAudioAccessorEndTimeE"]
            pub static mut GetAudioAccessorEndTime: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetAudioAccessorHashE"]
            pub static mut GetAudioAccessorHash: ::std::option::Option<
                unsafe extern "C" fn(
                    accessor: *mut root::reaper_functions::AudioAccessor,
                    hashNeed128: *mut ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetAudioAccessorSamplesE"]
            pub static mut GetAudioAccessorSamples: ::std::option::Option<
                unsafe extern "C" fn(
                    accessor: *mut root::reaper_functions::AudioAccessor,
                    samplerate: ::std::os::raw::c_int,
                    numchannels: ::std::os::raw::c_int,
                    starttime_sec: f64,
                    numsamplesperchannel: ::std::os::raw::c_int,
                    samplebuffer: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetAudioAccessorStartTimeE"]
            pub static mut GetAudioAccessorStartTime: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetAudioDeviceInfoE"]
            pub static mut GetAudioDeviceInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    attribute: *const ::std::os::raw::c_char,
                    descOut: *mut ::std::os::raw::c_char,
                    descOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetColorThemeE"]
            pub static mut GetColorTheme: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    defval: ::std::os::raw::c_int,
                ) -> root::INT_PTR,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetColorThemeStructE"]
            pub static mut GetColorThemeStruct: ::std::option::Option<
                unsafe extern "C" fn(
                    szOut: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetConfigWantsDockE"]
            pub static mut GetConfigWantsDock: ::std::option::Option<
                unsafe extern "C" fn(
                    ident_str: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetContextMenuE"]
            pub static mut GetContextMenu: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int) -> root::HMENU,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetCurrentProjectInLoadSaveE"]
            pub static mut GetCurrentProjectInLoadSave:
                ::std::option::Option<unsafe extern "C" fn() -> *mut root::ReaProject>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetCursorContextE"]
            pub static mut GetCursorContext:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetCursorContext2E"]
            pub static mut GetCursorContext2: ::std::option::Option<
                unsafe extern "C" fn(want_last_valid: bool) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetCursorPositionE"]
            pub static mut GetCursorPosition: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetCursorPositionExE"]
            pub static mut GetCursorPositionEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetDisplayedMediaItemColorE"]
            pub static mut GetDisplayedMediaItemColor: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetDisplayedMediaItemColor2E"]
            pub static mut GetDisplayedMediaItemColor2: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    take: *mut root::MediaItem_Take,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetEnvelopeInfo_ValueE"]
            pub static mut GetEnvelopeInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetEnvelopeNameE"]
            pub static mut GetEnvelopeName: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetEnvelopePointE"]
            pub static mut GetEnvelopePoint: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    ptidx: ::std::os::raw::c_int,
                    timeOut: *mut f64,
                    valueOut: *mut f64,
                    shapeOut: *mut ::std::os::raw::c_int,
                    tensionOut: *mut f64,
                    selectedOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetEnvelopePointByTimeE"]
            pub static mut GetEnvelopePointByTime: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    time: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetEnvelopePointByTimeExE"]
            pub static mut GetEnvelopePointByTimeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    time: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetEnvelopePointExE"]
            pub static mut GetEnvelopePointEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    ptidx: ::std::os::raw::c_int,
                    timeOut: *mut f64,
                    valueOut: *mut f64,
                    shapeOut: *mut ::std::os::raw::c_int,
                    tensionOut: *mut f64,
                    selectedOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetEnvelopeScalingModeE"]
            pub static mut GetEnvelopeScalingMode: ::std::option::Option<
                unsafe extern "C" fn(env: *mut root::TrackEnvelope) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetEnvelopeStateChunkE"]
            pub static mut GetEnvelopeStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    strNeedBig: *mut ::std::os::raw::c_char,
                    strNeedBig_sz: ::std::os::raw::c_int,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetEnvelopeUIStateE"]
            pub static mut GetEnvelopeUIState: ::std::option::Option<
                unsafe extern "C" fn(env: *mut root::TrackEnvelope) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10GetExePathE"]
            pub static mut GetExePath:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11GetExtStateE"]
            pub static mut GetExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetFocusedFXE"]
            pub static mut GetFocusedFX: ::std::option::Option<
                unsafe extern "C" fn(
                    tracknumberOut: *mut ::std::os::raw::c_int,
                    itemnumberOut: *mut ::std::os::raw::c_int,
                    fxnumberOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetFocusedFX2E"]
            pub static mut GetFocusedFX2: ::std::option::Option<
                unsafe extern "C" fn(
                    tracknumberOut: *mut ::std::os::raw::c_int,
                    itemnumberOut: *mut ::std::os::raw::c_int,
                    fxnumberOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29GetFreeDiskSpaceForRecordPathE"]
            pub static mut GetFreeDiskSpaceForRecordPath: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    pathidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetFXEnvelopeE"]
            pub static mut GetFXEnvelope: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxindex: ::std::os::raw::c_int,
                    parameterindex: ::std::os::raw::c_int,
                    create: bool,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetGlobalAutomationOverrideE"]
            pub static mut GetGlobalAutomationOverride:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetHZoomLevelE"]
            pub static mut GetHZoomLevel: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetIconThemePointerE"]
            pub static mut GetIconThemePointer: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetIconThemePointerForDPIE"]
            pub static mut GetIconThemePointerForDPI: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    dpisc: ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetIconThemeStructE"]
            pub static mut GetIconThemeStruct: ::std::option::Option<
                unsafe extern "C" fn(
                    szOut: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetInputActivityLevelE"]
            pub static mut GetInputActivityLevel:
                ::std::option::Option<unsafe extern "C" fn(input_id: ::std::os::raw::c_int) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetInputChannelNameE"]
            pub static mut GetInputChannelName: ::std::option::Option<
                unsafe extern "C" fn(
                    channelIndex: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetInputOutputLatencyE"]
            pub static mut GetInputOutputLatency: ::std::option::Option<
                unsafe extern "C" fn(
                    inputlatencyOut: *mut ::std::os::raw::c_int,
                    outputLatencyOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetItemEditingTime2E"]
            pub static mut GetItemEditingTime2: ::std::option::Option<
                unsafe extern "C" fn(
                    which_itemOut: *mut *mut root::PCM_source,
                    flagsOut: *mut ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetItemFromPointE"]
            pub static mut GetItemFromPoint: ::std::option::Option<
                unsafe extern "C" fn(
                    screen_x: ::std::os::raw::c_int,
                    screen_y: ::std::os::raw::c_int,
                    allow_locked: bool,
                    takeOutOptional: *mut *mut root::MediaItem_Take,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetItemProjectContextE"]
            pub static mut GetItemProjectContext: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::ReaProject,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetItemStateChunkE"]
            pub static mut GetItemStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    strNeedBig: *mut ::std::os::raw::c_char,
                    strNeedBig_sz: ::std::os::raw::c_int,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetLastColorThemeFileE"]
            pub static mut GetLastColorThemeFile:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetLastMarkerAndCurRegionE"]
            pub static mut GetLastMarkerAndCurRegion: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    time: f64,
                    markeridxOut: *mut ::std::os::raw::c_int,
                    regionidxOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetLastTouchedFXE"]
            pub static mut GetLastTouchedFX: ::std::option::Option<
                unsafe extern "C" fn(
                    tracknumberOut: *mut ::std::os::raw::c_int,
                    fxnumberOut: *mut ::std::os::raw::c_int,
                    paramnumberOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetLastTouchedTrackE"]
            pub static mut GetLastTouchedTrack:
                ::std::option::Option<unsafe extern "C" fn() -> *mut root::MediaTrack>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11GetMainHwndE"]
            pub static mut GetMainHwnd: ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMasterMuteSoloFlagsE"]
            pub static mut GetMasterMuteSoloFlags:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetMasterTrackE"]
            pub static mut GetMasterTrack: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetMasterTrackVisibilityE"]
            pub static mut GetMasterTrackVisibility:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMaxMidiInputsE"]
            pub static mut GetMaxMidiInputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetMaxMidiOutputsE"]
            pub static mut GetMaxMidiOutputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetMediaFileMetadataE"]
            pub static mut GetMediaFileMetadata: ::std::option::Option<
                unsafe extern "C" fn(
                    mediaSource: *mut root::PCM_source,
                    identifier: *const ::std::os::raw::c_char,
                    bufOutNeedBig: *mut ::std::os::raw::c_char,
                    bufOutNeedBig_sz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetMediaItemE"]
            pub static mut GetMediaItem: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    itemidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetMediaItem_TrackE"]
            pub static mut GetMediaItem_Track: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaItemInfo_ValueE"]
            pub static mut GetMediaItemInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetMediaItemNumTakesE"]
            pub static mut GetMediaItemNumTakes: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMediaItemTakeE"]
            pub static mut GetMediaItemTake: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    tk: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetMediaItemTake_ItemE"]
            pub static mut GetMediaItemTake_Item: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaItemTake_PeaksE"]
            pub static mut GetMediaItemTake_Peaks: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    peakrate: f64,
                    starttime: f64,
                    numchannels: ::std::os::raw::c_int,
                    numsamplesperchannel: ::std::os::raw::c_int,
                    want_extra_type: ::std::os::raw::c_int,
                    buf: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetMediaItemTake_SourceE"]
            pub static mut GetMediaItemTake_Source: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaItemTake_TrackE"]
            pub static mut GetMediaItemTake_Track: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaItemTakeByGUIDE"]
            pub static mut GetMediaItemTakeByGUID: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    guid: *const root::GUID,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetMediaItemTakeInfo_ValueE"]
            pub static mut GetMediaItemTakeInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetMediaItemTrackE"]
            pub static mut GetMediaItemTrack: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaSourceFileNameE"]
            pub static mut GetMediaSourceFileName: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    filenamebufOut: *mut ::std::os::raw::c_char,
                    filenamebufOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetMediaSourceLengthE"]
            pub static mut GetMediaSourceLength: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    lengthIsQNOut: *mut bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetMediaSourceNumChannelsE"]
            pub static mut GetMediaSourceNumChannels: ::std::option::Option<
                unsafe extern "C" fn(source: *mut root::PCM_source) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetMediaSourceParentE"]
            pub static mut GetMediaSourceParent: ::std::option::Option<
                unsafe extern "C" fn(src: *mut root::PCM_source) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetMediaSourceSampleRateE"]
            pub static mut GetMediaSourceSampleRate: ::std::option::Option<
                unsafe extern "C" fn(source: *mut root::PCM_source) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetMediaSourceTypeE"]
            pub static mut GetMediaSourceType: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    typebufOut: *mut ::std::os::raw::c_char,
                    typebufOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetMediaTrackInfo_ValueE"]
            pub static mut GetMediaTrackInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMIDIInputNameE"]
            pub static mut GetMIDIInputName: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: ::std::os::raw::c_int,
                    nameout: *mut ::std::os::raw::c_char,
                    nameout_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetMIDIOutputNameE"]
            pub static mut GetMIDIOutputName: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: ::std::os::raw::c_int,
                    nameout: *mut ::std::os::raw::c_char,
                    nameout_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetMixerScrollE"]
            pub static mut GetMixerScroll:
                ::std::option::Option<unsafe extern "C" fn() -> *mut root::MediaTrack>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMouseModifierE"]
            pub static mut GetMouseModifier: ::std::option::Option<
                unsafe extern "C" fn(
                    context: *const ::std::os::raw::c_char,
                    modifier_flag: ::std::os::raw::c_int,
                    actionOut: *mut ::std::os::raw::c_char,
                    actionOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMousePositionE"]
            pub static mut GetMousePosition: ::std::option::Option<
                unsafe extern "C" fn(
                    xOut: *mut ::std::os::raw::c_int,
                    yOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetNumAudioInputsE"]
            pub static mut GetNumAudioInputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetNumAudioOutputsE"]
            pub static mut GetNumAudioOutputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetNumMIDIInputsE"]
            pub static mut GetNumMIDIInputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetNumMIDIOutputsE"]
            pub static mut GetNumMIDIOutputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetNumTakeMarkersE"]
            pub static mut GetNumTakeMarkers: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetNumTracksE"]
            pub static mut GetNumTracks:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions5GetOSE"]
            pub static mut GetOS:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetOutputChannelNameE"]
            pub static mut GetOutputChannelName: ::std::option::Option<
                unsafe extern "C" fn(
                    channelIndex: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetOutputLatencyE"]
            pub static mut GetOutputLatency: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetParentTrackE"]
            pub static mut GetParentTrack: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetPeakFileNameE"]
            pub static mut GetPeakFileName: ::std::option::Option<
                unsafe extern "C" fn(
                    fn_: *const ::std::os::raw::c_char,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetPeakFileNameExE"]
            pub static mut GetPeakFileNameEx: ::std::option::Option<
                unsafe extern "C" fn(
                    fn_: *const ::std::os::raw::c_char,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                    forWrite: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetPeakFileNameEx2E"]
            pub static mut GetPeakFileNameEx2: ::std::option::Option<
                unsafe extern "C" fn(
                    fn_: *const ::std::os::raw::c_char,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                    forWrite: bool,
                    peaksfileextension: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetPeaksBitmapE"]
            pub static mut GetPeaksBitmap: ::std::option::Option<
                unsafe extern "C" fn(
                    pks: *mut root::PCM_source_peaktransfer_t,
                    maxamp: f64,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    bmp: *mut root::reaper_functions::LICE_IBitmap,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetPlayPositionE"]
            pub static mut GetPlayPosition: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetPlayPosition2E"]
            pub static mut GetPlayPosition2: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetPlayPosition2ExE"]
            pub static mut GetPlayPosition2Ex:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetPlayPositionExE"]
            pub static mut GetPlayPositionEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetPlayStateE"]
            pub static mut GetPlayState:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetPlayStateExE"]
            pub static mut GetPlayStateEx: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetPreferredDiskReadModeE"]
            pub static mut GetPreferredDiskReadMode: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: *mut ::std::os::raw::c_int,
                    nb: *mut ::std::os::raw::c_int,
                    bs: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28GetPreferredDiskReadModePeakE"]
            pub static mut GetPreferredDiskReadModePeak: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: *mut ::std::os::raw::c_int,
                    nb: *mut ::std::os::raw::c_int,
                    bs: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetPreferredDiskWriteModeE"]
            pub static mut GetPreferredDiskWriteMode: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: *mut ::std::os::raw::c_int,
                    nb: *mut ::std::os::raw::c_int,
                    bs: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetProjectLengthE"]
            pub static mut GetProjectLength:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetProjectNameE"]
            pub static mut GetProjectName: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetProjectPathE"]
            pub static mut GetProjectPath: ::std::option::Option<
                unsafe extern "C" fn(
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetProjectPathExE"]
            pub static mut GetProjectPathEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetProjectStateChangeCountE"]
            pub static mut GetProjectStateChangeCount: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetProjectTimeOffsetE"]
            pub static mut GetProjectTimeOffset: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, rndframe: bool) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetProjectTimeSignatureE"]
            pub static mut GetProjectTimeSignature:
                ::std::option::Option<unsafe extern "C" fn(bpmOut: *mut f64, bpiOut: *mut f64)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetProjectTimeSignature2E"]
            pub static mut GetProjectTimeSignature2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    bpmOut: *mut f64,
                    bpiOut: *mut f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetProjExtStateE"]
            pub static mut GetProjExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    extname: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                    valOutNeedBig: *mut ::std::os::raw::c_char,
                    valOutNeedBig_sz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetResourcePathE"]
            pub static mut GetResourcePath:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSelectedEnvelopeE"]
            pub static mut GetSelectedEnvelope: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetSelectedMediaItemE"]
            pub static mut GetSelectedMediaItem: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    selitem: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetSelectedTrackE"]
            pub static mut GetSelectedTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    seltrackidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSelectedTrack2E"]
            pub static mut GetSelectedTrack2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    seltrackidx: ::std::os::raw::c_int,
                    wantmaster: bool,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetSelectedTrackEnvelopeE"]
            pub static mut GetSelectedTrackEnvelope: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSet_ArrangeView2E"]
            pub static mut GetSet_ArrangeView2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    isSet: bool,
                    screen_x_start: ::std::os::raw::c_int,
                    screen_x_end: ::std::os::raw::c_int,
                    start_timeInOut: *mut f64,
                    end_timeInOut: *mut f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetSet_LoopTimeRangeE"]
            pub static mut GetSet_LoopTimeRange: ::std::option::Option<
                unsafe extern "C" fn(
                    isSet: bool,
                    isLoop: bool,
                    startOut: *mut f64,
                    endOut: *mut f64,
                    allowautoseek: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetSet_LoopTimeRange2E"]
            pub static mut GetSet_LoopTimeRange2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    isSet: bool,
                    isLoop: bool,
                    startOut: *mut f64,
                    endOut: *mut f64,
                    allowautoseek: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetSetAutomationItemInfoE"]
            pub static mut GetSetAutomationItemInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    desc: *const ::std::os::raw::c_char,
                    value: f64,
                    is_set: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions31GetSetAutomationItemInfo_StringE"]
            pub static mut GetSetAutomationItemInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    desc: *const ::std::os::raw::c_char,
                    valuestrNeedBig: *mut ::std::os::raw::c_char,
                    is_set: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetSetEnvelopeInfo_StringE"]
            pub static mut GetSetEnvelopeInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSetEnvelopeStateE"]
            pub static mut GetSetEnvelopeState: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetSetEnvelopeState2E"]
            pub static mut GetSetEnvelopeState2: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                    isundo: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetSetItemStateE"]
            pub static mut GetSetItemState: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetSetItemState2E"]
            pub static mut GetSetItemState2: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                    isundo: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSetMediaItemInfoE"]
            pub static mut GetSetMediaItemInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    parmname: *const ::std::os::raw::c_char,
                    setNewValue: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetSetMediaItemInfo_StringE"]
            pub static mut GetSetMediaItemInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetSetMediaItemTakeInfoE"]
            pub static mut GetSetMediaItemTakeInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    tk: *mut root::MediaItem_Take,
                    parmname: *const ::std::os::raw::c_char,
                    setNewValue: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions30GetSetMediaItemTakeInfo_StringE"]
            pub static mut GetSetMediaItemTakeInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    tk: *mut root::MediaItem_Take,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetSetMediaTrackInfoE"]
            pub static mut GetSetMediaTrackInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    parmname: *const ::std::os::raw::c_char,
                    setNewValue: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetSetMediaTrackInfo_StringE"]
            pub static mut GetSetMediaTrackInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSetObjectStateE"]
            pub static mut GetSetObjectState: ::std::option::Option<
                unsafe extern "C" fn(
                    obj: *mut ::std::os::raw::c_void,
                    str: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetSetObjectState2E"]
            pub static mut GetSetObjectState2: ::std::option::Option<
                unsafe extern "C" fn(
                    obj: *mut ::std::os::raw::c_void,
                    str: *const ::std::os::raw::c_char,
                    isundo: bool,
                ) -> *mut ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSetProjectAuthorE"]
            pub static mut GetSetProjectAuthor: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    set: bool,
                    author: *mut ::std::os::raw::c_char,
                    author_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSetProjectGridE"]
            pub static mut GetSetProjectGrid: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    set: bool,
                    divisionInOutOptional: *mut f64,
                    swingmodeInOutOptional: *mut ::std::os::raw::c_int,
                    swingamtInOutOptional: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSetProjectInfoE"]
            pub static mut GetSetProjectInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    desc: *const ::std::os::raw::c_char,
                    value: f64,
                    is_set: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetSetProjectInfo_StringE"]
            pub static mut GetSetProjectInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    desc: *const ::std::os::raw::c_char,
                    valuestrNeedBig: *mut ::std::os::raw::c_char,
                    is_set: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetSetProjectNotesE"]
            pub static mut GetSetProjectNotes: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    set: bool,
                    notesNeedBig: *mut ::std::os::raw::c_char,
                    notesNeedBig_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetSetRepeatE"]
            pub static mut GetSetRepeat: ::std::option::Option<
                unsafe extern "C" fn(val: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetSetRepeatExE"]
            pub static mut GetSetRepeatEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    val: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28GetSetTempoTimeSigMarkerFlagE"]
            pub static mut GetSetTempoTimeSigMarkerFlag: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    point_index: ::std::os::raw::c_int,
                    flag: ::std::os::raw::c_int,
                    is_set: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetSetTrackGroupMembershipE"]
            pub static mut GetSetTrackGroupMembership: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    groupname: *const ::std::os::raw::c_char,
                    setmask: ::std::os::raw::c_uint,
                    setvalue: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28GetSetTrackGroupMembershipExE"]
            pub static mut GetSetTrackGroupMembershipEx: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    groupname: *const ::std::os::raw::c_char,
                    offset: ::std::os::raw::c_int,
                    setmask: ::std::os::raw::c_uint,
                    setvalue: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions30GetSetTrackGroupMembershipHighE"]
            pub static mut GetSetTrackGroupMembershipHigh: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    groupname: *const ::std::os::raw::c_char,
                    setmask: ::std::os::raw::c_uint,
                    setvalue: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetSetTrackMIDISupportFileE"]
            pub static mut GetSetTrackMIDISupportFile: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    which: ::std::os::raw::c_int,
                    filename: *const ::std::os::raw::c_char,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSetTrackSendInfoE"]
            pub static mut GetSetTrackSendInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    setNewValue: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetSetTrackSendInfo_StringE"]
            pub static mut GetSetTrackSendInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetSetTrackStateE"]
            pub static mut GetSetTrackState: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSetTrackState2E"]
            pub static mut GetSetTrackState2: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                    isundo: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetSubProjectFromSourceE"]
            pub static mut GetSubProjectFromSource: ::std::option::Option<
                unsafe extern "C" fn(src: *mut root::PCM_source) -> *mut root::ReaProject,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions7GetTakeE"]
            pub static mut GetTake: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    takeidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetTakeEnvelopeE"]
            pub static mut GetTakeEnvelope: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    envidx: ::std::os::raw::c_int,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTakeEnvelopeByNameE"]
            pub static mut GetTakeEnvelopeByName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    envname: *const ::std::os::raw::c_char,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTakeMarkerE"]
            pub static mut GetTakeMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    nameOut: *mut ::std::os::raw::c_char,
                    nameOut_sz: ::std::os::raw::c_int,
                    colorOutOptional: *mut ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11GetTakeNameE"]
            pub static mut GetTakeName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetTakeNumStretchMarkersE"]
            pub static mut GetTakeNumStretchMarkers: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetTakeStretchMarkerE"]
            pub static mut GetTakeStretchMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    posOut: *mut f64,
                    srcposOutOptional: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetTakeStretchMarkerSlopeE"]
            pub static mut GetTakeStretchMarkerSlope: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetTCPFXParmE"]
            pub static mut GetTCPFXParm: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    index: ::std::os::raw::c_int,
                    fxindexOut: *mut ::std::os::raw::c_int,
                    parmidxOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTempoMatchPlayRateE"]
            pub static mut GetTempoMatchPlayRate: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    srcscale: f64,
                    position: f64,
                    mult: f64,
                    rateOut: *mut f64,
                    targetlenOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTempoTimeSigMarkerE"]
            pub static mut GetTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    ptidx: ::std::os::raw::c_int,
                    timeposOut: *mut f64,
                    measureposOut: *mut ::std::os::raw::c_int,
                    beatposOut: *mut f64,
                    bpmOut: *mut f64,
                    timesig_numOut: *mut ::std::os::raw::c_int,
                    timesig_denomOut: *mut ::std::os::raw::c_int,
                    lineartempoOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetThemeColorE"]
            pub static mut GetThemeColor: ::std::option::Option<
                unsafe extern "C" fn(
                    ini_key: *const ::std::os::raw::c_char,
                    flagsOptional: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetThingFromPointE"]
            pub static mut GetThingFromPoint: ::std::option::Option<
                unsafe extern "C" fn(
                    screen_x: ::std::os::raw::c_int,
                    screen_y: ::std::os::raw::c_int,
                    infoOut: *mut ::std::os::raw::c_char,
                    infoOut_sz: ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetToggleCommandStateE"]
            pub static mut GetToggleCommandState: ::std::option::Option<
                unsafe extern "C" fn(command_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetToggleCommandState2E"]
            pub static mut GetToggleCommandState2: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    command_id: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetToggleCommandStateExE"]
            pub static mut GetToggleCommandStateEx: ::std::option::Option<
                unsafe extern "C" fn(
                    section_id: ::std::os::raw::c_int,
                    command_id: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions33GetToggleCommandStateThroughHooksE"]
            pub static mut GetToggleCommandStateThroughHooks: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    command_id: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTooltipWindowE"]
            pub static mut GetTooltipWindow:
                ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTouchedOrFocusedFXE"]
            pub static mut GetTouchedOrFocusedFX: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    trackidxOut: *mut ::std::os::raw::c_int,
                    itemidxOut: *mut ::std::os::raw::c_int,
                    takeidxOut: *mut ::std::os::raw::c_int,
                    fxidxOut: *mut ::std::os::raw::c_int,
                    parmOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8GetTrackE"]
            pub static mut GetTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    trackidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetTrackAutomationModeE"]
            pub static mut GetTrackAutomationMode: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTrackColorE"]
            pub static mut GetTrackColor: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTrackDepthE"]
            pub static mut GetTrackDepth: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTrackEnvelopeE"]
            pub static mut GetTrackEnvelope: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    envidx: ::std::os::raw::c_int,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetTrackEnvelopeByChunkNameE"]
            pub static mut GetTrackEnvelopeByChunkName: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    cfgchunkname_or_guid: *const ::std::os::raw::c_char,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetTrackEnvelopeByNameE"]
            pub static mut GetTrackEnvelopeByName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    envname: *const ::std::os::raw::c_char,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetTrackFromPointE"]
            pub static mut GetTrackFromPoint: ::std::option::Option<
                unsafe extern "C" fn(
                    screen_x: ::std::os::raw::c_int,
                    screen_y: ::std::os::raw::c_int,
                    infoOutOptional: *mut ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetTrackGUIDE"]
            pub static mut GetTrackGUID: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack) -> *mut root::GUID,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetTrackInfoE"]
            pub static mut GetTrackInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    track: root::INT_PTR,
                    flags: *mut ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetTrackMediaItemE"]
            pub static mut GetTrackMediaItem: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    itemidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetTrackMIDILyricsE"]
            pub static mut GetTrackMIDILyrics: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    flag: ::std::os::raw::c_int,
                    bufOutWantNeedBig: *mut ::std::os::raw::c_char,
                    bufOutWantNeedBig_sz: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetTrackMIDINoteNameE"]
            pub static mut GetTrackMIDINoteName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: ::std::os::raw::c_int,
                    pitch: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetTrackMIDINoteNameExE"]
            pub static mut GetTrackMIDINoteNameEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    pitch: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTrackMIDINoteRangeE"]
            pub static mut GetTrackMIDINoteRange: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    note_loOut: *mut ::std::os::raw::c_int,
                    note_hiOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetTrackNameE"]
            pub static mut GetTrackName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTrackNumMediaItemsE"]
            pub static mut GetTrackNumMediaItems: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTrackNumSendsE"]
            pub static mut GetTrackNumSends: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetTrackReceiveNameE"]
            pub static mut GetTrackReceiveName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTrackReceiveUIMuteE"]
            pub static mut GetTrackReceiveUIMute: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    muteOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetTrackReceiveUIVolPanE"]
            pub static mut GetTrackReceiveUIVolPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    volumeOut: *mut f64,
                    panOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetTrackSendInfo_ValueE"]
            pub static mut GetTrackSendInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTrackSendNameE"]
            pub static mut GetTrackSendName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetTrackSendUIMuteE"]
            pub static mut GetTrackSendUIMute: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    muteOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetTrackSendUIVolPanE"]
            pub static mut GetTrackSendUIVolPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    volumeOut: *mut f64,
                    panOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTrackStateE"]
            pub static mut GetTrackState: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    flagsOut: *mut ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetTrackStateChunkE"]
            pub static mut GetTrackStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    strNeedBig: *mut ::std::os::raw::c_char,
                    strNeedBig_sz: ::std::os::raw::c_int,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetTrackUIMuteE"]
            pub static mut GetTrackUIMute: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, muteOut: *mut bool) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTrackUIPanE"]
            pub static mut GetTrackUIPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    pan1Out: *mut f64,
                    pan2Out: *mut f64,
                    panmodeOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTrackUIVolPanE"]
            pub static mut GetTrackUIVolPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    volumeOut: *mut f64,
                    panOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetUnderrunTimeE"]
            pub static mut GetUnderrunTime: ::std::option::Option<
                unsafe extern "C" fn(
                    audio_xrunOut: *mut ::std::os::raw::c_uint,
                    media_xrunOut: *mut ::std::os::raw::c_uint,
                    curtimeOut: *mut ::std::os::raw::c_uint,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetUserFileNameForReadE"]
            pub static mut GetUserFileNameForRead: ::std::option::Option<
                unsafe extern "C" fn(
                    filenameNeed4096: *mut ::std::os::raw::c_char,
                    title: *const ::std::os::raw::c_char,
                    defext: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetUserInputsE"]
            pub static mut GetUserInputs: ::std::option::Option<
                unsafe extern "C" fn(
                    title: *const ::std::os::raw::c_char,
                    num_inputs: ::std::os::raw::c_int,
                    captions_csv: *const ::std::os::raw::c_char,
                    retvals_csv: *mut ::std::os::raw::c_char,
                    retvals_csv_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10GoToMarkerE"]
            pub static mut GoToMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    marker_index: ::std::os::raw::c_int,
                    use_timeline_order: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10GoToRegionE"]
            pub static mut GoToRegion: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    region_index: ::std::os::raw::c_int,
                    use_timeline_order: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GR_SelectColorE"]
            pub static mut GR_SelectColor: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    colorOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11GSC_mainwndE"]
            pub static mut GSC_mainwnd: ::std::option::Option<
                unsafe extern "C" fn(t: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12guidToStringE"]
            pub static mut guidToString: ::std::option::Option<
                unsafe extern "C" fn(g: *const root::GUID, destNeed64: *mut ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11HasExtStateE"]
            pub static mut HasExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20HasTrackMIDIProgramsE"]
            pub static mut HasTrackMIDIPrograms: ::std::option::Option<
                unsafe extern "C" fn(track: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22HasTrackMIDIProgramsExE"]
            pub static mut HasTrackMIDIProgramsEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8Help_SetE"]
            pub static mut Help_Set: ::std::option::Option<
                unsafe extern "C" fn(
                    helpstring: *const ::std::os::raw::c_char,
                    is_temporary_help: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20HiresPeaksFromSourceE"]
            pub static mut HiresPeaksFromSource: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    block: *mut root::PCM_source_peaktransfer_t,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16image_resolve_fnE"]
            pub static mut image_resolve_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    in_: *const ::std::os::raw::c_char,
                    out: *mut ::std::os::raw::c_char,
                    out_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20InsertAutomationItemE"]
            pub static mut InsertAutomationItem: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    pool_id: ::std::os::raw::c_int,
                    position: f64,
                    length: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19InsertEnvelopePointE"]
            pub static mut InsertEnvelopePoint: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    time: f64,
                    value: f64,
                    shape: ::std::os::raw::c_int,
                    tension: f64,
                    selected: bool,
                    noSortInOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21InsertEnvelopePointExE"]
            pub static mut InsertEnvelopePointEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    time: f64,
                    value: f64,
                    shape: ::std::os::raw::c_int,
                    tension: f64,
                    selected: bool,
                    noSortInOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11InsertMediaE"]
            pub static mut InsertMedia: ::std::option::Option<
                unsafe extern "C" fn(
                    file: *const ::std::os::raw::c_char,
                    mode: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18InsertMediaSectionE"]
            pub static mut InsertMediaSection: ::std::option::Option<
                unsafe extern "C" fn(
                    file: *const ::std::os::raw::c_char,
                    mode: ::std::os::raw::c_int,
                    startpct: f64,
                    endpct: f64,
                    pitchshift: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18InsertTrackAtIndexE"]
            pub static mut InsertTrackAtIndex: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int, wantDefaults: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20InsertTrackInProjectE"]
            pub static mut InsertTrackInProject: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    idx: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17IsInRealTimeAudioE"]
            pub static mut IsInRealTimeAudio:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27IsItemTakeActiveForPlaybackE"]
            pub static mut IsItemTakeActiveForPlayback: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    take: *mut root::MediaItem_Take,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16IsMediaExtensionE"]
            pub static mut IsMediaExtension: ::std::option::Option<
                unsafe extern "C" fn(ext: *const ::std::os::raw::c_char, wantOthers: bool) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19IsMediaItemSelectedE"]
            pub static mut IsMediaItemSelected:
                ::std::option::Option<unsafe extern "C" fn(item: *mut root::MediaItem) -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14IsProjectDirtyE"]
            pub static mut IsProjectDirty: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8IsREAPERE"]
            pub static mut IsREAPER: ::std::option::Option<unsafe extern "C" fn() -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15IsTrackSelectedE"]
            pub static mut IsTrackSelected:
                ::std::option::Option<unsafe extern "C" fn(track: *mut root::MediaTrack) -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14IsTrackVisibleE"]
            pub static mut IsTrackVisible: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, mixer: bool) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17IsWindowTextFieldE"]
            pub static mut IsWindowTextField:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15joystick_createE"]
            pub static mut joystick_create: ::std::option::Option<
                unsafe extern "C" fn(
                    guid: *const root::GUID,
                )
                    -> *mut root::reaper_functions::joystick_device,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16joystick_destroyE"]
            pub static mut joystick_destroy: ::std::option::Option<
                unsafe extern "C" fn(device: *mut root::reaper_functions::joystick_device),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13joystick_enumE"]
            pub static mut joystick_enum: ::std::option::Option<
                unsafe extern "C" fn(
                    index: ::std::os::raw::c_int,
                    namestrOutOptional: *mut *const ::std::os::raw::c_char,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16joystick_getaxisE"]
            pub static mut joystick_getaxis: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: *mut root::reaper_functions::joystick_device,
                    axis: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22joystick_getbuttonmaskE"]
            pub static mut joystick_getbuttonmask: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: *mut root::reaper_functions::joystick_device,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16joystick_getinfoE"]
            pub static mut joystick_getinfo: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: *mut root::reaper_functions::joystick_device,
                    axesOutOptional: *mut ::std::os::raw::c_int,
                    povsOutOptional: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15joystick_getpovE"]
            pub static mut joystick_getpov: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: *mut root::reaper_functions::joystick_device,
                    pov: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15joystick_updateE"]
            pub static mut joystick_update: ::std::option::Option<
                unsafe extern "C" fn(dev: *mut root::reaper_functions::joystick_device) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20kbd_enumerateActionsE"]
            pub static mut kbd_enumerateActions: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    idx: ::std::os::raw::c_int,
                    nameOut: *mut *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17kbd_formatKeyNameE"]
            pub static mut kbd_formatKeyName: ::std::option::Option<
                unsafe extern "C" fn(ac: *mut root::ACCEL, s: *mut ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18kbd_getCommandNameE"]
            pub static mut kbd_getCommandName: ::std::option::Option<
                unsafe extern "C" fn(
                    cmd: ::std::os::raw::c_int,
                    s: *mut ::std::os::raw::c_char,
                    section: *mut root::KbdSectionInfo,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18kbd_getTextFromCmdE"]
            pub static mut kbd_getTextFromCmd: ::std::option::Option<
                unsafe extern "C" fn(
                    cmd: ::std::os::raw::c_int,
                    section: *mut root::KbdSectionInfo,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18KBD_OnMainActionExE"]
            pub static mut KBD_OnMainActionEx: ::std::option::Option<
                unsafe extern "C" fn(
                    cmd: ::std::os::raw::c_int,
                    val: ::std::os::raw::c_int,
                    valhw: ::std::os::raw::c_int,
                    relmode: ::std::os::raw::c_int,
                    hwnd: root::HWND,
                    proj: *mut root::ReaProject,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15kbd_OnMidiEventE"]
            pub static mut kbd_OnMidiEvent: ::std::option::Option<
                unsafe extern "C" fn(
                    evt: *mut root::MIDI_event_t,
                    dev_index: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14kbd_OnMidiListE"]
            pub static mut kbd_OnMidiList: ::std::option::Option<
                unsafe extern "C" fn(
                    list: *mut root::MIDI_eventlist,
                    dev_index: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22kbd_ProcessActionsMenuE"]
            pub static mut kbd_ProcessActionsMenu: ::std::option::Option<
                unsafe extern "C" fn(menu: root::HMENU, section: *mut root::KbdSectionInfo),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28kbd_processMidiEventActionExE"]
            pub static mut kbd_processMidiEventActionEx: ::std::option::Option<
                unsafe extern "C" fn(
                    evt: *mut root::MIDI_event_t,
                    section: *mut root::KbdSectionInfo,
                    hwndCtx: root::HWND,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17kbd_reprocessMenuE"]
            pub static mut kbd_reprocessMenu: ::std::option::Option<
                unsafe extern "C" fn(menu: root::HMENU, section: *mut root::KbdSectionInfo),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26kbd_RunCommandThroughHooksE"]
            pub static mut kbd_RunCommandThroughHooks: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    actionCommandID: *const ::std::os::raw::c_int,
                    val: *const ::std::os::raw::c_int,
                    valhw: *const ::std::os::raw::c_int,
                    relmode: *const ::std::os::raw::c_int,
                    hwnd: root::HWND,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24kbd_translateAcceleratorE"]
            pub static mut kbd_translateAccelerator: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    msg: *mut root::MSG,
                    section: *mut root::KbdSectionInfo,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE__DestroyE"]
            pub static mut LICE__Destroy: ::std::option::Option<
                unsafe extern "C" fn(bm: *mut root::reaper_functions::LICE_IBitmap),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17LICE__DestroyFontE"]
            pub static mut LICE__DestroyFont: ::std::option::Option<
                unsafe extern "C" fn(font: *mut root::reaper_functions::LICE_IFont),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE__DrawTextE"]
            pub static mut LICE__DrawText: ::std::option::Option<
                unsafe extern "C" fn(
                    font: *mut root::reaper_functions::LICE_IFont,
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    str: *const ::std::os::raw::c_char,
                    strcnt: ::std::os::raw::c_int,
                    rect: *mut root::RECT,
                    dtFlags: root::UINT,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE__GetBitsE"]
            pub static mut LICE__GetBits: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11LICE__GetDCE"]
            pub static mut LICE__GetDC: ::std::option::Option<
                unsafe extern "C" fn(bm: *mut root::reaper_functions::LICE_IBitmap) -> root::HDC,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE__GetHeightE"]
            pub static mut LICE__GetHeight: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE__GetRowSpanE"]
            pub static mut LICE__GetRowSpan: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE__GetWidthE"]
            pub static mut LICE__GetWidth: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE__IsFlippedE"]
            pub static mut LICE__IsFlipped: ::std::option::Option<
                unsafe extern "C" fn(bm: *mut root::reaper_functions::LICE_IBitmap) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12LICE__resizeE"]
            pub static mut LICE__resize: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE__SetBkColorE"]
            pub static mut LICE__SetBkColor: ::std::option::Option<
                unsafe extern "C" fn(
                    font: *mut root::reaper_functions::LICE_IFont,
                    color: root::reaper_functions::LICE_pixel,
                ) -> root::reaper_functions::LICE_pixel,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18LICE__SetFromHFontE"]
            pub static mut LICE__SetFromHFont: ::std::option::Option<
                unsafe extern "C" fn(
                    font: *mut root::reaper_functions::LICE_IFont,
                    hfont: root::HFONT,
                    flags: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18LICE__SetTextColorE"]
            pub static mut LICE__SetTextColor: ::std::option::Option<
                unsafe extern "C" fn(
                    font: *mut root::reaper_functions::LICE_IFont,
                    color: root::reaper_functions::LICE_pixel,
                ) -> root::reaper_functions::LICE_pixel,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24LICE__SetTextCombineModeE"]
            pub static mut LICE__SetTextCombineMode: ::std::option::Option<
                unsafe extern "C" fn(
                    ifont: *mut root::reaper_functions::LICE_IFont,
                    mode: ::std::os::raw::c_int,
                    alpha: f32,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8LICE_ArcE"]
            pub static mut LICE_Arc: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    cx: f32,
                    cy: f32,
                    r: f32,
                    minAngle: f32,
                    maxAngle: f32,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9LICE_BlitE"]
            pub static mut LICE_Blit: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    srcx: ::std::os::raw::c_int,
                    srcy: ::std::os::raw::c_int,
                    srcw: ::std::os::raw::c_int,
                    srch: ::std::os::raw::c_int,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9LICE_BlurE"]
            pub static mut LICE_Blur: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    srcx: ::std::os::raw::c_int,
                    srcy: ::std::os::raw::c_int,
                    srcw: ::std::os::raw::c_int,
                    srch: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17LICE_BorderedRectE"]
            pub static mut LICE_BorderedRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    bgcolor: root::reaper_functions::LICE_pixel,
                    fgcolor: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11LICE_CircleE"]
            pub static mut LICE_Circle: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    cx: f32,
                    cy: f32,
                    r: f32,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10LICE_ClearE"]
            pub static mut LICE_Clear: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    color: root::reaper_functions::LICE_pixel,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE_ClearRectE"]
            pub static mut LICE_ClearRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    mask: root::reaper_functions::LICE_pixel,
                    orbits: root::reaper_functions::LICE_pixel,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_ClipLineE"]
            pub static mut LICE_ClipLine: ::std::option::Option<
                unsafe extern "C" fn(
                    pX1Out: *mut ::std::os::raw::c_int,
                    pY1Out: *mut ::std::os::raw::c_int,
                    pX2Out: *mut ::std::os::raw::c_int,
                    pY2Out: *mut ::std::os::raw::c_int,
                    xLo: ::std::os::raw::c_int,
                    yLo: ::std::os::raw::c_int,
                    xHi: ::std::os::raw::c_int,
                    yHi: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18LICE_CombinePixelsE"]
            pub static mut LICE_CombinePixels: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: root::reaper_functions::LICE_pixel,
                    src: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ) -> root::reaper_functions::LICE_pixel,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9LICE_CopyE"]
            pub static mut LICE_Copy: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17LICE_CreateBitmapE"]
            pub static mut LICE_CreateBitmap: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                ) -> *mut root::reaper_functions::LICE_IBitmap,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_CreateFontE"]
            pub static mut LICE_CreateFont: ::std::option::Option<
                unsafe extern "C" fn() -> *mut root::reaper_functions::LICE_IFont,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE_DrawCBezierE"]
            pub static mut LICE_DrawCBezier: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    xstart: f64,
                    ystart: f64,
                    xctl1: f64,
                    yctl1: f64,
                    xctl2: f64,
                    yctl2: f64,
                    xend: f64,
                    yend: f64,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                    tol: f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_DrawCharE"]
            pub static mut LICE_DrawChar: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    c: ::std::os::raw::c_char,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE_DrawGlyphE"]
            pub static mut LICE_DrawGlyph: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alphas: *mut root::reaper_functions::LICE_pixel_chan,
                    glyph_w: ::std::os::raw::c_int,
                    glyph_h: ::std::os::raw::c_int,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_DrawRectE"]
            pub static mut LICE_DrawRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_DrawTextE"]
            pub static mut LICE_DrawText: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    string: *const ::std::os::raw::c_char,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE_FillCBezierE"]
            pub static mut LICE_FillCBezier: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    xstart: f64,
                    ystart: f64,
                    xctl1: f64,
                    yctl1: f64,
                    xctl2: f64,
                    yctl2: f64,
                    xend: f64,
                    yend: f64,
                    yfill: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                    tol: f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_FillCircleE"]
            pub static mut LICE_FillCircle: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    cx: f32,
                    cy: f32,
                    r: f32,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22LICE_FillConvexPolygonE"]
            pub static mut LICE_FillConvexPolygon: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: *mut ::std::os::raw::c_int,
                    y: *mut ::std::os::raw::c_int,
                    npoints: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_FillRectE"]
            pub static mut LICE_FillRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18LICE_FillTrapezoidE"]
            pub static mut LICE_FillTrapezoid: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1a: ::std::os::raw::c_int,
                    x1b: ::std::os::raw::c_int,
                    y1: ::std::os::raw::c_int,
                    x2a: ::std::os::raw::c_int,
                    x2b: ::std::os::raw::c_int,
                    y2: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17LICE_FillTriangleE"]
            pub static mut LICE_FillTriangle: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1: ::std::os::raw::c_int,
                    y1: ::std::os::raw::c_int,
                    x2: ::std::os::raw::c_int,
                    y2: ::std::os::raw::c_int,
                    x3: ::std::os::raw::c_int,
                    y3: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_GetPixelE"]
            pub static mut LICE_GetPixel: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                ) -> root::reaper_functions::LICE_pixel,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_GradRectE"]
            pub static mut LICE_GradRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    dstw: ::std::os::raw::c_int,
                    dsth: ::std::os::raw::c_int,
                    ir: f32,
                    ig: f32,
                    ib: f32,
                    ia: f32,
                    drdx: f32,
                    dgdx: f32,
                    dbdx: f32,
                    dadx: f32,
                    drdy: f32,
                    dgdy: f32,
                    dbdy: f32,
                    dady: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9LICE_LineE"]
            pub static mut LICE_Line: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1: f32,
                    y1: f32,
                    x2: f32,
                    y2: f32,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12LICE_LineIntE"]
            pub static mut LICE_LineInt: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1: ::std::os::raw::c_int,
                    y1: ::std::os::raw::c_int,
                    x2: ::std::os::raw::c_int,
                    y2: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12LICE_LoadPNGE"]
            pub static mut LICE_LoadPNG: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                    bmp: *mut root::reaper_functions::LICE_IBitmap,
                ) -> *mut root::reaper_functions::LICE_IBitmap,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24LICE_LoadPNGFromResourceE"]
            pub static mut LICE_LoadPNGFromResource: ::std::option::Option<
                unsafe extern "C" fn(
                    hInst: root::HINSTANCE,
                    resid: *const ::std::os::raw::c_char,
                    bmp: *mut root::reaper_functions::LICE_IBitmap,
                ) -> *mut root::reaper_functions::LICE_IBitmap,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE_MeasureTextE"]
            pub static mut LICE_MeasureText: ::std::option::Option<
                unsafe extern "C" fn(
                    string: *const ::std::os::raw::c_char,
                    w: *mut ::std::os::raw::c_int,
                    h: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20LICE_MultiplyAddRectE"]
            pub static mut LICE_MultiplyAddRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    rsc: f32,
                    gsc: f32,
                    bsc: f32,
                    asc: f32,
                    radd: f32,
                    gadd: f32,
                    badd: f32,
                    aadd: f32,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_PutPixelE"]
            pub static mut LICE_PutPixel: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE_RotatedBlitE"]
            pub static mut LICE_RotatedBlit: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    dstw: ::std::os::raw::c_int,
                    dsth: ::std::os::raw::c_int,
                    srcx: f32,
                    srcy: f32,
                    srcw: f32,
                    srch: f32,
                    angle: f32,
                    cliptosourcerect: bool,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    rotxcent: f32,
                    rotycent: f32,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE_RoundRectE"]
            pub static mut LICE_RoundRect: ::std::option::Option<
                unsafe extern "C" fn(
                    drawbm: *mut root::reaper_functions::LICE_IBitmap,
                    xpos: f32,
                    ypos: f32,
                    w: f32,
                    h: f32,
                    cornerradius: ::std::os::raw::c_int,
                    col: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_ScaledBlitE"]
            pub static mut LICE_ScaledBlit: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    dstw: ::std::os::raw::c_int,
                    dsth: ::std::os::raw::c_int,
                    srcx: f32,
                    srcy: f32,
                    srcw: f32,
                    srch: f32,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_SimpleFillE"]
            pub static mut LICE_SimpleFill: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    newcolor: root::reaper_functions::LICE_pixel,
                    comparemask: root::reaper_functions::LICE_pixel,
                    keepmask: root::reaper_functions::LICE_pixel,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_ThickFLineE"]
            pub static mut LICE_ThickFLine: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1: f64,
                    y1: f64,
                    x2: f64,
                    y2: f64,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    wid: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LocalizeStringE"]
            pub static mut LocalizeString: ::std::option::Option<
                unsafe extern "C" fn(
                    src_string: *const ::std::os::raw::c_char,
                    section: *const ::std::os::raw::c_char,
                    flagsOptional: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12Loop_OnArrowE"]
            pub static mut Loop_OnArrow: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    direction: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14Main_OnCommandE"]
            pub static mut Main_OnCommand: ::std::option::Option<
                unsafe extern "C" fn(command: ::std::os::raw::c_int, flag: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Main_OnCommandExE"]
            pub static mut Main_OnCommandEx: ::std::option::Option<
                unsafe extern "C" fn(
                    command: ::std::os::raw::c_int,
                    flag: ::std::os::raw::c_int,
                    proj: *mut root::ReaProject,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Main_openProjectE"]
            pub static mut Main_openProject:
                ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Main_SaveProjectE"]
            pub static mut Main_SaveProject: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, forceSaveAsInOptional: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18Main_SaveProjectExE"]
            pub static mut Main_SaveProjectEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    filename: *const ::std::os::raw::c_char,
                    options: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19Main_UpdateLoopInfoE"]
            pub static mut Main_UpdateLoopInfo:
                ::std::option::Option<unsafe extern "C" fn(ignoremask: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16MarkProjectDirtyE"]
            pub static mut MarkProjectDirty:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19MarkTrackItemsDirtyE"]
            pub static mut MarkTrackItemsDirty: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, item: *mut root::MediaItem),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18Master_GetPlayRateE"]
            pub static mut Master_GetPlayRate:
                ::std::option::Option<unsafe extern "C" fn(project: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24Master_GetPlayRateAtTimeE"]
            pub static mut Master_GetPlayRateAtTime: ::std::option::Option<
                unsafe extern "C" fn(time_s: f64, proj: *mut root::ReaProject) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15Master_GetTempoE"]
            pub static mut Master_GetTempo: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24Master_NormalizePlayRateE"]
            pub static mut Master_NormalizePlayRate: ::std::option::Option<
                unsafe extern "C" fn(playrate: f64, isnormalized: bool) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21Master_NormalizeTempoE"]
            pub static mut Master_NormalizeTempo:
                ::std::option::Option<unsafe extern "C" fn(bpm: f64, isnormalized: bool) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions2MBE"]
            pub static mut MB: ::std::option::Option<
                unsafe extern "C" fn(
                    msg: *const ::std::os::raw::c_char,
                    title: *const ::std::os::raw::c_char,
                    type_: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26MediaItemDescendsFromTrackE"]
            pub static mut MediaItemDescendsFromTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    track: *mut root::MediaTrack,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12Menu_GetHashE"]
            pub static mut Menu_GetHash: ::std::option::Option<
                unsafe extern "C" fn(
                    menuname: *const ::std::os::raw::c_char,
                    flag: ::std::os::raw::c_int,
                    hashOut: *mut ::std::os::raw::c_char,
                    hashOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_CountEvtsE"]
            pub static mut MIDI_CountEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    notecntOut: *mut ::std::os::raw::c_int,
                    ccevtcntOut: *mut ::std::os::raw::c_int,
                    textsyxevtcntOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13MIDI_DeleteCCE"]
            pub static mut MIDI_DeleteCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_DeleteEvtE"]
            pub static mut MIDI_DeleteEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    evtidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_DeleteNoteE"]
            pub static mut MIDI_DeleteNote: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    noteidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23MIDI_DeleteTextSysexEvtE"]
            pub static mut MIDI_DeleteTextSysexEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    textsyxevtidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16MIDI_DisableSortE"]
            pub static mut MIDI_DisableSort:
                ::std::option::Option<unsafe extern "C" fn(take: *mut root::MediaItem_Take)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_EnumSelCCE"]
            pub static mut MIDI_EnumSelCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16MIDI_EnumSelEvtsE"]
            pub static mut MIDI_EnumSelEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    evtidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17MIDI_EnumSelNotesE"]
            pub static mut MIDI_EnumSelNotes: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    noteidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25MIDI_EnumSelTextSysexEvtsE"]
            pub static mut MIDI_EnumSelTextSysexEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    textsyxidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21MIDI_eventlist_CreateE"]
            pub static mut MIDI_eventlist_Create:
                ::std::option::Option<unsafe extern "C" fn() -> *mut root::MIDI_eventlist>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22MIDI_eventlist_DestroyE"]
            pub static mut MIDI_eventlist_Destroy:
                ::std::option::Option<unsafe extern "C" fn(evtlist: *mut root::MIDI_eventlist)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_GetAllEvtsE"]
            pub static mut MIDI_GetAllEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    bufOutNeedBig: *mut ::std::os::raw::c_char,
                    bufOutNeedBig_sz: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10MIDI_GetCCE"]
            pub static mut MIDI_GetCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                    selectedOut: *mut bool,
                    mutedOut: *mut bool,
                    ppqposOut: *mut f64,
                    chanmsgOut: *mut ::std::os::raw::c_int,
                    chanOut: *mut ::std::os::raw::c_int,
                    msg2Out: *mut ::std::os::raw::c_int,
                    msg3Out: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_GetCCShapeE"]
            pub static mut MIDI_GetCCShape: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                    shapeOut: *mut ::std::os::raw::c_int,
                    beztensionOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11MIDI_GetEvtE"]
            pub static mut MIDI_GetEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    evtidx: ::std::os::raw::c_int,
                    selectedOut: *mut bool,
                    mutedOut: *mut bool,
                    ppqposOut: *mut f64,
                    msgOut: *mut ::std::os::raw::c_char,
                    msgOut_sz: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12MIDI_GetGridE"]
            pub static mut MIDI_GetGrid: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    swingOutOptional: *mut f64,
                    noteLenOutOptional: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12MIDI_GetHashE"]
            pub static mut MIDI_GetHash: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    notesonly: bool,
                    hashOut: *mut ::std::os::raw::c_char,
                    hashOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12MIDI_GetNoteE"]
            pub static mut MIDI_GetNote: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    noteidx: ::std::os::raw::c_int,
                    selectedOut: *mut bool,
                    mutedOut: *mut bool,
                    startppqposOut: *mut f64,
                    endppqposOut: *mut f64,
                    chanOut: *mut ::std::os::raw::c_int,
                    pitchOut: *mut ::std::os::raw::c_int,
                    velOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27MIDI_GetPPQPos_EndOfMeasureE"]
            pub static mut MIDI_GetPPQPos_EndOfMeasure: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, ppqpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29MIDI_GetPPQPos_StartOfMeasureE"]
            pub static mut MIDI_GetPPQPos_StartOfMeasure: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, ppqpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24MIDI_GetPPQPosFromProjQNE"]
            pub static mut MIDI_GetPPQPosFromProjQN: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, projqn: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26MIDI_GetPPQPosFromProjTimeE"]
            pub static mut MIDI_GetPPQPosFromProjTime: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, projtime: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24MIDI_GetProjQNFromPPQPosE"]
            pub static mut MIDI_GetProjQNFromPPQPos: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, ppqpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26MIDI_GetProjTimeFromPPQPosE"]
            pub static mut MIDI_GetProjTimeFromPPQPos: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, ppqpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24MIDI_GetRecentInputEventE"]
            pub static mut MIDI_GetRecentInputEvent: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: *mut ::std::os::raw::c_int,
                    tsOut: *mut ::std::os::raw::c_int,
                    devIdxOut: *mut ::std::os::raw::c_int,
                    projPosOut: *mut f64,
                    projLoopCntOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13MIDI_GetScaleE"]
            pub static mut MIDI_GetScale: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    rootOut: *mut ::std::os::raw::c_int,
                    scaleOut: *mut ::std::os::raw::c_int,
                    nameOut: *mut ::std::os::raw::c_char,
                    nameOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDI_GetTextSysexEvtE"]
            pub static mut MIDI_GetTextSysexEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    textsyxevtidx: ::std::os::raw::c_int,
                    selectedOutOptional: *mut bool,
                    mutedOutOptional: *mut bool,
                    ppqposOutOptional: *mut f64,
                    typeOutOptional: *mut ::std::os::raw::c_int,
                    msgOptional: *mut ::std::os::raw::c_char,
                    msgOptional_sz: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17MIDI_GetTrackHashE"]
            pub static mut MIDI_GetTrackHash: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    notesonly: bool,
                    hashOut: *mut ::std::os::raw::c_char,
                    hashOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9midi_initE"]
            pub static mut midi_init: ::std::option::Option<
                unsafe extern "C" fn(
                    force_reinit_input: ::std::os::raw::c_int,
                    force_reinit_output: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13MIDI_InsertCCE"]
            pub static mut MIDI_InsertCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    selected: bool,
                    muted: bool,
                    ppqpos: f64,
                    chanmsg: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                    msg2: ::std::os::raw::c_int,
                    msg3: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_InsertEvtE"]
            pub static mut MIDI_InsertEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    selected: bool,
                    muted: bool,
                    ppqpos: f64,
                    bytestr: *const ::std::os::raw::c_char,
                    bytestr_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_InsertNoteE"]
            pub static mut MIDI_InsertNote: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    selected: bool,
                    muted: bool,
                    startppqpos: f64,
                    endppqpos: f64,
                    chan: ::std::os::raw::c_int,
                    pitch: ::std::os::raw::c_int,
                    vel: ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23MIDI_InsertTextSysexEvtE"]
            pub static mut MIDI_InsertTextSysexEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    selected: bool,
                    muted: bool,
                    ppqpos: f64,
                    type_: ::std::os::raw::c_int,
                    bytestr: *const ::std::os::raw::c_char,
                    bytestr_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19MIDI_RefreshEditorsE"]
            pub static mut MIDI_RefreshEditors:
                ::std::option::Option<unsafe extern "C" fn(tk: *mut root::MediaItem_Take)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11midi_reinitE"]
            pub static mut midi_reinit: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_SelectAllE"]
            pub static mut MIDI_SelectAll: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, select: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_SetAllEvtsE"]
            pub static mut MIDI_SetAllEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    buf: *const ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10MIDI_SetCCE"]
            pub static mut MIDI_SetCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                    selectedInOptional: *const bool,
                    mutedInOptional: *const bool,
                    ppqposInOptional: *const f64,
                    chanmsgInOptional: *const ::std::os::raw::c_int,
                    chanInOptional: *const ::std::os::raw::c_int,
                    msg2InOptional: *const ::std::os::raw::c_int,
                    msg3InOptional: *const ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_SetCCShapeE"]
            pub static mut MIDI_SetCCShape: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                    shape: ::std::os::raw::c_int,
                    beztension: f64,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11MIDI_SetEvtE"]
            pub static mut MIDI_SetEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    evtidx: ::std::os::raw::c_int,
                    selectedInOptional: *const bool,
                    mutedInOptional: *const bool,
                    ppqposInOptional: *const f64,
                    msgOptional: *const ::std::os::raw::c_char,
                    msgOptional_sz: ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19MIDI_SetItemExtentsE"]
            pub static mut MIDI_SetItemExtents: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem, startQN: f64, endQN: f64) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12MIDI_SetNoteE"]
            pub static mut MIDI_SetNote: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    noteidx: ::std::os::raw::c_int,
                    selectedInOptional: *const bool,
                    mutedInOptional: *const bool,
                    startppqposInOptional: *const f64,
                    endppqposInOptional: *const f64,
                    chanInOptional: *const ::std::os::raw::c_int,
                    pitchInOptional: *const ::std::os::raw::c_int,
                    velInOptional: *const ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDI_SetTextSysexEvtE"]
            pub static mut MIDI_SetTextSysexEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    textsyxevtidx: ::std::os::raw::c_int,
                    selectedInOptional: *const bool,
                    mutedInOptional: *const bool,
                    ppqposInOptional: *const f64,
                    typeInOptional: *const ::std::os::raw::c_int,
                    msgOptional: *const ::std::os::raw::c_char,
                    msgOptional_sz: ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9MIDI_SortE"]
            pub static mut MIDI_Sort:
                ::std::option::Option<unsafe extern "C" fn(take: *mut root::MediaItem_Take)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDIEditor_EnumTakesE"]
            pub static mut MIDIEditor_EnumTakes: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    takeindex: ::std::os::raw::c_int,
                    editable_only: bool,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDIEditor_GetActiveE"]
            pub static mut MIDIEditor_GetActive:
                ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18MIDIEditor_GetModeE"]
            pub static mut MIDIEditor_GetMode: ::std::option::Option<
                unsafe extern "C" fn(midieditor: root::HWND) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25MIDIEditor_GetSetting_intE"]
            pub static mut MIDIEditor_GetSetting_int: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    setting_desc: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25MIDIEditor_GetSetting_strE"]
            pub static mut MIDIEditor_GetSetting_str: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    setting_desc: *const ::std::os::raw::c_char,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18MIDIEditor_GetTakeE"]
            pub static mut MIDIEditor_GetTake: ::std::option::Option<
                unsafe extern "C" fn(midieditor: root::HWND) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions32MIDIEditor_LastFocused_OnCommandE"]
            pub static mut MIDIEditor_LastFocused_OnCommand: ::std::option::Option<
                unsafe extern "C" fn(
                    command_id: ::std::os::raw::c_int,
                    islistviewcommand: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDIEditor_OnCommandE"]
            pub static mut MIDIEditor_OnCommand: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    command_id: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25MIDIEditor_SetSetting_intE"]
            pub static mut MIDIEditor_SetSetting_int: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    setting_desc: *const ::std::os::raw::c_char,
                    setting: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23MIDIEditorFlagsForTrackE"]
            pub static mut MIDIEditorFlagsForTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    pitchwheelrangeInOut: *mut ::std::os::raw::c_int,
                    flagsInOut: *mut ::std::os::raw::c_int,
                    is_set: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8mkpanstrE"]
            pub static mut mkpanstr: ::std::option::Option<
                unsafe extern "C" fn(strNeed64: *mut ::std::os::raw::c_char, pan: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11mkvolpanstrE"]
            pub static mut mkvolpanstr: ::std::option::Option<
                unsafe extern "C" fn(strNeed64: *mut ::std::os::raw::c_char, vol: f64, pan: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8mkvolstrE"]
            pub static mut mkvolstr: ::std::option::Option<
                unsafe extern "C" fn(strNeed64: *mut ::std::os::raw::c_char, vol: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MoveEditCursorE"]
            pub static mut MoveEditCursor:
                ::std::option::Option<unsafe extern "C" fn(adjamt: f64, dosel: bool)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MoveMediaItemToTrackE"]
            pub static mut MoveMediaItemToTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    desttr: *mut root::MediaTrack,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13MuteAllTracksE"]
            pub static mut MuteAllTracks: ::std::option::Option<unsafe extern "C" fn(mute: bool)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14my_getViewportE"]
            pub static mut my_getViewport: ::std::option::Option<
                unsafe extern "C" fn(r: *mut root::RECT, sr: *const root::RECT, wantWorkArea: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18NamedCommandLookupE"]
            pub static mut NamedCommandLookup: ::std::option::Option<
                unsafe extern "C" fn(
                    command_name: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13OnPauseButtonE"]
            pub static mut OnPauseButton: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15OnPauseButtonExE"]
            pub static mut OnPauseButtonEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12OnPlayButtonE"]
            pub static mut OnPlayButton: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14OnPlayButtonExE"]
            pub static mut OnPlayButtonEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12OnStopButtonE"]
            pub static mut OnStopButton: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14OnStopButtonExE"]
            pub static mut OnStopButtonEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18OpenColorThemeFileE"]
            pub static mut OpenColorThemeFile: ::std::option::Option<
                unsafe extern "C" fn(fn_: *const ::std::os::raw::c_char) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17OpenMediaExplorerE"]
            pub static mut OpenMediaExplorer: ::std::option::Option<
                unsafe extern "C" fn(
                    mediafn: *const ::std::os::raw::c_char,
                    play: bool,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21OscLocalMessageToHostE"]
            pub static mut OscLocalMessageToHost: ::std::option::Option<
                unsafe extern "C" fn(
                    message: *const ::std::os::raw::c_char,
                    valueInOptional: *const f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13parse_timestrE"]
            pub static mut parse_timestr: ::std::option::Option<
                unsafe extern "C" fn(buf: *const ::std::os::raw::c_char) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17parse_timestr_lenE"]
            pub static mut parse_timestr_len: ::std::option::Option<
                unsafe extern "C" fn(
                    buf: *const ::std::os::raw::c_char,
                    offset: f64,
                    modeoverride: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17parse_timestr_posE"]
            pub static mut parse_timestr_pos: ::std::option::Option<
                unsafe extern "C" fn(
                    buf: *const ::std::os::raw::c_char,
                    modeoverride: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11parsepanstrE"]
            pub static mut parsepanstr: ::std::option::Option<
                unsafe extern "C" fn(str: *const ::std::os::raw::c_char) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15PCM_Sink_CreateE"]
            pub static mut PCM_Sink_Create: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                    srate: ::std::os::raw::c_int,
                    buildpeaks: bool,
                ) -> *mut root::PCM_sink,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17PCM_Sink_CreateExE"]
            pub static mut PCM_Sink_CreateEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    filename: *const ::std::os::raw::c_char,
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                    srate: ::std::os::raw::c_int,
                    buildpeaks: bool,
                ) -> *mut root::PCM_sink,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23PCM_Sink_CreateMIDIFileE"]
            pub static mut PCM_Sink_CreateMIDIFile: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    bpm: f64,
                    div: ::std::os::raw::c_int,
                ) -> *mut root::PCM_sink,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25PCM_Sink_CreateMIDIFileExE"]
            pub static mut PCM_Sink_CreateMIDIFileEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    filename: *const ::std::os::raw::c_char,
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    bpm: f64,
                    div: ::std::os::raw::c_int,
                ) -> *mut root::PCM_sink,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13PCM_Sink_EnumE"]
            pub static mut PCM_Sink_Enum: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    descstrOut: *mut *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21PCM_Sink_GetExtensionE"]
            pub static mut PCM_Sink_GetExtension: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *const ::std::os::raw::c_char,
                    data_sz: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19PCM_Sink_ShowConfigE"]
            pub static mut PCM_Sink_ShowConfig: ::std::option::Option<
                unsafe extern "C" fn(
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    hwndParent: root::HWND,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21PCM_Source_BuildPeaksE"]
            pub static mut PCM_Source_BuildPeaks: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    mode: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25PCM_Source_CreateFromFileE"]
            pub static mut PCM_Source_CreateFromFile: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                ) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27PCM_Source_CreateFromFileExE"]
            pub static mut PCM_Source_CreateFromFileEx: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                    forcenoMidiImp: bool,
                ) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27PCM_Source_CreateFromSimpleE"]
            pub static mut PCM_Source_CreateFromSimple: ::std::option::Option<
                unsafe extern "C" fn(
                    dec: *mut root::ISimpleMediaDecoder,
                    fn_: *const ::std::os::raw::c_char,
                ) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25PCM_Source_CreateFromTypeE"]
            pub static mut PCM_Source_CreateFromType: ::std::option::Option<
                unsafe extern "C" fn(
                    sourcetype: *const ::std::os::raw::c_char,
                ) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18PCM_Source_DestroyE"]
            pub static mut PCM_Source_Destroy:
                ::std::option::Option<unsafe extern "C" fn(src: *mut root::PCM_source)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19PCM_Source_GetPeaksE"]
            pub static mut PCM_Source_GetPeaks: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    peakrate: f64,
                    starttime: f64,
                    numchannels: ::std::os::raw::c_int,
                    numsamplesperchannel: ::std::os::raw::c_int,
                    want_extra_type: ::std::os::raw::c_int,
                    buf: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25PCM_Source_GetSectionInfoE"]
            pub static mut PCM_Source_GetSectionInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    offsOut: *mut f64,
                    lenOut: *mut f64,
                    revOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16PeakBuild_CreateE"]
            pub static mut PeakBuild_Create: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    fn_: *const ::std::os::raw::c_char,
                    srate: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                ) -> *mut root::REAPER_PeakBuild_Interface,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18PeakBuild_CreateExE"]
            pub static mut PeakBuild_CreateEx: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    fn_: *const ::std::os::raw::c_char,
                    srate: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> *mut root::REAPER_PeakBuild_Interface,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14PeakGet_CreateE"]
            pub static mut PeakGet_Create: ::std::option::Option<
                unsafe extern "C" fn(
                    fn_: *const ::std::os::raw::c_char,
                    srate: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                ) -> *mut root::REAPER_PeakGet_Interface,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21PitchShiftSubModeMenuE"]
            pub static mut PitchShiftSubModeMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    mode: ::std::os::raw::c_int,
                    submode_sel: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11PlayPreviewE"]
            pub static mut PlayPreview: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13PlayPreviewExE"]
            pub static mut PlayPreviewEx: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                    bufflags: ::std::os::raw::c_int,
                    measure_align: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16PlayTrackPreviewE"]
            pub static mut PlayTrackPreview: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17PlayTrackPreview2E"]
            pub static mut PlayTrackPreview2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19PlayTrackPreview2ExE"]
            pub static mut PlayTrackPreview2Ex: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    preview: *mut root::preview_register_t,
                    flags: ::std::os::raw::c_int,
                    measure_align: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13plugin_getapiE"]
            pub static mut plugin_getapi: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20plugin_getFilterListE"]
            pub static mut plugin_getFilterList:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions37plugin_getImportableProjectFilterListE"]
            pub static mut plugin_getImportableProjectFilterList:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15plugin_registerE"]
            pub static mut plugin_register: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    infostruct: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22PluginWantsAlwaysRunFxE"]
            pub static mut PluginWantsAlwaysRunFx:
                ::std::option::Option<unsafe extern "C" fn(amt: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16PreventUIRefreshE"]
            pub static mut PreventUIRefresh:
                ::std::option::Option<unsafe extern "C" fn(prevent_count: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22projectconfig_var_addrE"]
            pub static mut projectconfig_var_addr: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    idx: ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25projectconfig_var_getoffsE"]
            pub static mut projectconfig_var_getoffs: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    szOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15PromptForActionE"]
            pub static mut PromptForAction: ::std::option::Option<
                unsafe extern "C" fn(
                    session_mode: ::std::os::raw::c_int,
                    init_id: ::std::os::raw::c_int,
                    section_id: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17realloc_cmd_clearE"]
            pub static mut realloc_cmd_clear:
                ::std::option::Option<unsafe extern "C" fn(tok: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15realloc_cmd_ptrE"]
            pub static mut realloc_cmd_ptr: ::std::option::Option<
                unsafe extern "C" fn(
                    ptr: *mut *mut ::std::os::raw::c_char,
                    ptr_size: *mut ::std::os::raw::c_int,
                    new_size: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24realloc_cmd_register_bufE"]
            pub static mut realloc_cmd_register_buf: ::std::option::Option<
                unsafe extern "C" fn(
                    ptr: *mut *mut ::std::os::raw::c_char,
                    ptr_size: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22ReaperGetPitchShiftAPIE"]
            pub static mut ReaperGetPitchShiftAPI: ::std::option::Option<
                unsafe extern "C" fn(
                    version: ::std::os::raw::c_int,
                ) -> *mut root::IReaperPitchShift,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ReaScriptErrorE"]
            pub static mut ReaScriptError:
                ::std::option::Option<unsafe extern "C" fn(errmsg: *const ::std::os::raw::c_char)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24RecursiveCreateDirectoryE"]
            pub static mut RecursiveCreateDirectory: ::std::option::Option<
                unsafe extern "C" fn(
                    path: *const ::std::os::raw::c_char,
                    ignored: usize,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17reduce_open_filesE"]
            pub static mut reduce_open_files: ::std::option::Option<
                unsafe extern "C" fn(flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14RefreshToolbarE"]
            pub static mut RefreshToolbar:
                ::std::option::Option<unsafe extern "C" fn(command_id: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15RefreshToolbar2E"]
            pub static mut RefreshToolbar2: ::std::option::Option<
                unsafe extern "C" fn(
                    section_id: ::std::os::raw::c_int,
                    command_id: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11relative_fnE"]
            pub static mut relative_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    in_: *const ::std::os::raw::c_char,
                    out: *mut ::std::os::raw::c_char,
                    out_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15RemoveTrackSendE"]
            pub static mut RemoveTrackSend: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17RenderFileSectionE"]
            pub static mut RenderFileSection: ::std::option::Option<
                unsafe extern "C" fn(
                    source_filename: *const ::std::os::raw::c_char,
                    target_filename: *const ::std::os::raw::c_char,
                    start_percent: f64,
                    end_percent: f64,
                    playrate: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ReorderSelectedTracksE"]
            pub static mut ReorderSelectedTracks: ::std::option::Option<
                unsafe extern "C" fn(
                    beforeTrackIdx: ::std::os::raw::c_int,
                    makePrevFolder: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18Resample_EnumModesE"]
            pub static mut Resample_EnumModes: ::std::option::Option<
                unsafe extern "C" fn(mode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Resampler_CreateE"]
            pub static mut Resampler_Create: ::std::option::Option<
                unsafe extern "C" fn() -> *mut root::REAPER_Resample_Interface,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10resolve_fnE"]
            pub static mut resolve_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    in_: *const ::std::os::raw::c_char,
                    out: *mut ::std::os::raw::c_char,
                    out_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11resolve_fn2E"]
            pub static mut resolve_fn2: ::std::option::Option<
                unsafe extern "C" fn(
                    in_: *const ::std::os::raw::c_char,
                    out: *mut ::std::os::raw::c_char,
                    out_sz: ::std::os::raw::c_int,
                    checkSubDirOptional: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20ResolveRenderPatternE"]
            pub static mut ResolveRenderPattern: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    path: *const ::std::os::raw::c_char,
                    pattern: *const ::std::os::raw::c_char,
                    targets: *mut ::std::os::raw::c_char,
                    targets_sz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25ReverseNamedCommandLookupE"]
            pub static mut ReverseNamedCommandLookup: ::std::option::Option<
                unsafe extern "C" fn(
                    command_id: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ScaleFromEnvelopeModeE"]
            pub static mut ScaleFromEnvelopeMode: ::std::option::Option<
                unsafe extern "C" fn(scaling_mode: ::std::os::raw::c_int, val: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19ScaleToEnvelopeModeE"]
            pub static mut ScaleToEnvelopeMode: ::std::option::Option<
                unsafe extern "C" fn(scaling_mode: ::std::os::raw::c_int, val: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18screenset_registerE"]
            pub static mut screenset_register: ::std::option::Option<
                unsafe extern "C" fn(
                    id: *mut ::std::os::raw::c_char,
                    callbackFunc: *mut ::std::os::raw::c_void,
                    param: *mut ::std::os::raw::c_void,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21screenset_registerNewE"]
            pub static mut screenset_registerNew: ::std::option::Option<
                unsafe extern "C" fn(
                    id: *mut ::std::os::raw::c_char,
                    callbackFunc: root::screensetNewCallbackFunc,
                    param: *mut ::std::os::raw::c_void,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20screenset_unregisterE"]
            pub static mut screenset_unregister:
                ::std::option::Option<unsafe extern "C" fn(id: *mut ::std::os::raw::c_char)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27screenset_unregisterByParamE"]
            pub static mut screenset_unregisterByParam:
                ::std::option::Option<unsafe extern "C" fn(param: *mut ::std::os::raw::c_void)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25screenset_updateLastFocusE"]
            pub static mut screenset_updateLastFocus:
                ::std::option::Option<unsafe extern "C" fn(prevWin: root::HWND)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19SectionFromUniqueIDE"]
            pub static mut SectionFromUniqueID: ::std::option::Option<
                unsafe extern "C" fn(uniqueID: ::std::os::raw::c_int) -> *mut root::KbdSectionInfo,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19SelectAllMediaItemsE"]
            pub static mut SelectAllMediaItems: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, selected: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SelectProjectInstanceE"]
            pub static mut SelectProjectInstance:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19SendLocalOscMessageE"]
            pub static mut SendLocalOscMessage: ::std::option::Option<
                unsafe extern "C" fn(
                    local_osc_handler: *mut ::std::os::raw::c_void,
                    msg: *const ::std::os::raw::c_char,
                    msglen: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25SendMIDIMessageToHardwareE"]
            pub static mut SendMIDIMessageToHardware: ::std::option::Option<
                unsafe extern "C" fn(
                    output: ::std::os::raw::c_int,
                    msg: *const ::std::os::raw::c_char,
                    msg_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetActiveTakeE"]
            pub static mut SetActiveTake:
                ::std::option::Option<unsafe extern "C" fn(take: *mut root::MediaItem_Take)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetAutomationModeE"]
            pub static mut SetAutomationMode: ::std::option::Option<
                unsafe extern "C" fn(mode: ::std::os::raw::c_int, onlySel: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetCurrentBPME"]
            pub static mut SetCurrentBPM: ::std::option::Option<
                unsafe extern "C" fn(__proj: *mut root::ReaProject, bpm: f64, wantUndo: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetCursorContextE"]
            pub static mut SetCursorContext: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    envInOptional: *mut root::TrackEnvelope,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetEditCurPosE"]
            pub static mut SetEditCurPos: ::std::option::Option<
                unsafe extern "C" fn(time: f64, moveview: bool, seekplay: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SetEditCurPos2E"]
            pub static mut SetEditCurPos2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    time: f64,
                    moveview: bool,
                    seekplay: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetEnvelopePointE"]
            pub static mut SetEnvelopePoint: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    ptidx: ::std::os::raw::c_int,
                    timeInOptional: *mut f64,
                    valueInOptional: *mut f64,
                    shapeInOptional: *mut ::std::os::raw::c_int,
                    tensionInOptional: *mut f64,
                    selectedInOptional: *mut bool,
                    noSortInOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetEnvelopePointExE"]
            pub static mut SetEnvelopePointEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    ptidx: ::std::os::raw::c_int,
                    timeInOptional: *mut f64,
                    valueInOptional: *mut f64,
                    shapeInOptional: *mut ::std::os::raw::c_int,
                    tensionInOptional: *mut f64,
                    selectedInOptional: *mut bool,
                    noSortInOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SetEnvelopeStateChunkE"]
            pub static mut SetEnvelopeStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    str: *const ::std::os::raw::c_char,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11SetExtStateE"]
            pub static mut SetExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                    persist: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27SetGlobalAutomationOverrideE"]
            pub static mut SetGlobalAutomationOverride:
                ::std::option::Option<unsafe extern "C" fn(mode: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetItemStateChunkE"]
            pub static mut SetItemStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    str: *const ::std::os::raw::c_char,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24SetMasterTrackVisibilityE"]
            pub static mut SetMasterTrackVisibility: ::std::option::Option<
                unsafe extern "C" fn(flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetMediaItemInfo_ValueE"]
            pub static mut SetMediaItemInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    parmname: *const ::std::os::raw::c_char,
                    newvalue: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetMediaItemLengthE"]
            pub static mut SetMediaItemLength: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    length: f64,
                    refreshUI: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetMediaItemPositionE"]
            pub static mut SetMediaItemPosition: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    position: f64,
                    refreshUI: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetMediaItemSelectedE"]
            pub static mut SetMediaItemSelected: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem, selected: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23SetMediaItemTake_SourceE"]
            pub static mut SetMediaItemTake_Source: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    source: *mut root::PCM_source,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26SetMediaItemTakeInfo_ValueE"]
            pub static mut SetMediaItemTakeInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    parmname: *const ::std::os::raw::c_char,
                    newvalue: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23SetMediaTrackInfo_ValueE"]
            pub static mut SetMediaTrackInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    parmname: *const ::std::os::raw::c_char,
                    newvalue: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetMIDIEditorGridE"]
            pub static mut SetMIDIEditorGrid: ::std::option::Option<
                unsafe extern "C" fn(project: *mut root::ReaProject, division: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SetMixerScrollE"]
            pub static mut SetMixerScroll: ::std::option::Option<
                unsafe extern "C" fn(leftmosttrack: *mut root::MediaTrack) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetMouseModifierE"]
            pub static mut SetMouseModifier: ::std::option::Option<
                unsafe extern "C" fn(
                    context: *const ::std::os::raw::c_char,
                    modifier_flag: ::std::os::raw::c_int,
                    action: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetOnlyTrackSelectedE"]
            pub static mut SetOnlyTrackSelected:
                ::std::option::Option<unsafe extern "C" fn(track: *mut root::MediaTrack)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SetProjectGridE"]
            pub static mut SetProjectGrid: ::std::option::Option<
                unsafe extern "C" fn(project: *mut root::ReaProject, division: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetProjectMarkerE"]
            pub static mut SetProjectMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetProjectMarker2E"]
            pub static mut SetProjectMarker2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetProjectMarker3E"]
            pub static mut SetProjectMarker3: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetProjectMarker4E"]
            pub static mut SetProjectMarker4: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23SetProjectMarkerByIndexE"]
            pub static mut SetProjectMarkerByIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnidx: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    IDnumber: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24SetProjectMarkerByIndex2E"]
            pub static mut SetProjectMarkerByIndex2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnidx: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    IDnumber: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15SetProjExtStateE"]
            pub static mut SetProjExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    extname: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SetRegionRenderMatrixE"]
            pub static mut SetRegionRenderMatrix: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    regionindex: ::std::os::raw::c_int,
                    track: *mut root::MediaTrack,
                    flag: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetRenderLastErrorE"]
            pub static mut SetRenderLastError: ::std::option::Option<
                unsafe extern "C" fn(errorstr: *const ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetTakeMarkerE"]
            pub static mut SetTakeMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    nameIn: *const ::std::os::raw::c_char,
                    srcposInOptional: *mut f64,
                    colorInOptional: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetTakeStretchMarkerE"]
            pub static mut SetTakeStretchMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    pos: f64,
                    srcposInOptional: *const f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25SetTakeStretchMarkerSlopeE"]
            pub static mut SetTakeStretchMarkerSlope: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    slope: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SetTempoTimeSigMarkerE"]
            pub static mut SetTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    ptidx: ::std::os::raw::c_int,
                    timepos: f64,
                    measurepos: ::std::os::raw::c_int,
                    beatpos: f64,
                    bpm: f64,
                    timesig_num: ::std::os::raw::c_int,
                    timesig_denom: ::std::os::raw::c_int,
                    lineartempo: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetThemeColorE"]
            pub static mut SetThemeColor: ::std::option::Option<
                unsafe extern "C" fn(
                    ini_key: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                    flagsOptional: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SetToggleCommandStateE"]
            pub static mut SetToggleCommandState: ::std::option::Option<
                unsafe extern "C" fn(
                    section_id: ::std::os::raw::c_int,
                    command_id: ::std::os::raw::c_int,
                    state: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetTrackAutomationModeE"]
            pub static mut SetTrackAutomationMode: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack, mode: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetTrackColorE"]
            pub static mut SetTrackColor: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, color: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetTrackMIDILyricsE"]
            pub static mut SetTrackMIDILyrics: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    flag: ::std::os::raw::c_int,
                    str: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetTrackMIDINoteNameE"]
            pub static mut SetTrackMIDINoteName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: ::std::os::raw::c_int,
                    pitch: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetTrackMIDINoteNameExE"]
            pub static mut SetTrackMIDINoteNameEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    pitch: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetTrackSelectedE"]
            pub static mut SetTrackSelected: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, selected: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetTrackSendInfo_ValueE"]
            pub static mut SetTrackSendInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    newvalue: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetTrackSendUIPanE"]
            pub static mut SetTrackSendUIPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_idx: ::std::os::raw::c_int,
                    pan: f64,
                    isend: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetTrackSendUIVolE"]
            pub static mut SetTrackSendUIVol: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_idx: ::std::os::raw::c_int,
                    vol: f64,
                    isend: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetTrackStateChunkE"]
            pub static mut SetTrackStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    str: *const ::std::os::raw::c_char,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetTrackUIInputMonitorE"]
            pub static mut SetTrackUIInputMonitor: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    monitor: ::std::os::raw::c_int,
                    igngroupflags: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SetTrackUIMuteE"]
            pub static mut SetTrackUIMute: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    mute: ::std::os::raw::c_int,
                    igngroupflags: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetTrackUIPanE"]
            pub static mut SetTrackUIPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    pan: f64,
                    relative: bool,
                    done: bool,
                    igngroupflags: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetTrackUIPolarityE"]
            pub static mut SetTrackUIPolarity: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    polarity: ::std::os::raw::c_int,
                    igngroupflags: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetTrackUIRecArmE"]
            pub static mut SetTrackUIRecArm: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    recarm: ::std::os::raw::c_int,
                    igngroupflags: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SetTrackUISoloE"]
            pub static mut SetTrackUISolo: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    solo: ::std::os::raw::c_int,
                    igngroupflags: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetTrackUIVolumeE"]
            pub static mut SetTrackUIVolume: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    volume: f64,
                    relative: bool,
                    done: bool,
                    igngroupflags: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15SetTrackUIWidthE"]
            pub static mut SetTrackUIWidth: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    width: f64,
                    relative: bool,
                    done: bool,
                    igngroupflags: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ShowActionListE"]
            pub static mut ShowActionList: ::std::option::Option<
                unsafe extern "C" fn(section: *mut root::KbdSectionInfo, callerWnd: root::HWND),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ShowConsoleMsgE"]
            pub static mut ShowConsoleMsg:
                ::std::option::Option<unsafe extern "C" fn(msg: *const ::std::os::raw::c_char)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ShowMessageBoxE"]
            pub static mut ShowMessageBox: ::std::option::Option<
                unsafe extern "C" fn(
                    msg: *const ::std::os::raw::c_char,
                    title: *const ::std::os::raw::c_char,
                    type_: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13ShowPopupMenuE"]
            pub static mut ShowPopupMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    hwndParentOptional: root::HWND,
                    ctxOptional: *mut ::std::os::raw::c_void,
                    ctx2Optional: ::std::os::raw::c_int,
                    ctx3Optional: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9SLIDER2DBE"]
            pub static mut SLIDER2DB: ::std::option::Option<unsafe extern "C" fn(y: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10SnapToGridE"]
            pub static mut SnapToGrid: ::std::option::Option<
                unsafe extern "C" fn(project: *mut root::ReaProject, time_pos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SoloAllTracksE"]
            pub static mut SoloAllTracks:
                ::std::option::Option<unsafe extern "C" fn(solo: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13Splash_GetWndE"]
            pub static mut Splash_GetWnd:
                ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SplitMediaItemE"]
            pub static mut SplitMediaItem: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    position: f64,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11StopPreviewE"]
            pub static mut StopPreview: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16StopTrackPreviewE"]
            pub static mut StopTrackPreview: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17StopTrackPreview2E"]
            pub static mut StopTrackPreview2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12stringToGuidE"]
            pub static mut stringToGuid: ::std::option::Option<
                unsafe extern "C" fn(str: *const ::std::os::raw::c_char, g: *mut root::GUID),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16StuffMIDIMessageE"]
            pub static mut StuffMIDIMessage: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    msg1: ::std::os::raw::c_int,
                    msg2: ::std::os::raw::c_int,
                    msg3: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_AddByNameE"]
            pub static mut TakeFX_AddByName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fxname: *const ::std::os::raw::c_char,
                    instantiate: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_CopyToTakeE"]
            pub static mut TakeFX_CopyToTake: ::std::option::Option<
                unsafe extern "C" fn(
                    src_take: *mut root::MediaItem_Take,
                    src_fx: ::std::os::raw::c_int,
                    dest_take: *mut root::MediaItem_Take,
                    dest_fx: ::std::os::raw::c_int,
                    is_move: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TakeFX_CopyToTrackE"]
            pub static mut TakeFX_CopyToTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    src_take: *mut root::MediaItem_Take,
                    src_fx: ::std::os::raw::c_int,
                    dest_track: *mut root::MediaTrack,
                    dest_fx: ::std::os::raw::c_int,
                    is_move: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13TakeFX_DeleteE"]
            pub static mut TakeFX_Delete: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TakeFX_EndParamEditE"]
            pub static mut TakeFX_EndParamEdit: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TakeFX_FormatParamValueE"]
            pub static mut TakeFX_FormatParamValue: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    val: f64,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions33TakeFX_FormatParamValueNormalizedE"]
            pub static mut TakeFX_FormatParamValueNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    value: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TakeFX_GetChainVisibleE"]
            pub static mut TakeFX_GetChainVisible: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TakeFX_GetCountE"]
            pub static mut TakeFX_GetCount: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_GetEnabledE"]
            pub static mut TakeFX_GetEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TakeFX_GetEnvelopeE"]
            pub static mut TakeFX_GetEnvelope: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fxindex: ::std::os::raw::c_int,
                    parameterindex: ::std::os::raw::c_int,
                    create: bool,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TakeFX_GetFloatingWindowE"]
            pub static mut TakeFX_GetFloatingWindow: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    index: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29TakeFX_GetFormattedParamValueE"]
            pub static mut TakeFX_GetFormattedParamValue: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_GetFXGUIDE"]
            pub static mut TakeFX_GetFXGUID: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> *mut root::GUID,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_GetFXNameE"]
            pub static mut TakeFX_GetFXName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_GetIOSizeE"]
            pub static mut TakeFX_GetIOSize: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    inputPinsOut: *mut ::std::os::raw::c_int,
                    outputPinsOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TakeFX_GetNamedConfigParmE"]
            pub static mut TakeFX_GetNamedConfigParm: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    bufOutNeedBig: *mut ::std::os::raw::c_char,
                    bufOutNeedBig_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TakeFX_GetNumParamsE"]
            pub static mut TakeFX_GetNumParams: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_GetOfflineE"]
            pub static mut TakeFX_GetOffline: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14TakeFX_GetOpenE"]
            pub static mut TakeFX_GetOpen: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TakeFX_GetParamE"]
            pub static mut TakeFX_GetParam: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    minvalOut: *mut f64,
                    maxvalOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28TakeFX_GetParameterStepSizesE"]
            pub static mut TakeFX_GetParameterStepSizes: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    stepOut: *mut f64,
                    smallstepOut: *mut f64,
                    largestepOut: *mut f64,
                    istoggleOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_GetParamExE"]
            pub static mut TakeFX_GetParamEx: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    minvalOut: *mut f64,
                    maxvalOut: *mut f64,
                    midvalOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TakeFX_GetParamFromIdentE"]
            pub static mut TakeFX_GetParamFromIdent: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    ident_str: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TakeFX_GetParamIdentE"]
            pub static mut TakeFX_GetParamIdent: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TakeFX_GetParamNameE"]
            pub static mut TakeFX_GetParamName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TakeFX_GetParamNormalizedE"]
            pub static mut TakeFX_GetParamNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TakeFX_GetPinMappingsE"]
            pub static mut TakeFX_GetPinMappings: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    isoutput: ::std::os::raw::c_int,
                    pin: ::std::os::raw::c_int,
                    high32Out: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_GetPresetE"]
            pub static mut TakeFX_GetPreset: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    presetnameOut: *mut ::std::os::raw::c_char,
                    presetnameOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TakeFX_GetPresetIndexE"]
            pub static mut TakeFX_GetPresetIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    numberOfPresetsOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28TakeFX_GetUserPresetFilenameE"]
            pub static mut TakeFX_GetUserPresetFilename: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    fnOut: *mut ::std::os::raw::c_char,
                    fnOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TakeFX_NavigatePresetsE"]
            pub static mut TakeFX_NavigatePresets: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    presetmove: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_SetEnabledE"]
            pub static mut TakeFX_SetEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    enabled: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TakeFX_SetNamedConfigParmE"]
            pub static mut TakeFX_SetNamedConfigParm: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_SetOfflineE"]
            pub static mut TakeFX_SetOffline: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    offline: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14TakeFX_SetOpenE"]
            pub static mut TakeFX_SetOpen: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    open: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TakeFX_SetParamE"]
            pub static mut TakeFX_SetParam: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    val: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TakeFX_SetParamNormalizedE"]
            pub static mut TakeFX_SetParamNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    value: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TakeFX_SetPinMappingsE"]
            pub static mut TakeFX_SetPinMappings: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    isoutput: ::std::os::raw::c_int,
                    pin: ::std::os::raw::c_int,
                    low32bits: ::std::os::raw::c_int,
                    hi32bits: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_SetPresetE"]
            pub static mut TakeFX_SetPreset: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    presetname: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TakeFX_SetPresetByIndexE"]
            pub static mut TakeFX_SetPresetByIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11TakeFX_ShowE"]
            pub static mut TakeFX_Show: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    index: ::std::os::raw::c_int,
                    showFlag: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10TakeIsMIDIE"]
            pub static mut TakeIsMIDI: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ThemeLayout_GetLayoutE"]
            pub static mut ThemeLayout_GetLayout: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    nameOut: *mut ::std::os::raw::c_char,
                    nameOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24ThemeLayout_GetParameterE"]
            pub static mut ThemeLayout_GetParameter: ::std::option::Option<
                unsafe extern "C" fn(
                    wp: ::std::os::raw::c_int,
                    descOutOptional: *mut *const ::std::os::raw::c_char,
                    valueOutOptional: *mut ::std::os::raw::c_int,
                    defValueOutOptional: *mut ::std::os::raw::c_int,
                    minValueOutOptional: *mut ::std::os::raw::c_int,
                    maxValueOutOptional: *mut ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22ThemeLayout_RefreshAllE"]
            pub static mut ThemeLayout_RefreshAll: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ThemeLayout_SetLayoutE"]
            pub static mut ThemeLayout_SetLayout: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    layout: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24ThemeLayout_SetParameterE"]
            pub static mut ThemeLayout_SetParameter: ::std::option::Option<
                unsafe extern "C" fn(
                    wp: ::std::os::raw::c_int,
                    value: ::std::os::raw::c_int,
                    persist: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12time_preciseE"]
            pub static mut time_precise: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap2_beatsToTimeE"]
            pub static mut TimeMap2_beatsToTime: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    tpos: f64,
                    measuresInOptional: *const ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28TimeMap2_GetDividedBpmAtTimeE"]
            pub static mut TimeMap2_GetDividedBpmAtTime: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, time: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TimeMap2_GetNextChangeTimeE"]
            pub static mut TimeMap2_GetNextChangeTime: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, time: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TimeMap2_QNToTimeE"]
            pub static mut TimeMap2_QNToTime: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, qn: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap2_timeToBeatsE"]
            pub static mut TimeMap2_timeToBeats: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    tpos: f64,
                    measuresOutOptional: *mut ::std::os::raw::c_int,
                    cmlOutOptional: *mut ::std::os::raw::c_int,
                    fullbeatsOutOptional: *mut f64,
                    cdenomOutOptional: *mut ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TimeMap2_timeToQNE"]
            pub static mut TimeMap2_timeToQN: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, tpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap_curFrameRateE"]
            pub static mut TimeMap_curFrameRate: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, dropFrameOut: *mut bool) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27TimeMap_GetDividedBpmAtTimeE"]
            pub static mut TimeMap_GetDividedBpmAtTime:
                ::std::option::Option<unsafe extern "C" fn(time: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TimeMap_GetMeasureInfoE"]
            pub static mut TimeMap_GetMeasureInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    measure: ::std::os::raw::c_int,
                    qn_startOut: *mut f64,
                    qn_endOut: *mut f64,
                    timesig_numOut: *mut ::std::os::raw::c_int,
                    timesig_denomOut: *mut ::std::os::raw::c_int,
                    tempoOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27TimeMap_GetMetronomePatternE"]
            pub static mut TimeMap_GetMetronomePattern: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    time: f64,
                    pattern: *mut ::std::os::raw::c_char,
                    pattern_sz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TimeMap_GetTimeSigAtTimeE"]
            pub static mut TimeMap_GetTimeSigAtTime: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    time: f64,
                    timesig_numOut: *mut ::std::os::raw::c_int,
                    timesig_denomOut: *mut ::std::os::raw::c_int,
                    tempoOut: *mut f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap_QNToMeasuresE"]
            pub static mut TimeMap_QNToMeasures: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    qn: f64,
                    qnMeasureStartOutOptional: *mut f64,
                    qnMeasureEndOutOptional: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TimeMap_QNToTimeE"]
            pub static mut TimeMap_QNToTime:
                ::std::option::Option<unsafe extern "C" fn(qn: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap_QNToTime_absE"]
            pub static mut TimeMap_QNToTime_abs: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, qn: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TimeMap_timeToQNE"]
            pub static mut TimeMap_timeToQN:
                ::std::option::Option<unsafe extern "C" fn(tpos: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap_timeToQN_absE"]
            pub static mut TimeMap_timeToQN_abs: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, tpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ToggleTrackSendUIMuteE"]
            pub static mut ToggleTrackSendUIMute: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19Track_GetPeakHoldDBE"]
            pub static mut Track_GetPeakHoldDB: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    channel: ::std::os::raw::c_int,
                    clear: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17Track_GetPeakInfoE"]
            pub static mut Track_GetPeakInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    channel: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TrackCtl_SetToolTipE"]
            pub static mut TrackCtl_SetToolTip: ::std::option::Option<
                unsafe extern "C" fn(
                    fmt: *const ::std::os::raw::c_char,
                    xpos: ::std::os::raw::c_int,
                    ypos: ::std::os::raw::c_int,
                    topmost: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_AddByNameE"]
            pub static mut TrackFX_AddByName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxname: *const ::std::os::raw::c_char,
                    recFX: bool,
                    instantiate: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_CopyToTakeE"]
            pub static mut TrackFX_CopyToTake: ::std::option::Option<
                unsafe extern "C" fn(
                    src_track: *mut root::MediaTrack,
                    src_fx: ::std::os::raw::c_int,
                    dest_take: *mut root::MediaItem_Take,
                    dest_fx: ::std::os::raw::c_int,
                    is_move: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TrackFX_CopyToTrackE"]
            pub static mut TrackFX_CopyToTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    src_track: *mut root::MediaTrack,
                    src_fx: ::std::os::raw::c_int,
                    dest_track: *mut root::MediaTrack,
                    dest_fx: ::std::os::raw::c_int,
                    is_move: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14TrackFX_DeleteE"]
            pub static mut TrackFX_Delete: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TrackFX_EndParamEditE"]
            pub static mut TrackFX_EndParamEdit: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TrackFX_FormatParamValueE"]
            pub static mut TrackFX_FormatParamValue: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    val: f64,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions34TrackFX_FormatParamValueNormalizedE"]
            pub static mut TrackFX_FormatParamValueNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    value: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetByNameE"]
            pub static mut TrackFX_GetByName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxname: *const ::std::os::raw::c_char,
                    instantiate: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TrackFX_GetChainVisibleE"]
            pub static mut TrackFX_GetChainVisible: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TrackFX_GetCountE"]
            pub static mut TrackFX_GetCount: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_GetEnabledE"]
            pub static mut TrackFX_GetEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13TrackFX_GetEQE"]
            pub static mut TrackFX_GetEQ: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    instantiate: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TrackFX_GetEQBandEnabledE"]
            pub static mut TrackFX_GetEQBandEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxidx: ::std::os::raw::c_int,
                    bandtype: ::std::os::raw::c_int,
                    bandidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_GetEQParamE"]
            pub static mut TrackFX_GetEQParam: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxidx: ::std::os::raw::c_int,
                    paramidx: ::std::os::raw::c_int,
                    bandtypeOut: *mut ::std::os::raw::c_int,
                    bandidxOut: *mut ::std::os::raw::c_int,
                    paramtypeOut: *mut ::std::os::raw::c_int,
                    normvalOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TrackFX_GetFloatingWindowE"]
            pub static mut TrackFX_GetFloatingWindow: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    index: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions30TrackFX_GetFormattedParamValueE"]
            pub static mut TrackFX_GetFormattedParamValue: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetFXGUIDE"]
            pub static mut TrackFX_GetFXGUID: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> *mut root::GUID,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetFXNameE"]
            pub static mut TrackFX_GetFXName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TrackFX_GetInstrumentE"]
            pub static mut TrackFX_GetInstrument: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetIOSizeE"]
            pub static mut TrackFX_GetIOSize: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    inputPinsOut: *mut ::std::os::raw::c_int,
                    outputPinsOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_GetNamedConfigParmE"]
            pub static mut TrackFX_GetNamedConfigParm: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    bufOutNeedBig: *mut ::std::os::raw::c_char,
                    bufOutNeedBig_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TrackFX_GetNumParamsE"]
            pub static mut TrackFX_GetNumParams: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_GetOfflineE"]
            pub static mut TrackFX_GetOffline: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TrackFX_GetOpenE"]
            pub static mut TrackFX_GetOpen: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TrackFX_GetParamE"]
            pub static mut TrackFX_GetParam: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    minvalOut: *mut f64,
                    maxvalOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29TrackFX_GetParameterStepSizesE"]
            pub static mut TrackFX_GetParameterStepSizes: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    stepOut: *mut f64,
                    smallstepOut: *mut f64,
                    largestepOut: *mut f64,
                    istoggleOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_GetParamExE"]
            pub static mut TrackFX_GetParamEx: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    minvalOut: *mut f64,
                    maxvalOut: *mut f64,
                    midvalOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TrackFX_GetParamFromIdentE"]
            pub static mut TrackFX_GetParamFromIdent: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    ident_str: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TrackFX_GetParamIdentE"]
            pub static mut TrackFX_GetParamIdent: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TrackFX_GetParamNameE"]
            pub static mut TrackFX_GetParamName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_GetParamNormalizedE"]
            pub static mut TrackFX_GetParamNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TrackFX_GetPinMappingsE"]
            pub static mut TrackFX_GetPinMappings: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    isoutput: ::std::os::raw::c_int,
                    pin: ::std::os::raw::c_int,
                    high32Out: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetPresetE"]
            pub static mut TrackFX_GetPreset: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    presetnameOut: *mut ::std::os::raw::c_char,
                    presetnameOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TrackFX_GetPresetIndexE"]
            pub static mut TrackFX_GetPresetIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    numberOfPresetsOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_GetRecChainVisibleE"]
            pub static mut TrackFX_GetRecChainVisible: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TrackFX_GetRecCountE"]
            pub static mut TrackFX_GetRecCount: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29TrackFX_GetUserPresetFilenameE"]
            pub static mut TrackFX_GetUserPresetFilename: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    fnOut: *mut ::std::os::raw::c_char,
                    fnOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TrackFX_NavigatePresetsE"]
            pub static mut TrackFX_NavigatePresets: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    presetmove: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_SetEnabledE"]
            pub static mut TrackFX_SetEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    enabled: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TrackFX_SetEQBandEnabledE"]
            pub static mut TrackFX_SetEQBandEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxidx: ::std::os::raw::c_int,
                    bandtype: ::std::os::raw::c_int,
                    bandidx: ::std::os::raw::c_int,
                    enable: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_SetEQParamE"]
            pub static mut TrackFX_SetEQParam: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxidx: ::std::os::raw::c_int,
                    bandtype: ::std::os::raw::c_int,
                    bandidx: ::std::os::raw::c_int,
                    paramtype: ::std::os::raw::c_int,
                    val: f64,
                    isnorm: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_SetNamedConfigParmE"]
            pub static mut TrackFX_SetNamedConfigParm: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_SetOfflineE"]
            pub static mut TrackFX_SetOffline: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    offline: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TrackFX_SetOpenE"]
            pub static mut TrackFX_SetOpen: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    open: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TrackFX_SetParamE"]
            pub static mut TrackFX_SetParam: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    val: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_SetParamNormalizedE"]
            pub static mut TrackFX_SetParamNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    value: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TrackFX_SetPinMappingsE"]
            pub static mut TrackFX_SetPinMappings: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    isoutput: ::std::os::raw::c_int,
                    pin: ::std::os::raw::c_int,
                    low32bits: ::std::os::raw::c_int,
                    hi32bits: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_SetPresetE"]
            pub static mut TrackFX_SetPreset: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    presetname: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TrackFX_SetPresetByIndexE"]
            pub static mut TrackFX_SetPresetByIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12TrackFX_ShowE"]
            pub static mut TrackFX_Show: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    index: ::std::os::raw::c_int,
                    showFlag: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TrackList_AdjustWindowsE"]
            pub static mut TrackList_AdjustWindows:
                ::std::option::Option<unsafe extern "C" fn(isMinor: bool)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions35TrackList_UpdateAllExternalSurfacesE"]
            pub static mut TrackList_UpdateAllExternalSurfaces:
                ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15Undo_BeginBlockE"]
            pub static mut Undo_BeginBlock: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Undo_BeginBlock2E"]
            pub static mut Undo_BeginBlock2:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13Undo_CanRedo2E"]
            pub static mut Undo_CanRedo2: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13Undo_CanUndo2E"]
            pub static mut Undo_CanUndo2: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12Undo_DoRedo2E"]
            pub static mut Undo_DoRedo2: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12Undo_DoUndo2E"]
            pub static mut Undo_DoUndo2: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13Undo_EndBlockE"]
            pub static mut Undo_EndBlock: ::std::option::Option<
                unsafe extern "C" fn(
                    descchange: *const ::std::os::raw::c_char,
                    extraflags: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14Undo_EndBlock2E"]
            pub static mut Undo_EndBlock2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    descchange: *const ::std::os::raw::c_char,
                    extraflags: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18Undo_OnStateChangeE"]
            pub static mut Undo_OnStateChange: ::std::option::Option<
                unsafe extern "C" fn(descchange: *const ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19Undo_OnStateChange2E"]
            pub static mut Undo_OnStateChange2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    descchange: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23Undo_OnStateChange_ItemE"]
            pub static mut Undo_OnStateChange_Item: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    name: *const ::std::os::raw::c_char,
                    item: *mut root::MediaItem,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20Undo_OnStateChangeExE"]
            pub static mut Undo_OnStateChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    descchange: *const ::std::os::raw::c_char,
                    whichStates: ::std::os::raw::c_int,
                    trackparm: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21Undo_OnStateChangeEx2E"]
            pub static mut Undo_OnStateChangeEx2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    descchange: *const ::std::os::raw::c_char,
                    whichStates: ::std::os::raw::c_int,
                    trackparm: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20update_disk_countersE"]
            pub static mut update_disk_counters: ::std::option::Option<
                unsafe extern "C" fn(
                    readamt: ::std::os::raw::c_int,
                    writeamt: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13UpdateArrangeE"]
            pub static mut UpdateArrange: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19UpdateItemInProjectE"]
            pub static mut UpdateItemInProject:
                ::std::option::Option<unsafe extern "C" fn(item: *mut root::MediaItem)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15UpdateItemLanesE"]
            pub static mut UpdateItemLanes:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14UpdateTimelineE"]
            pub static mut UpdateTimeline: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11ValidatePtrE"]
            pub static mut ValidatePtr: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *mut ::std::os::raw::c_void,
                    ctypename: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12ValidatePtr2E"]
            pub static mut ValidatePtr2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    pointer: *mut ::std::os::raw::c_void,
                    ctypename: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9ViewPrefsE"]
            pub static mut ViewPrefs: ::std::option::Option<
                unsafe extern "C" fn(
                    page: ::std::os::raw::c_int,
                    pageByName: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27WDL_VirtualWnd_ScaledBlitBGE"]
            pub static mut WDL_VirtualWnd_ScaledBlitBG: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::WDL_VirtualWnd_BGCfg,
                    destx: ::std::os::raw::c_int,
                    desty: ::std::os::raw::c_int,
                    destw: ::std::os::raw::c_int,
                    desth: ::std::os::raw::c_int,
                    clipx: ::std::os::raw::c_int,
                    clipy: ::std::os::raw::c_int,
                    clipw: ::std::os::raw::c_int,
                    cliph: ::std::os::raw::c_int,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetMidiInputE"]
            pub static mut GetMidiInput: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int) -> *mut root::midi_Input,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetMidiOutputE"]
            pub static mut GetMidiOutput: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int) -> *mut root::midi_Output,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22fxDoReaperPresetActionE"]
            pub static mut fxDoReaperPresetAction: ::std::option::Option<
                unsafe extern "C" fn(
                    fx: *mut ::std::os::raw::c_void,
                    name: *const ::std::os::raw::c_char,
                    flag: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26AddCustomMenuOrToolbarItemE"]
            pub static mut AddCustomMenuOrToolbarItem: ::std::option::Option<
                unsafe extern "C" fn(
                    menuname: *const ::std::os::raw::c_char,
                    pos: ::std::os::raw::c_int,
                    command_id: ::std::os::raw::c_int,
                    toolbarflags: ::std::os::raw::c_int,
                    str: *const ::std::os::raw::c_char,
                    iconfn: *const ::std::os::raw::c_char,
                    extra_flags: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29DeleteCustomMenuOrToolbarItemE"]
            pub static mut DeleteCustomMenuOrToolbarItem: ::std::option::Option<
                unsafe extern "C" fn(
                    menuname: *const ::std::os::raw::c_char,
                    pos: ::std::os::raw::c_int,
                    extra_flags: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetCustomMenuOrToolbarItemE"]
            pub static mut GetCustomMenuOrToolbarItem: ::std::option::Option<
                unsafe extern "C" fn(
                    menuname: *const ::std::os::raw::c_char,
                    pos: ::std::os::raw::c_int,
                    commandOutOptional: *mut ::std::os::raw::c_int,
                    toolbarFlagsOutOptional: *mut ::std::os::raw::c_int,
                    strOutOptional: *mut *const ::std::os::raw::c_char,
                    iconFnOutOptional: *mut *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23AdvancePlaybackPositionE"]
            pub static mut AdvancePlaybackPosition: ::std::option::Option<
                unsafe extern "C" fn(
                    __proj: *mut root::ReaProject,
                    opos: f64,
                    npos: *mut f64,
                    loopcnt: *mut ::std::os::raw::c_longlong,
                    srate: f64,
                    max_spls: *mut ::std::os::raw::c_int,
                    sf: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetPlayLoopCntE"]
            pub static mut GetPlayLoopCnt: ::std::option::Option<
                unsafe extern "C" fn(
                    __proj: *mut root::ReaProject,
                    something: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_longlong,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16InitializeCoolSBE"]
            pub static mut InitializeCoolSB:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> root::BOOL>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18UninitializeCoolSBE"]
            pub static mut UninitializeCoolSB:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> root::HRESULT>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CoolSB_SetMinThumbSizeE"]
            pub static mut CoolSB_SetMinThumbSize: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    wBar: root::UINT,
                    size: root::UINT,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CoolSB_GetScrollInfoE"]
            pub static mut CoolSB_GetScrollInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    fnBar: ::std::os::raw::c_int,
                    lpsi: root::LPSCROLLINFO,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CoolSB_SetScrollInfoE"]
            pub static mut CoolSB_SetScrollInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    fnBar: ::std::os::raw::c_int,
                    lpsi: root::LPSCROLLINFO,
                    fRedraw: root::BOOL,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CoolSB_SetScrollPosE"]
            pub static mut CoolSB_SetScrollPos: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    nBar: ::std::os::raw::c_int,
                    nPos: ::std::os::raw::c_int,
                    fRedraw: root::BOOL,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CoolSB_SetScrollRangeE"]
            pub static mut CoolSB_SetScrollRange: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    nBar: ::std::os::raw::c_int,
                    nMinPos: ::std::os::raw::c_int,
                    nMaxPos: ::std::os::raw::c_int,
                    fRedraw: root::BOOL,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CoolSB_ShowScrollBarE"]
            pub static mut CoolSB_ShowScrollBar: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    wBar: ::std::os::raw::c_int,
                    fShow: root::BOOL,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23CoolSB_SetResizingThumbE"]
            pub static mut CoolSB_SetResizingThumb: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, active: root::BOOL) -> root::BOOL,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CoolSB_SetThemeIndexE"]
            pub static mut CoolSB_SetThemeIndex: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, idx: ::std::os::raw::c_int) -> root::BOOL,
            >;
        }
    }
    pub mod swell_functions {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub static mut lstrcpyn: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut ::std::os::raw::c_char,
                    src: *const ::std::os::raw::c_char,
                    l: ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            pub static mut MulDiv: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: ::std::os::raw::c_int,
                    arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut Sleep:
                ::std::option::Option<unsafe extern "C" fn(ms: ::std::os::raw::c_int)>;
        }
        extern "C" {
            pub static mut GetTickCount:
                ::std::option::Option<unsafe extern "C" fn() -> root::DWORD>;
        }
        extern "C" {
            pub static mut GetFileTime: ::std::option::Option<
                unsafe extern "C" fn(
                    filedes: ::std::os::raw::c_int,
                    lpCreationTime: *mut root::FILETIME,
                    lpLastAccessTime: *mut root::FILETIME,
                    lpLastWriteTime: *mut root::FILETIME,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut WritePrivateProfileString: ::std::option::Option<
                unsafe extern "C" fn(
                    appname: *const ::std::os::raw::c_char,
                    keyname: *const ::std::os::raw::c_char,
                    val: *const ::std::os::raw::c_char,
                    fn_: *const ::std::os::raw::c_char,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut GetPrivateProfileString: ::std::option::Option<
                unsafe extern "C" fn(
                    appname: *const ::std::os::raw::c_char,
                    keyname: *const ::std::os::raw::c_char,
                    def: *const ::std::os::raw::c_char,
                    ret: *mut ::std::os::raw::c_char,
                    retsize: ::std::os::raw::c_int,
                    fn_: *const ::std::os::raw::c_char,
                ) -> root::DWORD,
            >;
        }
        extern "C" {
            pub static mut GetPrivateProfileInt: ::std::option::Option<
                unsafe extern "C" fn(
                    appname: *const ::std::os::raw::c_char,
                    keyname: *const ::std::os::raw::c_char,
                    def: ::std::os::raw::c_int,
                    fn_: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GetPrivateProfileStruct: ::std::option::Option<
                unsafe extern "C" fn(
                    appname: *const ::std::os::raw::c_char,
                    keyname: *const ::std::os::raw::c_char,
                    buf: *mut ::std::os::raw::c_void,
                    bufsz: ::std::os::raw::c_int,
                    fn_: *const ::std::os::raw::c_char,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut WritePrivateProfileStruct: ::std::option::Option<
                unsafe extern "C" fn(
                    appname: *const ::std::os::raw::c_char,
                    keyname: *const ::std::os::raw::c_char,
                    buf: *const ::std::os::raw::c_void,
                    bufsz: ::std::os::raw::c_int,
                    fn_: *const ::std::os::raw::c_char,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut WritePrivateProfileSection: ::std::option::Option<
                unsafe extern "C" fn(
                    appname: *const ::std::os::raw::c_char,
                    strings: *const ::std::os::raw::c_char,
                    fn_: *const ::std::os::raw::c_char,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut GetPrivateProfileSection: ::std::option::Option<
                unsafe extern "C" fn(
                    appname: *const ::std::os::raw::c_char,
                    strout: *mut ::std::os::raw::c_char,
                    strout_len: root::DWORD,
                    fn_: *const ::std::os::raw::c_char,
                ) -> root::DWORD,
            >;
        }
        extern "C" {
            pub static mut GetModuleFileName: ::std::option::Option<
                unsafe extern "C" fn(
                    hInst: root::HINSTANCE,
                    fn_: *mut ::std::os::raw::c_char,
                    nSize: root::DWORD,
                ) -> root::DWORD,
            >;
        }
        extern "C" {
            pub static mut SWELL_PtInRect: ::std::option::Option<
                unsafe extern "C" fn(r: *const root::RECT, p: root::POINT) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut ShellExecute: ::std::option::Option<
                unsafe extern "C" fn(
                    hwndDlg: root::HWND,
                    action: *const ::std::os::raw::c_char,
                    content1: *const ::std::os::raw::c_char,
                    content2: *const ::std::os::raw::c_char,
                    content3: *const ::std::os::raw::c_char,
                    blah: ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut MessageBox: ::std::option::Option<
                unsafe extern "C" fn(
                    hwndParent: root::HWND,
                    text: *const ::std::os::raw::c_char,
                    caption: *const ::std::os::raw::c_char,
                    type_: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut BrowseForFiles: ::std::option::Option<
                unsafe extern "C" fn(
                    text: *const ::std::os::raw::c_char,
                    initialdir: *const ::std::os::raw::c_char,
                    initialfile: *const ::std::os::raw::c_char,
                    allowmul: bool,
                    extlist: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            pub static mut BrowseForSaveFile: ::std::option::Option<
                unsafe extern "C" fn(
                    text: *const ::std::os::raw::c_char,
                    initialdir: *const ::std::os::raw::c_char,
                    initialfile: *const ::std::os::raw::c_char,
                    extlist: *const ::std::os::raw::c_char,
                    fn_: *mut ::std::os::raw::c_char,
                    fnsize: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut BrowseForDirectory: ::std::option::Option<
                unsafe extern "C" fn(
                    text: *const ::std::os::raw::c_char,
                    initialdir: *const ::std::os::raw::c_char,
                    fn_: *mut ::std::os::raw::c_char,
                    fnsize: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut BrowseFile_SetTemplate: ::std::option::Option<
                unsafe extern "C" fn(
                    dlgid: *const ::std::os::raw::c_char,
                    dlgProc: root::DLGPROC,
                    reshead: *mut root::SWELL_DialogResourceIndex,
                ),
            >;
        }
        extern "C" {
            pub static mut GetDlgItem: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: ::std::os::raw::c_int) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut ShowWindow: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut DestroyWindow:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            pub static mut SWELL_GetGestureInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    lParam: root::LPARAM,
                    gi: *mut root::GESTUREINFO,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut SWELL_HideApp: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            pub static mut SetDlgItemText: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    idx: ::std::os::raw::c_int,
                    text: *const ::std::os::raw::c_char,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut SetDlgItemInt: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    idx: ::std::os::raw::c_int,
                    val: ::std::os::raw::c_int,
                    issigned: ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut GetDlgItemInt: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    idx: ::std::os::raw::c_int,
                    translated: *mut root::BOOL,
                    issigned: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GetDlgItemText: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    idx: ::std::os::raw::c_int,
                    text: *mut ::std::os::raw::c_char,
                    textlen: ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut GetWindowTextLength: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut CheckDlgButton: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    idx: ::std::os::raw::c_int,
                    check: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut IsDlgButtonChecked: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    idx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut EnableWindow: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, enable: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut SetFocus: ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            pub static mut GetFocus: ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            pub static mut SetForegroundWindow:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            pub static mut GetForegroundWindow:
                ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            pub static mut SetCapture:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> root::HWND>;
        }
        extern "C" {
            pub static mut GetCapture: ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            pub static mut ReleaseCapture: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            pub static mut IsChild: ::std::option::Option<
                unsafe extern "C" fn(
                    hwndParent: root::HWND,
                    hwndChild: root::HWND,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GetParent:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> root::HWND>;
        }
        extern "C" {
            pub static mut SetParent: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, newPar: root::HWND) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut GetWindow: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, what: ::std::os::raw::c_int) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut EnumWindows: ::std::option::Option<
                unsafe extern "C" fn(
                    proc_: ::std::option::Option<
                        unsafe extern "C" fn(arg1: root::HWND, arg2: root::LPARAM) -> root::BOOL,
                    >,
                    lp: root::LPARAM,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut FindWindowEx: ::std::option::Option<
                unsafe extern "C" fn(
                    par: root::HWND,
                    lastw: root::HWND,
                    classname: *const ::std::os::raw::c_char,
                    title: *const ::std::os::raw::c_char,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut ClientToScreen:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND, p: *mut root::POINT)>;
        }
        extern "C" {
            pub static mut ScreenToClient:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND, p: *mut root::POINT)>;
        }
        extern "C" {
            pub static mut GetWindowRect: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, r: *mut root::RECT) -> bool,
            >;
        }
        extern "C" {
            pub static mut GetWindowContentViewRect:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND, r: *mut root::RECT)>;
        }
        extern "C" {
            pub static mut GetClientRect:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND, r: *mut root::RECT)>;
        }
        extern "C" {
            pub static mut WindowFromPoint:
                ::std::option::Option<unsafe extern "C" fn(p: root::POINT) -> root::HWND>;
        }
        extern "C" {
            pub static mut WinOffsetRect: ::std::option::Option<
                unsafe extern "C" fn(
                    lprc: root::LPRECT,
                    dx: ::std::os::raw::c_int,
                    dy: ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut WinSetRect: ::std::option::Option<
                unsafe extern "C" fn(
                    lprc: root::LPRECT,
                    xLeft: ::std::os::raw::c_int,
                    yTop: ::std::os::raw::c_int,
                    xRight: ::std::os::raw::c_int,
                    yBottom: ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut WinUnionRect: ::std::option::Option<
                unsafe extern "C" fn(
                    out: *mut root::RECT,
                    in1: *const root::RECT,
                    in2: *const root::RECT,
                ),
            >;
        }
        extern "C" {
            pub static mut WinIntersectRect: ::std::option::Option<
                unsafe extern "C" fn(
                    out: *mut root::RECT,
                    in1: *const root::RECT,
                    in2: *const root::RECT,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SetWindowPos: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    unused: root::HWND,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    cx: ::std::os::raw::c_int,
                    cy: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_SetWindowLevel: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    newlevel: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut InvalidateRect: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    r: *const root::RECT,
                    eraseBk: ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut UpdateWindow:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            pub static mut GetWindowLong: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    idx: ::std::os::raw::c_int,
                ) -> root::LONG_PTR,
            >;
        }
        extern "C" {
            pub static mut SetWindowLong: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    idx: ::std::os::raw::c_int,
                    val: root::LONG_PTR,
                ) -> root::LONG_PTR,
            >;
        }
        extern "C" {
            pub static mut ScrollWindow: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    xamt: ::std::os::raw::c_int,
                    yamt: ::std::os::raw::c_int,
                    lpRect: *const root::RECT,
                    lpClipRect: *const root::RECT,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut EnumPropsEx: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    arg2: root::PROPENUMPROCEX,
                    arg3: root::LPARAM,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GetProp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    arg2: *const ::std::os::raw::c_char,
                ) -> root::HANDLE,
            >;
        }
        extern "C" {
            pub static mut SetProp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: root::HANDLE,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut RemoveProp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    arg2: *const ::std::os::raw::c_char,
                ) -> root::HANDLE,
            >;
        }
        extern "C" {
            pub static mut IsWindowVisible:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> bool>;
        }
        extern "C" {
            pub static mut IsWindow:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> bool>;
        }
        extern "C" {
            pub static mut SetTimer: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    timerid: root::UINT_PTR,
                    rate: root::UINT,
                    tProc: root::TIMERPROC,
                ) -> root::UINT_PTR,
            >;
        }
        extern "C" {
            pub static mut KillTimer: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, timerid: root::UINT_PTR) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut ListView_SetExtendedListViewStyleEx: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    mask: ::std::os::raw::c_int,
                    style: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_InsertColumn: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    pos: ::std::os::raw::c_int,
                    lvc: *const root::LVCOLUMN,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_DeleteColumn: ::std::option::Option<
                unsafe extern "C" fn(h: root::HWND, pos: ::std::os::raw::c_int) -> bool,
            >;
        }
        extern "C" {
            pub static mut ListView_SetColumn: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    pos: ::std::os::raw::c_int,
                    lvc: *const root::LVCOLUMN,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_GetColumnWidth: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    pos: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut ListView_InsertItem: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    item: *const root::LVITEM,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut ListView_SetItemText: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    ipos: ::std::os::raw::c_int,
                    cpos: ::std::os::raw::c_int,
                    txt: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_SetItem: ::std::option::Option<
                unsafe extern "C" fn(h: root::HWND, item: *mut root::LVITEM) -> bool,
            >;
        }
        extern "C" {
            pub static mut ListView_GetNextItem: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    istart: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut ListView_GetItem: ::std::option::Option<
                unsafe extern "C" fn(h: root::HWND, item: *mut root::LVITEM) -> bool,
            >;
        }
        extern "C" {
            pub static mut ListView_GetItemState: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    ipos: ::std::os::raw::c_int,
                    mask: root::UINT,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut ListView_DeleteItem: ::std::option::Option<
                unsafe extern "C" fn(h: root::HWND, ipos: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut ListView_DeleteAllItems:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND)>;
        }
        extern "C" {
            pub static mut ListView_GetSelectedCount:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            pub static mut ListView_GetItemCount:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            pub static mut ListView_GetSelectionMark:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            pub static mut ListView_SetColumnWidth: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    colpos: ::std::os::raw::c_int,
                    wid: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_SetItemState: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    item: ::std::os::raw::c_int,
                    state: root::UINT,
                    statemask: root::UINT,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut ListView_RedrawItems: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    startitem: ::std::os::raw::c_int,
                    enditem: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_SetItemCount: ::std::option::Option<
                unsafe extern "C" fn(h: root::HWND, cnt: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut ListView_EnsureVisible: ::std::option::Option<
                unsafe extern "C" fn(h: root::HWND, i: ::std::os::raw::c_int, pok: root::BOOL),
            >;
        }
        extern "C" {
            pub static mut ListView_SetImageList: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    imagelist: root::HIMAGELIST,
                    which: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_SubItemHitTest: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    pinf: *mut root::LVHITTESTINFO,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut ListView_GetItemText: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    item: ::std::os::raw::c_int,
                    subitem: ::std::os::raw::c_int,
                    text: *mut ::std::os::raw::c_char,
                    textmax: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_SortItems: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    compf: root::PFNLVCOMPARE,
                    parm: root::LPARAM,
                ),
            >;
        }
        extern "C" {
            pub static mut ListView_Scroll: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    xscroll: ::std::os::raw::c_int,
                    yscroll: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut ListView_GetTopIndex:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            pub static mut ListView_GetCountPerPage:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            pub static mut ListView_SetColumnOrderArray: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    cnt: ::std::os::raw::c_int,
                    arr: *mut ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut ListView_GetColumnOrderArray: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    cnt: ::std::os::raw::c_int,
                    arr: *mut ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut ListView_GetHeader:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> root::HWND>;
        }
        extern "C" {
            pub static mut Header_GetItemCount:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            pub static mut Header_GetItem: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    col: ::std::os::raw::c_int,
                    hi: *mut root::HDITEM,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut Header_SetItem: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    col: ::std::os::raw::c_int,
                    hi: *mut root::HDITEM,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut ListView_GetItemRect: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    item: ::std::os::raw::c_int,
                    r: *mut root::RECT,
                    code: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut ListView_GetSubItemRect: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    item: ::std::os::raw::c_int,
                    subitem: ::std::os::raw::c_int,
                    code: ::std::os::raw::c_int,
                    r: *mut root::RECT,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut ListView_HitTest: ::std::option::Option<
                unsafe extern "C" fn(
                    h: root::HWND,
                    pinf: *mut root::LVHITTESTINFO,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SWELL_GetListViewHeaderHeight:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            pub static mut ImageList_CreateEx:
                ::std::option::Option<unsafe extern "C" fn() -> root::HIMAGELIST>;
        }
        extern "C" {
            pub static mut ImageList_Remove: ::std::option::Option<
                unsafe extern "C" fn(
                    list: root::HIMAGELIST,
                    idx: ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut ImageList_ReplaceIcon: ::std::option::Option<
                unsafe extern "C" fn(
                    list: root::HIMAGELIST,
                    offset: ::std::os::raw::c_int,
                    image: root::HICON,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut ImageList_Add: ::std::option::Option<
                unsafe extern "C" fn(
                    list: root::HIMAGELIST,
                    image: root::HBITMAP,
                    mask: root::HBITMAP,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut ImageList_Destroy:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HIMAGELIST)>;
        }
        extern "C" {
            pub static mut TabCtrl_GetItemCount: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut TabCtrl_DeleteItem: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, idx: ::std::os::raw::c_int) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut TabCtrl_InsertItem: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    idx: ::std::os::raw::c_int,
                    item: *mut root::TCITEM,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut TabCtrl_SetCurSel: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    idx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut TabCtrl_GetCurSel: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut TabCtrl_AdjustRect: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    fLarger: root::BOOL,
                    r: *mut root::RECT,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut TreeView_InsertItem: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    ins: *mut root::TV_INSERTSTRUCT,
                ) -> root::HTREEITEM,
            >;
        }
        extern "C" {
            pub static mut TreeView_Expand: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    item: root::HTREEITEM,
                    flag: root::UINT,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut TreeView_GetSelection:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> root::HTREEITEM>;
        }
        extern "C" {
            pub static mut TreeView_DeleteItem: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, item: root::HTREEITEM),
            >;
        }
        extern "C" {
            pub static mut TreeView_DeleteAllItems:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            pub static mut TreeView_SelectItem: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, item: root::HTREEITEM),
            >;
        }
        extern "C" {
            pub static mut TreeView_EnsureVisible: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, item: root::HTREEITEM),
            >;
        }
        extern "C" {
            pub static mut TreeView_GetItem: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, pitem: root::LPTVITEM) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut TreeView_SetItem: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, pitem: root::LPTVITEM) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut TreeView_HitTest: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    hti: *mut root::TVHITTESTINFO,
                ) -> root::HTREEITEM,
            >;
        }
        extern "C" {
            pub static mut TreeView_SetIndent: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, indent: ::std::os::raw::c_int) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut TreeView_GetParent: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, item: root::HTREEITEM) -> root::HTREEITEM,
            >;
        }
        extern "C" {
            pub static mut TreeView_GetChild: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, item: root::HTREEITEM) -> root::HTREEITEM,
            >;
        }
        extern "C" {
            pub static mut TreeView_GetNextSibling: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, item: root::HTREEITEM) -> root::HTREEITEM,
            >;
        }
        extern "C" {
            pub static mut TreeView_GetRoot:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> root::HTREEITEM>;
        }
        extern "C" {
            pub static mut TreeView_SetBkColor: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, color: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut TreeView_SetTextColor: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, color: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut ListView_SetBkColor: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, color: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut ListView_SetTextBkColor: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, color: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut ListView_SetTextColor: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, color: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut ListView_SetGridColor: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, color: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut ListView_SetSelColors: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    colors: *mut ::std::os::raw::c_int,
                    ncolors: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_ModalWindowStart: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut SWELL_ModalWindowRun: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: *mut ::std::os::raw::c_void,
                    ret: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut SWELL_ModalWindowEnd:
                ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void)>;
        }
        extern "C" {
            pub static mut SWELL_CloseWindow:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            pub static mut CreatePopupMenu:
                ::std::option::Option<unsafe extern "C" fn() -> root::HMENU>;
        }
        extern "C" {
            pub static mut CreatePopupMenuEx: ::std::option::Option<
                unsafe extern "C" fn(title: *const ::std::os::raw::c_char) -> root::HMENU,
            >;
        }
        extern "C" {
            pub static mut DestroyMenu:
                ::std::option::Option<unsafe extern "C" fn(hMenu: root::HMENU)>;
        }
        extern "C" {
            pub static mut AddMenuItem: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    pos: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                    tagid: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GetSubMenu: ::std::option::Option<
                unsafe extern "C" fn(hMenu: root::HMENU, pos: ::std::os::raw::c_int) -> root::HMENU,
            >;
        }
        extern "C" {
            pub static mut GetMenuItemCount: ::std::option::Option<
                unsafe extern "C" fn(hMenu: root::HMENU) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GetMenuItemID: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    pos: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SetMenuItemModifier: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    idx: ::std::os::raw::c_int,
                    flag: ::std::os::raw::c_int,
                    code: ::std::os::raw::c_int,
                    mask: ::std::os::raw::c_uint,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut SetMenuItemText: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    idx: ::std::os::raw::c_int,
                    flag: ::std::os::raw::c_int,
                    text: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut EnableMenuItem: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    idx: ::std::os::raw::c_int,
                    en: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut DeleteMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    idx: ::std::os::raw::c_int,
                    flag: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut CheckMenuItem: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    idx: ::std::os::raw::c_int,
                    chk: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut InsertMenuItem: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    pos: ::std::os::raw::c_int,
                    byPos: root::BOOL,
                    mi: *mut root::MENUITEMINFO,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_InsertMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    menu: root::HMENU,
                    pos: ::std::os::raw::c_int,
                    flag: ::std::os::raw::c_uint,
                    idx: root::UINT_PTR,
                    str: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            pub static mut GetMenuItemInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    pos: ::std::os::raw::c_int,
                    byPos: root::BOOL,
                    mi: *mut root::MENUITEMINFO,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut SetMenuItemInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    pos: ::std::os::raw::c_int,
                    byPos: root::BOOL,
                    mi: *mut root::MENUITEMINFO,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut DrawMenuBar:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND)>;
        }
        extern "C" {
            pub static mut SWELL_LoadMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    head: *mut root::SWELL_MenuResourceIndex,
                    resid: *const ::std::os::raw::c_char,
                ) -> root::HMENU,
            >;
        }
        extern "C" {
            pub static mut TrackPopupMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    flags: ::std::os::raw::c_int,
                    xpos: ::std::os::raw::c_int,
                    ypos: ::std::os::raw::c_int,
                    resvd: ::std::os::raw::c_int,
                    hwnd: root::HWND,
                    r: *const root::RECT,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SWELL_SetMenuDestination:
                ::std::option::Option<unsafe extern "C" fn(menu: root::HMENU, hwnd: root::HWND)>;
        }
        extern "C" {
            pub static mut SWELL_DuplicateMenu:
                ::std::option::Option<unsafe extern "C" fn(menu: root::HMENU) -> root::HMENU>;
        }
        extern "C" {
            pub static mut SetMenu: ::std::option::Option<
                unsafe extern "C" fn(hwnd: root::HWND, menu: root::HMENU) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut GetMenu:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND) -> root::HMENU>;
        }
        extern "C" {
            pub static mut SWELL_GetDefaultWindowMenu:
                ::std::option::Option<unsafe extern "C" fn() -> root::HMENU>;
        }
        extern "C" {
            pub static mut SWELL_SetDefaultWindowMenu:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HMENU)>;
        }
        extern "C" {
            pub static mut SWELL_GetDefaultModalWindowMenu:
                ::std::option::Option<unsafe extern "C" fn() -> root::HMENU>;
        }
        extern "C" {
            pub static mut SWELL_SetDefaultModalWindowMenu:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HMENU)>;
        }
        extern "C" {
            pub static mut SWELL_GetCurrentMenu:
                ::std::option::Option<unsafe extern "C" fn() -> root::HMENU>;
        }
        extern "C" {
            pub static mut SWELL_SetCurrentMenu:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HMENU)>;
        }
        extern "C" {
            pub static mut SWELL_DialogBox: ::std::option::Option<
                unsafe extern "C" fn(
                    reshead: *mut root::SWELL_DialogResourceIndex,
                    resid: *const ::std::os::raw::c_char,
                    parent: root::HWND,
                    dlgproc: root::DLGPROC,
                    param: root::LPARAM,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SWELL_CreateDialog: ::std::option::Option<
                unsafe extern "C" fn(
                    reshead: *mut root::SWELL_DialogResourceIndex,
                    resid: *const ::std::os::raw::c_char,
                    parent: root::HWND,
                    dlgproc: root::DLGPROC,
                    param: root::LPARAM,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_RegisterCustomControlCreator:
                ::std::option::Option<unsafe extern "C" fn(proc_: root::SWELL_ControlCreatorProc)>;
        }
        extern "C" {
            pub static mut SWELL_UnregisterCustomControlCreator:
                ::std::option::Option<unsafe extern "C" fn(proc_: root::SWELL_ControlCreatorProc)>;
        }
        extern "C" {
            pub static mut DefWindowProc: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    msg: root::UINT,
                    wParam: root::WPARAM,
                    lParam: root::LPARAM,
                ) -> root::LRESULT,
            >;
        }
        extern "C" {
            pub static mut EndDialog: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut SWELL_GetDefaultButtonID: ::std::option::Option<
                unsafe extern "C" fn(
                    hwndDlg: root::HWND,
                    onlyIfEnabled: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SendMessage: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    arg2: root::UINT,
                    arg3: root::WPARAM,
                    arg4: root::LPARAM,
                ) -> root::LRESULT,
            >;
        }
        extern "C" {
            pub static mut SWELL_BroadcastMessage: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::UINT, arg2: root::WPARAM, arg3: root::LPARAM),
            >;
        }
        extern "C" {
            pub static mut PostMessage: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    msg: root::UINT,
                    wParam: root::WPARAM,
                    lParam: root::LPARAM,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut SWELL_MessageQueue_Flush: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            pub static mut SWELL_MessageQueue_Clear:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND)>;
        }
        extern "C" {
            pub static mut SWELL_KeyToASCII: ::std::option::Option<
                unsafe extern "C" fn(
                    wParam: ::std::os::raw::c_int,
                    lParam: ::std::os::raw::c_int,
                    newflags: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GetAsyncKeyState: ::std::option::Option<
                unsafe extern "C" fn(key: ::std::os::raw::c_int) -> root::WORD,
            >;
        }
        extern "C" {
            pub static mut GetCursorPos:
                ::std::option::Option<unsafe extern "C" fn(pt: *mut root::POINT)>;
        }
        extern "C" {
            pub static mut GetMessagePos:
                ::std::option::Option<unsafe extern "C" fn() -> root::DWORD>;
        }
        extern "C" {
            pub static mut SWELL_LoadCursor: ::std::option::Option<
                unsafe extern "C" fn(idx: *const ::std::os::raw::c_char) -> root::HCURSOR,
            >;
        }
        extern "C" {
            pub static mut SWELL_SetCursor:
                ::std::option::Option<unsafe extern "C" fn(curs: root::HCURSOR)>;
        }
        extern "C" {
            pub static mut SWELL_EnableRightClickEmulate:
                ::std::option::Option<unsafe extern "C" fn(enable: root::BOOL)>;
        }
        extern "C" {
            pub static mut SWELL_GetCursor:
                ::std::option::Option<unsafe extern "C" fn() -> root::HCURSOR>;
        }
        extern "C" {
            pub static mut SWELL_GetLastSetCursor:
                ::std::option::Option<unsafe extern "C" fn() -> root::HCURSOR>;
        }
        extern "C" {
            pub static mut SWELL_IsCursorVisible:
                ::std::option::Option<unsafe extern "C" fn() -> bool>;
        }
        extern "C" {
            pub static mut SWELL_ShowCursor: ::std::option::Option<
                unsafe extern "C" fn(bShow: root::BOOL) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SWELL_SetCursorPos: ::std::option::Option<
                unsafe extern "C" fn(
                    X: ::std::os::raw::c_int,
                    Y: ::std::os::raw::c_int,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut SWELL_GetViewPort: ::std::option::Option<
                unsafe extern "C" fn(
                    r: *mut root::RECT,
                    sourcerect: *const root::RECT,
                    wantWork: bool,
                ),
            >;
        }
        extern "C" {
            pub static mut OpenClipboard:
                ::std::option::Option<unsafe extern "C" fn(hwndDlg: root::HWND) -> bool>;
        }
        extern "C" {
            pub static mut CloseClipboard: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            pub static mut GetClipboardData:
                ::std::option::Option<unsafe extern "C" fn(type_: root::UINT) -> root::HANDLE>;
        }
        extern "C" {
            pub static mut EmptyClipboard: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            pub static mut SetClipboardData:
                ::std::option::Option<unsafe extern "C" fn(type_: root::UINT, h: root::HANDLE)>;
        }
        extern "C" {
            pub static mut RegisterClipboardFormat: ::std::option::Option<
                unsafe extern "C" fn(desc: *const ::std::os::raw::c_char) -> root::UINT,
            >;
        }
        extern "C" {
            pub static mut EnumClipboardFormats:
                ::std::option::Option<unsafe extern "C" fn(lastfmt: root::UINT) -> root::UINT>;
        }
        extern "C" {
            pub static mut GlobalAlloc: ::std::option::Option<
                unsafe extern "C" fn(
                    flags: ::std::os::raw::c_int,
                    sz: ::std::os::raw::c_int,
                ) -> root::HANDLE,
            >;
        }
        extern "C" {
            pub static mut GlobalLock: ::std::option::Option<
                unsafe extern "C" fn(h: root::HANDLE) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut GlobalSize: ::std::option::Option<
                unsafe extern "C" fn(h: root::HANDLE) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GlobalUnlock:
                ::std::option::Option<unsafe extern "C" fn(h: root::HANDLE)>;
        }
        extern "C" {
            pub static mut GlobalFree: ::std::option::Option<unsafe extern "C" fn(h: root::HANDLE)>;
        }
        extern "C" {
            pub static mut CreateThread: ::std::option::Option<
                unsafe extern "C" fn(
                    TA: *mut ::std::os::raw::c_void,
                    stackSize: root::DWORD,
                    ThreadProc: ::std::option::Option<
                        unsafe extern "C" fn(arg1: root::LPVOID) -> root::DWORD,
                    >,
                    parm: root::LPVOID,
                    cf: root::DWORD,
                    tidOut: *mut root::DWORD,
                ) -> root::HANDLE,
            >;
        }
        extern "C" {
            pub static mut CreateEvent: ::std::option::Option<
                unsafe extern "C" fn(
                    SA: *mut ::std::os::raw::c_void,
                    manualReset: root::BOOL,
                    initialSig: root::BOOL,
                    ignored: *const ::std::os::raw::c_char,
                ) -> root::HANDLE,
            >;
        }
        extern "C" {
            pub static mut CreateEventAsSocket: ::std::option::Option<
                unsafe extern "C" fn(
                    SA: *mut ::std::os::raw::c_void,
                    manualReset: root::BOOL,
                    initialSig: root::BOOL,
                    ignored: *const ::std::os::raw::c_char,
                ) -> root::HANDLE,
            >;
        }
        extern "C" {
            pub static mut GetCurrentThreadId:
                ::std::option::Option<unsafe extern "C" fn() -> root::DWORD>;
        }
        extern "C" {
            pub static mut WaitForSingleObject: ::std::option::Option<
                unsafe extern "C" fn(hand: root::HANDLE, msTO: root::DWORD) -> root::DWORD,
            >;
        }
        extern "C" {
            pub static mut WaitForAnySocketObject: ::std::option::Option<
                unsafe extern "C" fn(
                    numObjs: ::std::os::raw::c_int,
                    objs: *mut root::HANDLE,
                    msTO: root::DWORD,
                ) -> root::DWORD,
            >;
        }
        extern "C" {
            pub static mut CloseHandle:
                ::std::option::Option<unsafe extern "C" fn(hand: root::HANDLE) -> root::BOOL>;
        }
        extern "C" {
            pub static mut SetThreadPriority: ::std::option::Option<
                unsafe extern "C" fn(evt: root::HANDLE, prio: ::std::os::raw::c_int) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut SetEvent:
                ::std::option::Option<unsafe extern "C" fn(evt: root::HANDLE) -> root::BOOL>;
        }
        extern "C" {
            pub static mut ResetEvent:
                ::std::option::Option<unsafe extern "C" fn(evt: root::HANDLE) -> root::BOOL>;
        }
        extern "C" {
            pub static mut SWELL_CreateProcessFromPID: ::std::option::Option<
                unsafe extern "C" fn(pid: ::std::os::raw::c_int) -> root::HANDLE,
            >;
        }
        extern "C" {
            pub static mut SWELL_CreateProcess: ::std::option::Option<
                unsafe extern "C" fn(
                    exe: *const ::std::os::raw::c_char,
                    nparams: ::std::os::raw::c_int,
                    params: *mut *const ::std::os::raw::c_char,
                ) -> root::HANDLE,
            >;
        }
        extern "C" {
            pub static mut SWELL_GetProcessExitCode: ::std::option::Option<
                unsafe extern "C" fn(hand: root::HANDLE) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut LoadLibraryGlobals: ::std::option::Option<
                unsafe extern "C" fn(
                    fileName: *const ::std::os::raw::c_char,
                    symbolsAsGlobals: bool,
                ) -> root::HINSTANCE,
            >;
        }
        extern "C" {
            pub static mut LoadLibrary: ::std::option::Option<
                unsafe extern "C" fn(fileName: *const ::std::os::raw::c_char) -> root::HINSTANCE,
            >;
        }
        extern "C" {
            pub static mut GetProcAddress: ::std::option::Option<
                unsafe extern "C" fn(
                    hInst: root::HINSTANCE,
                    procName: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut FreeLibrary:
                ::std::option::Option<unsafe extern "C" fn(hInst: root::HINSTANCE) -> root::BOOL>;
        }
        extern "C" {
            pub static mut SWELL_GetBundle: ::std::option::Option<
                unsafe extern "C" fn(hInst: root::HINSTANCE) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut SWELL_CreateMemContext: ::std::option::Option<
                unsafe extern "C" fn(
                    hdc: root::HDC,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                ) -> root::HDC,
            >;
        }
        extern "C" {
            pub static mut SWELL_DeleteGfxContext:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HDC)>;
        }
        extern "C" {
            pub static mut SWELL_GetCtxGC: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut SWELL_GetCtxFrameBuffer: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut SWELL_PushClipRegion:
                ::std::option::Option<unsafe extern "C" fn(ctx: root::HDC)>;
        }
        extern "C" {
            pub static mut SWELL_SetClipRegion:
                ::std::option::Option<unsafe extern "C" fn(ctx: root::HDC, r: *const root::RECT)>;
        }
        extern "C" {
            pub static mut SWELL_PopClipRegion:
                ::std::option::Option<unsafe extern "C" fn(ctx: root::HDC)>;
        }
        extern "C" {
            pub static mut CreateFontIndirect: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut root::LOGFONT) -> root::HFONT,
            >;
        }
        extern "C" {
            pub static mut CreateFont: ::std::option::Option<
                unsafe extern "C" fn(
                    lfHeight: ::std::os::raw::c_int,
                    lfWidth: ::std::os::raw::c_int,
                    lfEscapement: ::std::os::raw::c_int,
                    lfOrientation: ::std::os::raw::c_int,
                    lfWeight: ::std::os::raw::c_int,
                    lfItalic: ::std::os::raw::c_char,
                    lfUnderline: ::std::os::raw::c_char,
                    lfStrikeOut: ::std::os::raw::c_char,
                    lfCharSet: ::std::os::raw::c_char,
                    lfOutPrecision: ::std::os::raw::c_char,
                    lfClipPrecision: ::std::os::raw::c_char,
                    lfQuality: ::std::os::raw::c_char,
                    lfPitchAndFamily: ::std::os::raw::c_char,
                    lfFaceName: *const ::std::os::raw::c_char,
                ) -> root::HFONT,
            >;
        }
        extern "C" {
            pub static mut CreatePen: ::std::option::Option<
                unsafe extern "C" fn(
                    attr: ::std::os::raw::c_int,
                    wid: ::std::os::raw::c_int,
                    col: ::std::os::raw::c_int,
                ) -> root::HPEN,
            >;
        }
        extern "C" {
            pub static mut CreateSolidBrush: ::std::option::Option<
                unsafe extern "C" fn(col: ::std::os::raw::c_int) -> root::HBRUSH,
            >;
        }
        extern "C" {
            pub static mut CreatePenAlpha: ::std::option::Option<
                unsafe extern "C" fn(
                    attr: ::std::os::raw::c_int,
                    wid: ::std::os::raw::c_int,
                    col: ::std::os::raw::c_int,
                    alpha: f32,
                ) -> root::HPEN,
            >;
        }
        extern "C" {
            pub static mut CreateSolidBrushAlpha: ::std::option::Option<
                unsafe extern "C" fn(col: ::std::os::raw::c_int, alpha: f32) -> root::HBRUSH,
            >;
        }
        extern "C" {
            pub static mut SelectObject: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC, pen: root::HGDIOBJ) -> root::HGDIOBJ,
            >;
        }
        extern "C" {
            pub static mut GetStockObject: ::std::option::Option<
                unsafe extern "C" fn(wh: ::std::os::raw::c_int) -> root::HGDIOBJ,
            >;
        }
        extern "C" {
            pub static mut DeleteObject:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HGDIOBJ)>;
        }
        extern "C" {
            pub static mut SWELL_FillRect: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC, r: *const root::RECT, br: root::HBRUSH),
            >;
        }
        extern "C" {
            pub static mut Rectangle: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    l: ::std::os::raw::c_int,
                    t: ::std::os::raw::c_int,
                    r: ::std::os::raw::c_int,
                    b: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut Ellipse: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    l: ::std::os::raw::c_int,
                    t: ::std::os::raw::c_int,
                    r: ::std::os::raw::c_int,
                    b: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_Polygon: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    pts: *mut root::POINT,
                    npts: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut MoveToEx: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    op: *mut root::POINT,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_LineTo: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_SetPixel: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    c: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut PolyBezierTo: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    pts: *mut root::POINT,
                    np: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_DrawText: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    buf: *const ::std::os::raw::c_char,
                    len: ::std::os::raw::c_int,
                    r: *mut root::RECT,
                    align: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SetTextColor: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC, col: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut GetTextColor: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SetBkColor: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC, col: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut SetBkMode: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC, col: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut GetGlyphIndicesW: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    buf: *mut u32,
                    len: ::std::os::raw::c_int,
                    indices: *mut ::std::os::raw::c_ushort,
                    flags: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut RoundRect: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    x2: ::std::os::raw::c_int,
                    y2: ::std::os::raw::c_int,
                    xrnd: ::std::os::raw::c_int,
                    yrnd: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut PolyPolyline: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    pts: *mut root::POINT,
                    cnts: *mut root::DWORD,
                    nseg: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut GetTextMetrics: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC, tm: *mut root::TEXTMETRIC) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut GetTextFace: ::std::option::Option<
                unsafe extern "C" fn(
                    ctx: root::HDC,
                    nCount: ::std::os::raw::c_int,
                    lpFaceName: root::LPTSTR,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut GetObject: ::std::option::Option<
                unsafe extern "C" fn(
                    icon: root::HICON,
                    bmsz: ::std::os::raw::c_int,
                    _bm: *mut ::std::os::raw::c_void,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut CreateIconIndirect: ::std::option::Option<
                unsafe extern "C" fn(iconinfo: *mut root::ICONINFO) -> root::HICON,
            >;
        }
        extern "C" {
            pub static mut LoadNamedImage: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    alphaFromMask: bool,
                ) -> root::HICON,
            >;
        }
        extern "C" {
            pub static mut DrawImageInRect: ::std::option::Option<
                unsafe extern "C" fn(ctx: root::HDC, img: root::HICON, r: *const root::RECT),
            >;
        }
        extern "C" {
            pub static mut BitBlt: ::std::option::Option<
                unsafe extern "C" fn(
                    hdcOut: root::HDC,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    hdcIn: root::HDC,
                    xin: ::std::os::raw::c_int,
                    yin: ::std::os::raw::c_int,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut StretchBlt: ::std::option::Option<
                unsafe extern "C" fn(
                    hdcOut: root::HDC,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    hdcIn: root::HDC,
                    xin: ::std::os::raw::c_int,
                    yin: ::std::os::raw::c_int,
                    srcw: ::std::os::raw::c_int,
                    srch: ::std::os::raw::c_int,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut StretchBltFromMem: ::std::option::Option<
                unsafe extern "C" fn(
                    hdcOut: root::HDC,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    bits: *const ::std::os::raw::c_void,
                    srcw: ::std::os::raw::c_int,
                    srch: ::std::os::raw::c_int,
                    srcspan: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_GetScaling256:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            pub static mut SWELL_ExtendedAPI: ::std::option::Option<
                unsafe extern "C" fn(
                    key: *const ::std::os::raw::c_char,
                    v: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut GetSysColor: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut CreateBitmap: ::std::option::Option<
                unsafe extern "C" fn(
                    width: ::std::os::raw::c_int,
                    height: ::std::os::raw::c_int,
                    numplanes: ::std::os::raw::c_int,
                    bitsperpixel: ::std::os::raw::c_int,
                    bits: *mut ::std::os::raw::c_uchar,
                ) -> root::HBITMAP,
            >;
        }
        extern "C" {
            pub static mut SetOpaque:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND, isopaque: bool)>;
        }
        extern "C" {
            pub static mut SetAllowNoMiddleManRendering:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND, allow: bool)>;
        }
        extern "C" {
            pub static mut SWELL_SetViewGL: ::std::option::Option<
                unsafe extern "C" fn(h: root::HWND, wantGL: ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            pub static mut SWELL_GetViewGL:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> bool>;
        }
        extern "C" {
            pub static mut SWELL_SetGLContextToView:
                ::std::option::Option<unsafe extern "C" fn(h: root::HWND) -> bool>;
        }
        extern "C" {
            pub static mut BeginPaint: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: *mut root::PAINTSTRUCT) -> root::HDC,
            >;
        }
        extern "C" {
            pub static mut EndPaint: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: *mut root::PAINTSTRUCT) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut GetDC:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND) -> root::HDC>;
        }
        extern "C" {
            pub static mut GetWindowDC:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND) -> root::HDC>;
        }
        extern "C" {
            pub static mut ReleaseDC:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND, arg2: root::HDC)>;
        }
        extern "C" {
            pub static mut SWELL_FillDialogBackground: ::std::option::Option<
                unsafe extern "C" fn(
                    hdc: root::HDC,
                    r: *const root::RECT,
                    level: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_CloneGDIObject:
                ::std::option::Option<unsafe extern "C" fn(a: root::HGDIOBJ) -> root::HGDIOBJ>;
        }
        extern "C" {
            pub static mut GetSystemMetrics: ::std::option::Option<
                unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut DragQueryPoint: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HDROP, arg2: root::LPPOINT) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut DragFinish:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HDROP)>;
        }
        extern "C" {
            pub static mut DragQueryFile: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HDROP,
                    arg2: root::UINT,
                    arg3: *mut ::std::os::raw::c_char,
                    arg4: root::UINT,
                ) -> root::UINT,
            >;
        }
        extern "C" {
            pub static mut SWELL_InitiateDragDrop: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    srcrect: *mut root::RECT,
                    srcfn: *const ::std::os::raw::c_char,
                    callback: ::std::option::Option<
                        unsafe extern "C" fn(droppath: *const ::std::os::raw::c_char),
                    >,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_InitiateDragDropOfFileList: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    srcrect: *mut root::RECT,
                    srclist: *mut *const ::std::os::raw::c_char,
                    srccount: ::std::os::raw::c_int,
                    icon: root::HICON,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_FinishDragDrop: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            pub static mut SWELL_DrawFocusRect: ::std::option::Option<
                unsafe extern "C" fn(
                    hwndPar: root::HWND,
                    rct: *mut root::RECT,
                    handle: *mut *mut ::std::os::raw::c_void,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeSetCurParms: ::std::option::Option<
                unsafe extern "C" fn(
                    xscale: f32,
                    yscale: f32,
                    xtrans: f32,
                    ytrans: f32,
                    parent: root::HWND,
                    doauto: bool,
                    dosizetofit: bool,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeButton: ::std::option::Option<
                unsafe extern "C" fn(
                    def: ::std::os::raw::c_int,
                    label: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeEditField: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeLabel: ::std::option::Option<
                unsafe extern "C" fn(
                    align: ::std::os::raw::c_int,
                    label: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeControl: ::std::option::Option<
                unsafe extern "C" fn(
                    cname: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    classname: *const ::std::os::raw::c_char,
                    style: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    exstyle: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeCombo: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeGroupBox: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    style: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeCheckBox: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_MakeListBox: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    styles: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_Menu_AddMenuItem: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    name: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_uint,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_GenerateMenuFromList: ::std::option::Option<
                unsafe extern "C" fn(
                    hMenu: root::HMENU,
                    list: *const ::std::os::raw::c_void,
                    listsz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SWELL_GenerateDialogFromList: ::std::option::Option<
                unsafe extern "C" fn(
                    list: *const ::std::os::raw::c_void,
                    listsz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut _controlfp: ::std::option::Option<
                unsafe extern "C" fn(
                    flag: ::std::os::raw::c_uint,
                    mask: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            pub static mut SWELL_Internal_PostMessage_Init:
                ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            pub static mut SWELL_LoadCursorFromFile: ::std::option::Option<
                unsafe extern "C" fn(fn_: *const ::std::os::raw::c_char) -> root::HCURSOR,
            >;
        }
        extern "C" {
            pub static mut SWELL_SetWindowWantRaiseAmt: ::std::option::Option<
                unsafe extern "C" fn(h: root::HWND, amt: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut SWELL_GetWindowWantRaiseAmt: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SWELL_SetListViewFastClickMask: ::std::option::Option<
                unsafe extern "C" fn(hList: root::HWND, mask: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            pub static mut GetTempPath: ::std::option::Option<
                unsafe extern "C" fn(sz: ::std::os::raw::c_int, buf: *mut ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            pub static mut SWELL_initargs: ::std::option::Option<
                unsafe extern "C" fn(
                    argc: *mut ::std::os::raw::c_int,
                    argv: *mut *mut *mut ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_RunMessageLoop: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            pub static mut SWELL_CreateXBridgeWindow: ::std::option::Option<
                unsafe extern "C" fn(
                    viewpar: root::HWND,
                    wref: *mut *mut ::std::os::raw::c_void,
                    arg1: *const root::RECT,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            pub static mut SWELL_GetOSWindow: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    type_: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut SWELL_GetOSEvent: ::std::option::Option<
                unsafe extern "C" fn(
                    type_: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            pub static mut SWELL_GenerateGUID:
                ::std::option::Option<unsafe extern "C" fn(g: *mut ::std::os::raw::c_void) -> bool>;
        }
        extern "C" {
            pub static mut EnumChildWindows: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    cwEnumFunc: ::std::option::Option<
                        unsafe extern "C" fn(arg1: root::HWND, arg2: root::LPARAM) -> root::BOOL,
                    >,
                    lParam: root::LPARAM,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut SWELL_IsGroupBox:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND) -> root::BOOL>;
        }
        extern "C" {
            pub static mut SWELL_IsButton:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND) -> root::BOOL>;
        }
        extern "C" {
            pub static mut SWELL_IsStaticText:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND) -> root::BOOL>;
        }
        extern "C" {
            pub static mut SWELL_GetDesiredControlSize:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND, r: *mut root::RECT)>;
        }
        extern "C" {
            pub static mut AddFontResourceEx: ::std::option::Option<
                unsafe extern "C" fn(
                    str: root::LPCTSTR,
                    fl: root::DWORD,
                    pdv: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SWELL_Register_Cursor_Resource: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: *const ::std::os::raw::c_char,
                    name: *const ::std::os::raw::c_char,
                    hotspot_x: ::std::os::raw::c_int,
                    hotspot_y: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            pub static mut SWELL_ChooseColor: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    arg2: *mut root::COLORREF,
                    ncustom: ::std::os::raw::c_int,
                    custom: *mut root::COLORREF,
                ) -> bool,
            >;
        }
        extern "C" {
            pub static mut SWELL_ChooseFont: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: *mut root::LOGFONT) -> bool,
            >;
        }
        extern "C" {
            pub static mut IsWindowEnabled:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND) -> bool>;
        }
        extern "C" {
            pub static mut GetClassName: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HWND,
                    arg2: *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            pub static mut SWELL_SetClassName: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: *const ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            pub static mut SWELL_DisableContextMenu:
                ::std::option::Option<unsafe extern "C" fn(arg1: root::HWND, arg2: bool)>;
        }
        extern "C" {
            pub static mut EnumDisplayMonitors: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HDC,
                    arg2: root::LPRECT,
                    arg3: root::MONITORENUMPROC,
                    arg4: root::LPARAM,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut GetMonitorInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: root::HMONITOR,
                    arg2: *mut ::std::os::raw::c_void,
                ) -> root::BOOL,
            >;
        }
        extern "C" {
            pub static mut SWELL_osx_is_dark_mode:
                ::std::option::Option<unsafe extern "C" fn(mode: ::std::os::raw::c_int) -> bool>;
        }
    }
    pub mod reaper_control_surface {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn create_cpp_to_rust_control_surface(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *mut root::IReaperControlSurface;
        }
        extern "C" {
            pub fn delete_control_surface(surface: *mut root::IReaperControlSurface);
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_GetTypeString(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_GetDescString(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_GetConfigString(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_CloseNoReset(
                callback_target: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_Run(
                callback_target: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetTrackListChange(
                callback_target: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetSurfaceVolume(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                volume: f64,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetSurfacePan(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                pan: f64,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetSurfaceMute(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                mute: bool,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetSurfaceSelected(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                selected: bool,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetSurfaceSolo(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                solo: bool,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetSurfaceRecArm(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                recarm: bool,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetPlayState(
                callback_target: *mut ::std::os::raw::c_void,
                play: bool,
                pause: bool,
                rec: bool,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetRepeatState(
                callback_target: *mut ::std::os::raw::c_void,
                rep: bool,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetTrackTitle(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                title: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_GetTouchState(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                isPan: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_SetAutoMode(
                callback_target: *mut ::std::os::raw::c_void,
                mode: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_ResetCachedVolPanStates(
                callback_target: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_OnTrackSelection(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_IsKeyDown(
                callback_target: *mut ::std::os::raw::c_void,
                key: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            pub fn cpp_to_rust_IReaperControlSurface_Extended(
                callback_target: *mut ::std::os::raw::c_void,
                call: ::std::os::raw::c_int,
                parm1: *mut ::std::os::raw::c_void,
                parm2: *mut ::std::os::raw::c_void,
                parm3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
    }
    pub mod reaper_midi {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn delete_midi_output(output: *mut root::midi_Output);
        }
        extern "C" {
            pub fn MIDI_eventlist_EnumItems(
                self_: *mut root::MIDI_eventlist,
                bpos: *mut ::std::os::raw::c_int,
            ) -> *mut root::MIDI_event_t;
        }
        extern "C" {
            pub fn MIDI_eventlist_AddItem(
                self_: *mut root::MIDI_eventlist,
                evt: *mut root::MIDI_event_t,
            );
        }
        extern "C" {
            pub fn MIDI_eventlist_DeleteItem(
                self_: *mut root::MIDI_eventlist,
                bpos: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn MIDI_eventlist_GetSize(
                self_: *mut root::MIDI_eventlist,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn MIDI_eventlist_Empty(self_: *mut root::MIDI_eventlist);
        }
        extern "C" {
            pub fn midi_Input_GetReadBuf(self_: *mut root::midi_Input)
                -> *mut root::MIDI_eventlist;
        }
        extern "C" {
            pub fn midi_Output_Send(
                self_: *mut root::midi_Output,
                status: ::std::os::raw::c_uchar,
                d1: ::std::os::raw::c_uchar,
                d2: ::std::os::raw::c_uchar,
                frame_offset: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn midi_Output_SendMsg(
                self_: *mut root::midi_Output,
                msg: *mut root::MIDI_event_t,
                frame_offset: ::std::os::raw::c_int,
            );
        }
    }
    pub type WDL_INT64 = ::std::os::raw::c_longlong;
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct WDL_HeapBuf {
        pub m_buf: *mut ::std::os::raw::c_void,
        pub m_alloc: ::std::os::raw::c_int,
        pub m_size: ::std::os::raw::c_int,
        pub m_granul: ::std::os::raw::c_int,
        pub ___pad: ::std::os::raw::c_int,
    }
    impl Default for WDL_HeapBuf {
        fn default() -> Self {
            unsafe { ::std::mem::zeroed() }
        }
    }
    pub mod reaper_pcm_source {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn create_cpp_to_rust_pcm_source(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *mut root::PCM_source;
        }
        extern "C" {
            pub fn delete_pcm_source(source: *mut root::PCM_source);
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetLength(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> f64;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_Duplicate(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *mut root::PCM_source;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetType(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetFileName(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetSource(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *mut root::PCM_source;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_IsAvailable(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> bool;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_SetAvailable(
                callback_target: *mut ::std::os::raw::c_void,
                avail: bool,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_SetFileName(
                callback_target: *mut ::std::os::raw::c_void,
                newfn: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_SetSource(
                callback_target: *mut ::std::os::raw::c_void,
                src: *mut root::PCM_source,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetNumChannels(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetSampleRate(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> f64;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetLengthBeats(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> f64;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetBitsPerSample(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetPreferredPosition(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> f64;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_PropertiesWindow(
                callback_target: *mut ::std::os::raw::c_void,
                hwndParent: root::HWND,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetSamples(
                callback_target: *mut ::std::os::raw::c_void,
                block: *mut root::PCM_source_transfer_t,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_GetPeakInfo(
                callback_target: *mut ::std::os::raw::c_void,
                block: *mut root::PCM_source_peaktransfer_t,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_SaveState(
                callback_target: *mut ::std::os::raw::c_void,
                ctx: *mut root::ProjectStateContext,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_LoadState(
                callback_target: *mut ::std::os::raw::c_void,
                firstline: *const ::std::os::raw::c_char,
                ctx: *mut root::ProjectStateContext,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_Peaks_Clear(
                callback_target: *mut ::std::os::raw::c_void,
                deleteFile: bool,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_PeaksBuild_Begin(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_PeaksBuild_Run(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_PeaksBuild_Finish(
                callback_target: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_source_Extended(
                callback_target: *mut ::std::os::raw::c_void,
                call: ::std::os::raw::c_int,
                parm1: *mut ::std::os::raw::c_void,
                parm2: *mut ::std::os::raw::c_void,
                parm3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetLength(self_: *mut root::PCM_source) -> f64;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_Duplicate(
                self_: *mut root::PCM_source,
            ) -> *mut root::PCM_source;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetType(
                self_: *mut root::PCM_source,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetFileName(
                self_: *mut root::PCM_source,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetSource(
                self_: *mut root::PCM_source,
            ) -> *mut root::PCM_source;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_IsAvailable(self_: *mut root::PCM_source) -> bool;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_SetAvailable(self_: *mut root::PCM_source, avail: bool);
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_SetFileName(
                self_: *mut root::PCM_source,
                newfn: *const ::std::os::raw::c_char,
            ) -> bool;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_SetSource(
                self_: *mut root::PCM_source,
                src: *mut root::PCM_source,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetNumChannels(
                self_: *mut root::PCM_source,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetSampleRate(self_: *mut root::PCM_source) -> f64;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetLengthBeats(self_: *mut root::PCM_source) -> f64;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetBitsPerSample(
                self_: *mut root::PCM_source,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetPreferredPosition(self_: *mut root::PCM_source)
                -> f64;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_PropertiesWindow(
                self_: *mut root::PCM_source,
                hwndParent: root::HWND,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetSamples(
                self_: *mut root::PCM_source,
                block: *mut root::PCM_source_transfer_t,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_GetPeakInfo(
                self_: *mut root::PCM_source,
                block: *mut root::PCM_source_peaktransfer_t,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_SaveState(
                self_: *mut root::PCM_source,
                ctx: *mut root::ProjectStateContext,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_LoadState(
                self_: *mut root::PCM_source,
                firstline: *const ::std::os::raw::c_char,
                ctx: *mut root::ProjectStateContext,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_Peaks_Clear(
                self_: *mut root::PCM_source,
                deleteFile: bool,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_PeaksBuild_Begin(
                self_: *mut root::PCM_source,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_PeaksBuild_Run(
                self_: *mut root::PCM_source,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_PeaksBuild_Finish(self_: *mut root::PCM_source);
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_source_Extended(
                self_: *mut root::PCM_source,
                call: ::std::os::raw::c_int,
                parm1: *mut ::std::os::raw::c_void,
                parm2: *mut ::std::os::raw::c_void,
                parm3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_create_heap_buf() -> *mut root::WDL_HeapBuf;
        }
        extern "C" {
            pub fn rust_to_cpp_save_pcm_source_state_to_heap_buf(
                source: *mut root::PCM_source,
                buf: *mut root::WDL_HeapBuf,
            ) -> root::WDL_INT64;
        }
        extern "C" {
            pub fn rust_to_cpp_copy_heap_buf_to_buf(
                in_buf: *mut root::WDL_HeapBuf,
                out_buf: *mut ::std::os::raw::c_uchar,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_load_pcm_source_state_from_buf(
                source: *mut root::PCM_source,
                first_line: *const ::std::os::raw::c_char,
                in_buf: *mut ::std::os::raw::c_uchar,
                in_buf_size: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int;
        }
    }
    pub mod reaper_pcm_sink {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn create_cpp_to_rust_pcm_sink(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *mut root::PCM_sink;
        }
        extern "C" {
            pub fn delete_pcm_sink(sink: *mut root::PCM_sink);
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_GetOutputInfoString(
                callback_target: *mut ::std::os::raw::c_void,
                buf: *mut ::std::os::raw::c_char,
                buflen: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_GetStartTime(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> f64;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_SetStartTime(
                callback_target: *mut ::std::os::raw::c_void,
                st: f64,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_GetFileName(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_GetNumChannels(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_GetLength(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> f64;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_GetFileSize(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_longlong;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_WriteMIDI(
                callback_target: *mut ::std::os::raw::c_void,
                events: *mut root::MIDI_eventlist,
                len: ::std::os::raw::c_int,
                samplerate: f64,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_WriteDoubles(
                callback_target: *mut ::std::os::raw::c_void,
                samples: *mut *mut root::ReaSample,
                len: ::std::os::raw::c_int,
                nch: ::std::os::raw::c_int,
                offset: ::std::os::raw::c_int,
                spacing: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_WantMIDI(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> bool;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_GetLastSecondPeaks(
                callback_target: *mut ::std::os::raw::c_void,
                sz: ::std::os::raw::c_int,
                buf: *mut root::ReaSample,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_GetPeakInfo(
                callback_target: *mut ::std::os::raw::c_void,
                block: *mut root::PCM_source_peaktransfer_t,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_PCM_sink_Extended(
                callback_target: *mut ::std::os::raw::c_void,
                call: ::std::os::raw::c_int,
                parm1: *mut ::std::os::raw::c_void,
                parm2: *mut ::std::os::raw::c_void,
                parm3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_GetOutputInfoString(
                self_: *mut root::PCM_sink,
                buf: *mut ::std::os::raw::c_char,
                buflen: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_GetStartTime(self_: *mut root::PCM_sink) -> f64;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_SetStartTime(self_: *mut root::PCM_sink, st: f64);
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_GetFileName(
                self_: *mut root::PCM_sink,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_GetNumChannels(
                self_: *mut root::PCM_sink,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_GetLength(self_: *mut root::PCM_sink) -> f64;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_GetFileSize(
                self_: *mut root::PCM_sink,
            ) -> ::std::os::raw::c_longlong;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_WriteMIDI(
                self_: *mut root::PCM_sink,
                events: *mut root::MIDI_eventlist,
                len: ::std::os::raw::c_int,
                samplerate: f64,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_WriteDoubles(
                self_: *mut root::PCM_sink,
                samples: *mut *mut root::ReaSample,
                len: ::std::os::raw::c_int,
                nch: ::std::os::raw::c_int,
                offset: ::std::os::raw::c_int,
                spacing: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_WantMIDI(self_: *mut root::PCM_sink) -> bool;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_GetLastSecondPeaks(
                self_: *mut root::PCM_sink,
                sz: ::std::os::raw::c_int,
                buf: *mut root::ReaSample,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_GetPeakInfo(
                self_: *mut root::PCM_sink,
                block: *mut root::PCM_source_peaktransfer_t,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_PCM_sink_Extended(
                self_: *mut root::PCM_sink,
                call: ::std::os::raw::c_int,
                parm1: *mut ::std::os::raw::c_void,
                parm2: *mut ::std::os::raw::c_void,
                parm3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
    }
    pub mod reaper_resample {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn delete_reaper_resample_interface(
                resample_interface: *mut root::REAPER_Resample_Interface,
            );
        }
        extern "C" {
            pub fn REAPER_Resample_Interface_SetRates(
                self_: *mut root::REAPER_Resample_Interface,
                rate_in: f64,
                rate_out: f64,
            );
        }
        extern "C" {
            pub fn REAPER_Resample_Interface_Reset(self_: *mut root::REAPER_Resample_Interface);
        }
        extern "C" {
            pub fn REAPER_Resample_Interface_GetCurrentLatency(
                self_: *mut root::REAPER_Resample_Interface,
            ) -> f64;
        }
        extern "C" {
            pub fn REAPER_Resample_Interface_ResamplePrepare(
                self_: *mut root::REAPER_Resample_Interface,
                out_samples: ::std::os::raw::c_int,
                nch: ::std::os::raw::c_int,
                inbuffer: *mut *mut root::ReaSample,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn REAPER_Resample_Interface_ResampleOut(
                self_: *mut root::REAPER_Resample_Interface,
                out: *mut root::ReaSample,
                nsamples_in: ::std::os::raw::c_int,
                nsamples_out: ::std::os::raw::c_int,
                nch: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn REAPER_Resample_Interface_Extended(
                self_: *mut root::REAPER_Resample_Interface,
                call: ::std::os::raw::c_int,
                parm1: *mut ::std::os::raw::c_void,
                parm2: *mut ::std::os::raw::c_void,
                parm3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
    }
    pub mod reaper_pitch_shift {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn delete_reaper_pitch_shift(pitch_shift: *mut root::IReaperPitchShift);
        }
        extern "C" {
            pub fn IReaperPitchShift_set_srate(self_: *mut root::IReaperPitchShift, srate: f64);
        }
        extern "C" {
            pub fn IReaperPitchShift_set_nch(
                self_: *mut root::IReaperPitchShift,
                nch: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn IReaperPitchShift_set_shift(self_: *mut root::IReaperPitchShift, shift: f64);
        }
        extern "C" {
            pub fn IReaperPitchShift_set_formant_shift(
                self_: *mut root::IReaperPitchShift,
                shift: f64,
            );
        }
        extern "C" {
            pub fn IReaperPitchShift_set_tempo(self_: *mut root::IReaperPitchShift, tempo: f64);
        }
        extern "C" {
            pub fn IReaperPitchShift_Reset(self_: *mut root::IReaperPitchShift);
        }
        extern "C" {
            pub fn IReaperPitchShift_GetBuffer(
                self_: *mut root::IReaperPitchShift,
                size: ::std::os::raw::c_int,
            ) -> *mut root::ReaSample;
        }
        extern "C" {
            pub fn IReaperPitchShift_BufferDone(
                self_: *mut root::IReaperPitchShift,
                input_filled: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn IReaperPitchShift_FlushSamples(self_: *mut root::IReaperPitchShift);
        }
        extern "C" {
            pub fn IReaperPitchShift_IsReset(self_: *mut root::IReaperPitchShift) -> bool;
        }
        extern "C" {
            pub fn IReaperPitchShift_GetSamples(
                self_: *mut root::IReaperPitchShift,
                requested_output: ::std::os::raw::c_int,
                buffer: *mut root::ReaSample,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn IReaperPitchShift_SetQualityParameter(
                self_: *mut root::IReaperPitchShift,
                parm: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn IReaperPitchShift_Extended(
                self_: *mut root::IReaperPitchShift,
                call: ::std::os::raw::c_int,
                parm1: *mut ::std::os::raw::c_void,
                parm2: *mut ::std::os::raw::c_void,
                parm3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
    }
    pub mod reaper_project_state_context {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn create_cpp_to_rust_project_state_context(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *mut root::ProjectStateContext;
        }
        extern "C" {
            pub fn delete_project_state_context(context: *mut root::ProjectStateContext);
        }
        pub type RustCallback = ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut root::ProjectStateContext,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >;
        extern "C" {
            pub fn invoke_with_cpp_to_rust_project_state_context(
                callback_target: *mut ::std::os::raw::c_void,
                user_data: *mut ::std::os::raw::c_void,
                op: root::reaper_project_state_context::RustCallback,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_ProjectStateContext_AddLine(
                callback_target: *mut ::std::os::raw::c_void,
                line: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            pub fn cpp_to_rust_ProjectStateContext_GetLine(
                callback_target: *mut ::std::os::raw::c_void,
                buf: *mut ::std::os::raw::c_char,
                buflen: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_ProjectStateContext_GetOutputSize(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_longlong;
        }
        extern "C" {
            pub fn cpp_to_rust_ProjectStateContext_GetTempFlag(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn cpp_to_rust_ProjectStateContext_SetTempFlag(
                callback_target: *mut ::std::os::raw::c_void,
                flag: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_ProjectStateContext_AddLine(
                self_: *mut root::ProjectStateContext,
                line: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            pub fn rust_to_cpp_ProjectStateContext_GetLine(
                self_: *mut root::ProjectStateContext,
                buf: *mut ::std::os::raw::c_char,
                buflen: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_ProjectStateContext_GetOutputSize(
                self_: *mut root::ProjectStateContext,
            ) -> ::std::os::raw::c_longlong;
        }
        extern "C" {
            pub fn rust_to_cpp_ProjectStateContext_GetTempFlag(
                self_: *mut root::ProjectStateContext,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            pub fn rust_to_cpp_ProjectStateContext_SetTempFlag(
                self_: *mut root::ProjectStateContext,
                flag: ::std::os::raw::c_int,
            );
        }
    }
}
